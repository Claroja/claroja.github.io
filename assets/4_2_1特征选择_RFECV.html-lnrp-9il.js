import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as i,b as n,d as s,e,a as t}from"./app-9tftCahk.js";const c={},r=t(`<h1 id="特征工程-特征选择-rfecv" tabindex="-1"><a class="header-anchor" href="#特征工程-特征选择-rfecv" aria-hidden="true">#</a> 特征工程_特征选择_RFECV</h1><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ol><li>RFE和RFECV的关系 <ol><li>RFE, 要指定最终选择的特征数量</li><li>RFECV, 通过交叉验证的得分选择最优的特征, 实践中选择</li></ol></li><li>特征选择的过程 <ol><li>挑选树模型或者逻辑回归模型, 作为特征选择模型.</li><li>获得最优的特征, 进行超参调整</li></ol></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> feature_selection<span class="token punctuation">,</span> model_selection
<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets
<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> tree
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>
    data <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    columns<span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;feature_names&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span>

df<span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">]</span>

dtree <span class="token operator">=</span> tree<span class="token punctuation">.</span>DecisionTreeClassifier<span class="token punctuation">(</span>random_state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>

dtree_rfe <span class="token operator">=</span> feature_selection<span class="token punctuation">.</span>RFECV<span class="token punctuation">(</span>dtree<span class="token punctuation">,</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> scoring <span class="token operator">=</span> <span class="token string">&#39;accuracy&#39;</span><span class="token punctuation">)</span>
dtree_rfe<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">~</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>isin<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
features_rfe <span class="token operator">=</span> dtree_rfe<span class="token punctuation">.</span>feature_names_in_<span class="token punctuation">[</span>dtree_rfe<span class="token punctuation">.</span>get_support<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

param_grid <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;criterion&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;gini&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;entropy&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
    <span class="token string">&#39;splitter&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;best&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;random&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;max_depth&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;min_samples_split&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;max_features&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">&#39;auto&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sqrt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;log2&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>


rfe_tune_model <span class="token operator">=</span> model_selection<span class="token punctuation">.</span>GridSearchCV<span class="token punctuation">(</span>
    tree<span class="token punctuation">.</span>DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    param_grid<span class="token operator">=</span>param_grid<span class="token punctuation">,</span> 
    scoring <span class="token operator">=</span> <span class="token string">&#39;accuracy&#39;</span>
<span class="token punctuation">)</span>

rfe_tune_model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df<span class="token punctuation">[</span>features_rfe<span class="token punctuation">]</span><span class="token punctuation">,</span> df<span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2>`,5),u={id:"rfe",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#rfe","aria-hidden":"true"},"#",-1),d={href:"https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFECV.html#sklearn.feature_selection.RFECV",target:"_blank",rel:"noopener noreferrer"},m=t(`<ol><li><p>最佳实践</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_friedman1
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> RFE
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVR
X<span class="token punctuation">,</span> y <span class="token operator">=</span> make_friedman1<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
estimator <span class="token operator">=</span> SVR<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">&quot;linear&quot;</span><span class="token punctuation">)</span>
selector <span class="token operator">=</span> RFE<span class="token punctuation">(</span>estimator<span class="token punctuation">,</span> n_features_to_select<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
selector <span class="token operator">=</span> selector<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
selector<span class="token punctuation">.</span>support_  <span class="token comment"># array([ True,  True,  True,  True,  True, False, False, False, False,False])</span>
selector<span class="token punctuation">.</span>ranking_  <span class="token comment"># array([1, 1, 1, 1, 1, 6, 4, 3, 2, 5])</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造参数:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">sklearn</span><span class="token punctuation">.</span>feature_selection<span class="token punctuation">.</span>RFE<span class="token punctuation">(</span>
    estimator<span class="token punctuation">,</span>                      <span class="token comment"># Estimator instance, 实现fit方法, 并提供coef_和feature_importances_属性的模型</span>
    <span class="token operator">*</span><span class="token punctuation">,</span>                              
    n_features_to_select<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>      <span class="token comment"># int or float, 选择多少个特征. int: 特征个数; float: 特征占整体的比率</span>
    step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                         <span class="token comment"># int or float, 每次丢弃的特征个数. int: 个数; float: 特征占整体的比率</span>
    verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> 
    importance_getter<span class="token operator">=</span><span class="token string">&#39;auto&#39;</span>        <span class="token comment"># str or callable, 特征重要程度衡量标准. &#39;auto&#39;: 适用coef_或feature_importances_.</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对象属性:</p><ol><li>classes_: ndarray of shape (n_classes,), 目标变量</li><li>estimator_: Estimator instance, 用于筛选特征的模型</li><li>n_features_: int, 要选择的特征个数</li><li>n_features_in_: int, fit过程中特征个数</li><li>feature_names_in_: ndarray of shape (n_features_in_,), fit过程中特征名字</li><li>ranking_: ndarray of shape (n_features,), 最优特征的排序, 被选择的特征会标记为1</li><li>support_: ndarray of shape (n_features,), 所选特征遮罩</li></ol></li><li><p>对象方法:</p><ol><li>fit(X, y, **fit_params): 进行特征选择</li><li>transform(X): 将原特征矩阵, 转换为新特征矩阵</li><li>fit_transform(X, y=None, **fit_params):</li></ol></li></ol>`,1),_={id:"rfecv",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#rfecv","aria-hidden":"true"},"#",-1),b={href:"https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.RFE.html",target:"_blank",rel:"noopener noreferrer"},f=t(`<ol><li><p>最佳实践</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_friedman1
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> RFECV
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>svm <span class="token keyword">import</span> SVR
X<span class="token punctuation">,</span> y <span class="token operator">=</span> make_friedman1<span class="token punctuation">(</span>n_samples<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> n_features<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
estimator <span class="token operator">=</span> SVR<span class="token punctuation">(</span>kernel<span class="token operator">=</span><span class="token string">&quot;linear&quot;</span><span class="token punctuation">)</span>
selector <span class="token operator">=</span> RFECV<span class="token punctuation">(</span>estimator<span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cv<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
selector <span class="token operator">=</span> selector<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
selector<span class="token punctuation">.</span>cv_results_
selector<span class="token punctuation">.</span>support_
selector<span class="token punctuation">.</span>ranking_

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">sklearn</span><span class="token punctuation">.</span>feature_selection<span class="token punctuation">.</span>RFECV<span class="token punctuation">(</span>
    estimator<span class="token punctuation">,</span>                      <span class="token comment"># Estimator instance, Estimator instance, 实现fit方法, 并提供coef_和feature_importances_属性的模型</span>
    <span class="token operator">*</span><span class="token punctuation">,</span> 
    step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                         <span class="token comment"># int or float, 每次丢弃的特征个数. int: 个数; float: 特征占整体的比率</span>
    min_features_to_select<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>       <span class="token comment"># int, 最小选择的特征数</span>
    cv<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                        <span class="token comment"># int, cross-validation generator or an iterable, None: 默认5折StratifiedKFold; int, 指定折数StratifiedKFold; generator: CV spliter; iterable: ?.</span>
    scoring<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                   <span class="token comment"># str, callable or None, </span>
    verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                      <span class="token comment"># int</span>
    n_jobs<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                    <span class="token comment"># int or None, 并行度</span>
    importance_getter<span class="token operator">=</span><span class="token string">&#39;auto&#39;</span>        <span class="token comment"># str or callable, 特征重要程度衡量标准. &#39;auto&#39;: 适用coef_或feature_importances_.</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>对象属性:</p><ol><li>classes_: ndarray of shape (n_classes,), 目标变量</li><li>estimator_: Estimator instance, 模型实例</li><li>cv_results_: dict of ndarrays, 字典, key是具体统计项, 包含每折的测试得分, 所有折的测试得分的平均值, 所有折测试侧分的标准差, 使用了多少个特征. value是数组, 第1位是使用了1个特征, 最后一个是使用了所有特征 <ol><li>split(k)_test_score: ndarray of shape (n_subsets_of_features,)</li><li>mean_test_score: ndarray of shape (n_subsets_of_features,)</li><li>std_test_score: ndarray of shape (n_subsets_of_features,)</li><li>n_features: ndarray of shape (n_subsets_of_features,)</li></ol></li><li>n_features_: int, 被选择的特征数</li><li>n_features_in_: int, fit过程中使用的特征数</li><li>feature_names_in_: ndarray of shape (n_features_in_,), fit过程中使用的特征名称</li><li>ranking_: ndarray of shape (n_features,), 最优特征的排序, 被选择的特征会标记为1</li><li>support_: ndarray of shape (n_features,), 所选特征遮罩</li></ol></li><li><p>对象方法:</p><ol><li>fit(X, y, *, groups=None, **params)</li><li>fit_transform(X, y=None, **fit_params)</li><li>predict(X, **predict_params)</li><li>predict_log_proba(X)</li><li>predict_proba(X)</li><li>score(X, y, **score_params)</li><li>transform(X)</li></ol></li></ol><h2 id="多个模型求均值确定特征的重要程度" tabindex="-1"><a class="header-anchor" href="#多个模型求均值确定特征的重要程度" aria-hidden="true">#</a> 多个模型求均值确定特征的重要程度</h2>`,2),h={href:"https://www.kaggle.com/code/expclaroja/introduction-to-ensembling-stacking-in-python/edit",target:"_blank",rel:"noopener noreferrer"};function g(y,E){const a=o("ExternalLinkIcon");return l(),i("div",null,[r,n("h3",u,[k,s(),n("a",d,[s("RFE"),e(a)])]),m,n("h3",_,[v,s(),n("a",b,[s("RFECV"),e(a)])]),f,n("p",null,[s("有"),n("a",h,[s("文章"),e(a)]),s("提到, 用多个模型的均值来判断特征的重要程度.")])])}const R=p(c,[["render",g],["__file","4_2_1特征选择_RFECV.html.vue"]]);export{R as default};
