import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,a as t}from"./app-7knaTE3M.js";const e="/assets/1-WAquER-m.png",i="/assets/2-QYTH1HXN.png",p="/assets/3-enOiX24A.png",c={},o=t(`<h1 id="css函数" tabindex="-1"><a class="header-anchor" href="#css函数" aria-hidden="true">#</a> css函数</h1><h2 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat" aria-hidden="true">#</a> repeat()</h2><p>repeat() 函数表示轨道列表的重复片段，该函数有两个参数：</p><ol><li><p>第一个参数用来指定行或列的重复模式重复的次数，有三种取值方式：</p><ol><li><code>&lt;number&gt;</code>：整数，确切的重复次数。</li><li><code>&lt;auto-fill&gt;</code>：以网格项为准自动填充。</li><li><code>&lt;auto-fit&gt;</code>：以网格容器为准自动填充。</li></ol></li><li><p>第二个参数用来指定行或列的重复模式重复的内容，有以下取值方式：</p><ol><li><code>&lt;length&gt;</code>：非负长度。</li><li><code>&lt;percentage&gt;</code>：相对于列轨道中网格容器的内联大小的非负百分比，以及行轨道中网格容器的块长宽。</li><li><code>&lt;flex&gt;</code>：单位为fr的非负长度，指定轨道弹性布局的系数值。</li><li><code>max-content</code>：表示网格的轨道长度自适应内容最大的那个单元格。</li><li><code>min-content</code>：表示网格的轨道长度自适应内容最小的那个单元格。</li><li><code>auto</code>：作为最大值时，等价于max-content。作为最小值时，它表示轨道中单元格最小长宽(min-width/min-height)的最大值。</li></ol></li></ol><p>假设我们要创建一个具有六个相等列的网格。如果没有 repeat() 函数，我们必须使用 grid-template-columns 属性显式定义每个列。代码如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
     <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
     <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 1fr 1fr 1fr 1fr 1fr 1fr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，随着列数的增加，这种方法变得不可持续和冗长。我们可以使用repeat()函数将其重写为更紧凑的形式。代码如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
     <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
     <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>6<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h2 id="minmax" tabindex="-1"><a class="header-anchor" href="#minmax" aria-hidden="true">#</a> minmax()</h2><p>minmax() 函数允许我们指定网格轨道的最小和最大尺寸，它是一个长宽范围的闭区间。当网格在视口中调整大小时，网格轨道将在该范围内增长和缩小。在较小的屏幕上，它会缩小直到达到最小尺寸。在更大的屏幕上，它会拉伸直到达到最大尺寸。</p><p>minmax() 函数接受 CSS Grid 大小单位、关键字、长度和百分比值。其有两个参数：</p><ol><li>min：轨道的最小尺寸。</li><li>max：轨道的最大尺寸。</li></ol><p>下例中, 使用 minmax() 函数将网格容器中两行的最小高度设置为 100px，将最大高度设置 max-content。这样就可以确保每一行在超过 100px 时都能伸展并变得尽可能宽，以容纳其内容。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
   <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>100px<span class="token punctuation">,</span> max-content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h2 id="fit-content" tabindex="-1"><a class="header-anchor" href="#fit-content" aria-hidden="true">#</a> fit-content()</h2><p>fit-content() 函数的操作类似于 minmax() 函数。不同之处在于，使用 fit-content()时，最小值是网格项中内容的大小，最大值是我们传递给它的值。这样就可以将内容设置为最小值，并根据需要将其放大到某个值。</p><p>如果最小宽度的值超过了提供给函数的值，则网格轨道的大小将设置为传递给 fit-content() 函数的值，并且网格项的内容将换行。</p><p>下例中, 使用 fit-content() 函数分别创建了宽度为 200px、300px 和 400px 的三列。这意味着每列的大小将等于其网格项目中最小的内容或文本的大小，但如果这变得大于提供给 fit-content() 函数的值，则列将设置为传递给 fit-content() 函数的值。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
   <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
   <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">fit-content</span><span class="token punctuation">(</span>200px<span class="token punctuation">)</span> <span class="token function">fit-content</span><span class="token punctuation">(</span>300px<span class="token punctuation">)</span> <span class="token function">fit-content</span><span class="token punctuation">(</span>400px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ol><li>https://zhangqiang.work/lab/css_layout_grid/</li><li>https://www.toutiao.com/article/7173980850827117096/</li><li>https://www.zhangxinxu.com/wordpress/2018/11/display-grid-css-css3/</li></ol>',24),l=[o];function u(r,d){return a(),s("div",null,l)}const g=n(c,[["render",u],["__file","5css函数.html.vue"]]);export{g as default};
