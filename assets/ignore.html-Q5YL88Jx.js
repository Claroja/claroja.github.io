const o=JSON.parse('{"key":"v-409c09c2","path":"/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/git/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/ignore.html","title":"ignore","lang":"zh-CN","frontmatter":{"description":"ignore ! 开头的模式标识否定，该文件将会再次被包含. 多用于对*的取反, 比如*.log, !import.log 注意, 如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用!规则是不起作用的。所以需要对目录先使用!. /* !.gitignore !/fw/ /fw/* !/fw/bin/ !/fw/sf/ 忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。 / 放在开始, 匹配项目跟目录, 如果省略不写也表示根目录 放在末尾, 只匹配路径下的内容，但是不匹配该路径或同名文件 fd1/*, 忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略； /fd1/*, 忽略根目录下的 /fd1/ 目录的全部内容； * 通用匹配零个或多个字符, *.log表示忽略所有.log文件, *这里包含了所有路径以及文件名 ** 匹配多级目录，可在开始，中间，结束. 如a/**/z可以匹配 a/z, a/b/z, a/b/c/z等。 ? 通用匹配单个字符 [] 通用匹配单个字符列表, 如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c # 开头的行都会被 Git 忽略。即#开头的文件标识注释 bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略bin文件 /bin: 忽略根目录下的bin文件 /*.c: 忽略根目录下的cat.c，不忽略根目录外的build/cat.c debug/*.obj: 忽略根目录下的debug/io.obj，不忽略tools/debug/io.obj **/foo: 忽略所有路径下的foo路径, /foo, a/foo, a/b/foo等 a/**/b: 忽略a/b, a/x/b, a/x/y/b等 !/bin/run.sh: 不忽略bin目录下的run.sh文件 *.log: 忽略所有.log文件 config.php: 忽略当前路径的config.php文件","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/git/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/ignore.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"ignore"}],["meta",{"property":"og:description","content":"ignore ! 开头的模式标识否定，该文件将会再次被包含. 多用于对*的取反, 比如*.log, !import.log 注意, 如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用!规则是不起作用的。所以需要对目录先使用!. /* !.gitignore !/fw/ /fw/* !/fw/bin/ !/fw/sf/ 忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。 / 放在开始, 匹配项目跟目录, 如果省略不写也表示根目录 放在末尾, 只匹配路径下的内容，但是不匹配该路径或同名文件 fd1/*, 忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略； /fd1/*, 忽略根目录下的 /fd1/ 目录的全部内容； * 通用匹配零个或多个字符, *.log表示忽略所有.log文件, *这里包含了所有路径以及文件名 ** 匹配多级目录，可在开始，中间，结束. 如a/**/z可以匹配 a/z, a/b/z, a/b/c/z等。 ? 通用匹配单个字符 [] 通用匹配单个字符列表, 如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c # 开头的行都会被 Git 忽略。即#开头的文件标识注释 bin/: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略bin文件 /bin: 忽略根目录下的bin文件 /*.c: 忽略根目录下的cat.c，不忽略根目录外的build/cat.c debug/*.obj: 忽略根目录下的debug/io.obj，不忽略tools/debug/io.obj **/foo: 忽略所有路径下的foo路径, /foo, a/foo, a/b/foo等 a/**/b: 忽略a/b, a/x/b, a/x/y/b等 !/bin/run.sh: 不忽略bin目录下的run.sh文件 *.log: 忽略所有.log文件 config.php: 忽略当前路径的config.php文件"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-27T13:17:01.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2023-11-27T13:17:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ignore\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-27T13:17:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1701091021000,"updatedTime":1701091021000,"contributors":[{"name":"claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":2.14,"words":642},"filePathRelative":"编程基础/git/安装与配置/ignore.md","localizedDate":"2023年11月27日","excerpt":"<h1> ignore</h1>\\n<ul>\\n<li>\\n<p><code>!</code> 开头的模式标识否定，该文件将会再次被包含. 多用于对<code>*</code>的取反, 比如<code>*.log</code>, <code>!import.log</code></p>\\n<blockquote>\\n<p>注意, 如果文件的父<code>目录</code>已经被前面的规则排除掉了，那么对这个<code>文件</code>用<code>!</code>规则是不起作用的。所以需要对目录先使用<code>!</code>.<br>\\n/*<br>\\n!.gitignore<br>\\n!/fw/<br>\\n/fw/*<br>\\n!/fw/bin/<br>\\n!/fw/sf/<br>\\n忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。</p>\\n</blockquote>\\n</li>\\n<li>\\n<p><code>/</code></p>\\n<ul>\\n<li>放在开始, 匹配项目跟目录, 如果省略不写也表示根目录</li>\\n<li>放在末尾, 只匹配路径下的内容，但是不匹配该路径或同名文件</li>\\n</ul>\\n<p><code>fd1/*</code>, 忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；<br>\\n<code>/fd1/*</code>, 忽略根目录下的 /fd1/ 目录的全部内容；</p>\\n</li>\\n<li>\\n<p><code>*</code> 通用匹配零个或多个字符, <code>*.log</code>表示忽略所有<code>.log</code>文件, <code>*</code>这里包含了所有路径以及文件名</p>\\n</li>\\n<li>\\n<p><code>**</code> 匹配多级目录，可在开始，中间，结束. 如<code>a/**/z</code>可以匹配 <code>a/z</code>, <code>a/b/z</code>, <code>a/b/c/z</code>等。</p>\\n</li>\\n<li>\\n<p><code>?</code> 通用匹配单个字符</p>\\n</li>\\n<li>\\n<p><code>[]</code> 通用匹配单个字符列表, 如<code>[abc]</code>表示要么匹配一个a，要么匹配一个b，要么匹配一个c</p>\\n</li>\\n<li>\\n<p><code>#</code> 开头的行都会被 Git 忽略。即#开头的文件标识注释</p>\\n</li>\\n<li>\\n<p><code>bin/</code>: 忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略bin文件</p>\\n</li>\\n<li>\\n<p><code>/bin</code>: 忽略根目录下的bin文件</p>\\n</li>\\n<li>\\n<p><code>/*.c</code>: 忽略根目录下的<code>cat.c</code>，不忽略根目录外的<code>build/cat.c</code></p>\\n</li>\\n<li>\\n<p><code>debug/*.obj</code>: 忽略根目录下的<code>debug/io.obj</code>，不忽略<code>tools/debug/io.obj</code></p>\\n</li>\\n<li>\\n<p><code>**/foo</code>: 忽略所有路径下的<code>foo</code>路径, <code>/foo</code>, <code>a/foo</code>, <code>a/b/foo</code>等</p>\\n</li>\\n<li>\\n<p><code>a/**/b</code>: 忽略a/b, a/x/b, a/x/y/b等</p>\\n</li>\\n<li>\\n<p><code>!/bin/run.sh</code>: 不忽略<code>bin</code>目录下的<code>run.sh</code>文件</p>\\n</li>\\n<li>\\n<p><code>*.log</code>: 忽略所有<code>.log</code>文件</p>\\n</li>\\n<li>\\n<p><code>config.php</code>: 忽略当前路径的<code>config.php</code>文件</p>\\n</li>\\n</ul>","copyright":{"author":"王新宇"},"autoDesc":true}');export{o as data};
