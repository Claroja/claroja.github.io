import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c,b as n,d as s,e as l,a}from"./app-7knaTE3M.js";const i={},u=a(`<h1 id="顺序编码-labelencoder" tabindex="-1"><a class="header-anchor" href="#顺序编码-labelencoder" aria-hidden="true">#</a> 顺序编码(LabelEncoder)</h1><p>对于特征, 有顺序无顺序都是进行LabelEncoder</p><h2 id="pandas" tabindex="-1"><a class="header-anchor" href="#pandas" aria-hidden="true">#</a> pandas</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> category_encoders <span class="token keyword">as</span> ce
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;Grade&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;High&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token string">&#39;Medium&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;other&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;haha&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

df<span class="token punctuation">[</span><span class="token string">&#39;Grade&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;Medium&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;High&#39;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 0    2.0</span>
<span class="token comment"># 1    NaN</span>
<span class="token comment"># 2    1.0</span>
<span class="token comment"># 3    0.0</span>
<span class="token comment"># 4    NaN</span>
<span class="token comment"># Name: Grade, dtype: float64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✨缺失值(missing)和未知值(unknown)被当成NaN对待</p>`,5),r={id:"category-encoders",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#category-encoders","aria-hidden":"true"},"#",-1),k={href:"https://contrib.scikit-learn.org/category_encoders/index.html",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">category_encoders</span><span class="token punctuation">.</span>ordinal<span class="token punctuation">.</span>OrdinalEncoder<span class="token punctuation">(</span>
    verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                  <span class="token comment"># int, 输出信息的详细程度</span>
    mapping<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>               <span class="token comment"># list of dicts, key是要编码的特征名字, value是字典, 子key是原始分类, 子value是编码分类[{‘col’: ‘col1’, ‘mapping’: {None: 0, ‘a’: 1, ‘b’: 2}}, {‘col’: ‘col2’, ‘mapping’: {None: 0, ‘x’: 1, ‘y’: 2}}]</span>
    cols<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                  <span class="token comment"># list, 要编码的列名, 如果为None则所有的string列都会被编码. ✨当提供mapping时, 优先使用mapping中的列, 而不是全部列</span>
    drop_invariant<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>       <span class="token comment"># bool, 是否丢弃方差为0的特征</span>
    return_df<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>             <span class="token comment"># bool, 为True时, 返回DataFrame; 为False时, 返回numpy ndarray </span>
    handle_unknown<span class="token operator">=</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span>     <span class="token comment"># str, 将mapping中的未知分类编码成&#39;value&#39;, 编码为-1</span>
    handle_missing<span class="token operator">=</span><span class="token string">&#39;value&#39;</span>      <span class="token comment"># str, 将缺失值编码成&#39;value\`,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">import</span> category_encoders <span class="token keyword">as</span> ce
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;Grade&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;High&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token string">&#39;Medium&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;other&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;haha&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

ce<span class="token punctuation">.</span>OrdinalEncoder<span class="token punctuation">(</span>
    <span class="token comment"># cols=[&#39;Grade&#39;], </span>
    mapping<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;col&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Grade&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;mapping&#39;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;Medium&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;High&#39;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    handle_missing <span class="token operator">=</span> <span class="token string">&#39;return_nan&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>df<span class="token punctuation">)</span>

<span class="token comment">#    Grade haha</span>
<span class="token comment"># 0    2.0    a</span>
<span class="token comment"># 1   -1.0    b</span>
<span class="token comment"># 2    1.0    c</span>
<span class="token comment"># 3    0.0    d</span>
<span class="token comment"># 4   -1.0    e</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>✨handle_missing参数没有起作用</li><li>✨在mapping参数存在的情况下, 不需要传入cols</li></ol><p>✨功能上是一致的, 区别在于:</p><ol><li>label encoder是给目标类别编码的, 所以输入的数据形状是一维的, (n_samples,)</li><li>ordinal encoder是给特征类别编码的, 所以输入的数据形状是多维的, (n_samples, n_features)</li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ol><li>https://datascience.stackexchange.com/questions/39317/difference-between-ordinalencoder-and-labelencoder</li><li>https://www.cnblogs.com/dangui/p/15836197.html</li></ol>`,7);function v(b,g){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,n("h2",r,[d,s(),n("a",k,[s("category_encoders"),l(e)])]),m])}const y=t(i,[["render",v],["__file","3_1_1特征编码_Label.html.vue"]]);export{y as default};
