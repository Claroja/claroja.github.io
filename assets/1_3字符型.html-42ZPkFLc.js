import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as a,e as s}from"./app-jdLxCr9I.js";const e={},d=s(`<h2 id="字符" tabindex="-1"><a class="header-anchor" href="#字符" aria-hidden="true">#</a> 字符</h2><ol><li>英文半角格式的单引号(&#39; &#39;)把字符括起来</li><li>字符变量实际上并不是把该字符本身放到变量的内存单元中去，而是将该字符对应的 ASCII 编码放到变量的存储单元中,所以char的本质就是一个1字节大小的整型。</li><li>&#39;x&#39;与&quot;x&quot;是不同的，前者是一个整数，其值是字母x在字符集中对应的数值；后者是一个包含一个字符以及一个结束符&#39;\\0&#39;的字符数组。</li><li>在C中,每个类型为char的变量都存在内存的一个字节中.大多数机器上一个字节由八位组成. <code>char c = &#39;a&#39;</code> 在内存中的存储方式: 二进制<code>|0|1|1|0|0|0|0|1</code> 十进制:<code>97</code></li><li>c语言中字符不能存放汉字,因为只有1个字节,只能存放ascii码</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token char">&#39;王&#39;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符：</h2><table><thead><tr><th>符号</th><th>说明</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>\\a</td><td>响铃符</td><td>\\</td><td>反斜杠</td></tr><tr><td>\\b</td><td>回退符</td><td>?</td><td>问号</td></tr><tr><td>\\f</td><td>换页符</td><td>\\’</td><td>单引号</td></tr><tr><td>\\n</td><td>换行符</td><td>\\”</td><td>双引号</td></tr><tr><td>\\r</td><td>回车符</td><td>\\ooo</td><td>八进制数</td></tr><tr><td>\\t</td><td>横向制表符</td><td>\\xhh</td><td>十六进制数</td></tr><tr><td>\\v</td><td>纵向制表符</td><td>\\0</td><td>空字符</td></tr></tbody></table><h2 id="字符的输入和输出" tabindex="-1"><a class="header-anchor" href="#字符的输入和输出" aria-hidden="true">#</a> 字符的输入和输出</h2><p>输入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>	scanf(&quot;%d&quot;,&amp;a);
	getchar();
	putchar();
	printf(&quot;%d\\n&quot;,a);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),c=[d];function i(o,r){return n(),a("div",null,c)}const u=t(e,[["render",i],["__file","1_3字符型.html.vue"]]);export{u as default};
