import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-jdLxCr9I.js";const e={},o=t(`<h1 id="fopen" tabindex="-1"><a class="header-anchor" href="#fopen" aria-hidden="true">#</a> fopen</h1><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>FILE <span class="token operator">*</span> <span class="token function">fopen</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> mode <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>C字符串,文件名</td></tr><tr><td>mode</td><td></td></tr></tbody></table><table><thead><tr><th>mode</th><th>描述</th></tr></thead><tbody><tr><td>r&quot;</td><td>read: Open file for input operations. The file must exist.</td></tr><tr><td>&quot;w&quot;</td><td>write: 创建新文件,如果已存在,则覆盖</td></tr><tr><td>&quot;a&quot;</td><td>append: 追加,如果文件不存在,则创建.光标在末尾,忽略<code>fseek, fsetpos, rewind</code></td></tr><tr><td>&quot;r+&quot;</td><td>read/update: Open a file for update (both for input and output). The file must exist.</td></tr><tr><td>&quot;w+&quot;</td><td>write/update: 创建新文件,如果已存在,则覆盖</td></tr><tr><td>&quot;a+&quot;</td><td>append/update: Open a file for update (both for input and output) with all output operations writing data at the end of the file. Repositioning operations (fseek, fsetpos, rewind) affects the next input operations, but output operations move the position back to the end of file. The file is created if it does not exist.</td></tr></tbody></table><ol><li>mode:使用<code>b</code>来处理二进制文件,如&quot;rb&quot;,&quot;wb&quot;,&quot;ab&quot;,&quot;r+b&quot;,&quot;w+b&quot;</li><li>mode:C2011中加了&#39;x&#39;,来确认文件是否存在,而不是直接覆盖文件</li><li>mode:&quot;+&quot;,文件stream在写后的读操作,会先调用flushed(\`fflush)或repositioned((fseek, fsetpos, rewind)</li><li>mode:&quot;+&quot;,读后的写操作,需要先调用<code>fseek, fsetpos, rewind</code></li></ol><p>例子:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	FILE <span class="token operator">*</span> pFile<span class="token punctuation">;</span>
	pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">&quot;fopen example&quot;</span><span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="fclose" tabindex="-1"><a class="header-anchor" href="#fclose" aria-hidden="true">#</a> fclose</h1><ol><li>关闭文件,在之前刷新缓冲区</li></ol><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>stream</td><td>FILE object</td></tr></tbody></table><table><thead><tr><th>返回</th><th>描述</th></tr></thead><tbody><tr><td>成功</td><td>返回0</td></tr><tr><td>失败</td><td>EOF(-1)</td></tr></tbody></table><h1 id="freopen" tabindex="-1"><a class="header-anchor" href="#freopen" aria-hidden="true">#</a> freopen</h1><ol><li>重定向已经打开的流</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>FILE <span class="token operator">*</span><span class="token function">freopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>mode<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>C字符串,要打开的文件名</td></tr><tr><td>mode</td><td>C字符串</td></tr><tr><td>stream</td><td>FILE指针,要被重新打开的流</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>
	fp <span class="token operator">=</span> <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;将标准输出的流重定向到文件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//printf本应该打印在控制台,现在写入了文件</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: http://www.gnu.org/software/libc/manual/html_node/I_002fO-on-Streams.html#I_002fO-on-Streams</p>`,17),p=[o];function i(c,l){return s(),a("div",null,p)}const u=n(e,[["render",i],["__file","2_2fopen和fclose.html.vue"]]);export{u as default};
