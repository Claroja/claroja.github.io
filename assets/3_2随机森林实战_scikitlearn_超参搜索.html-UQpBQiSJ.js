const n=JSON.parse(`{"key":"v-004814b6","path":"/2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/3%E6%A0%91%E6%A8%A1%E5%9E%8B/3%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/3_2%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%AE%9E%E6%88%98_scikitlearn_%E8%B6%85%E5%8F%82%E6%90%9C%E7%B4%A2.html","title":"","lang":"zh-CN","frontmatter":{"description":"接口 构造参数 class sklearn.ensemble.RandomForestClassifier( n_estimators=100, # int, 树的个数 *, criterion='gini', # {“gini”, “entropy”, “log_loss”}, 分裂点选择指标 max_depth=None, # int, 树的深度, 如果不设定, 则树会无限延伸直至纯净或达到min_samples_split的值 min_samples_split=2, # int or float, 节点最小分裂的数据量, 如果为float, 该值为该节点的样本量*该值 min_samples_leaf=1, # int or float, 叶节点最少的样本量 min_weight_fraction_leaf=0.0, # float, 如果我们设置 min_weight_fraction_leaf 为0.1，这意味着每个叶节点在所有输入样本中的权重总和至少要达到10% max_features='sqrt', # {“sqrt”, “log2”, None}, int or float, 每次分裂选择的特征数, 除了int外, 其他都是和数据总特征相关 max_leaf_nodes=None, # int, 最大叶子节点个数 min_impurity_decrease=0.0, # float, 节点的impurity值小于该值时, 将不再分裂 bootstrap=True, # bool, bootstrap抽样 oob_score=False, # bool or callable, 是否使用OOB_Score, 默认使用accuracy_score n_jobs=None, # int, 并行度 random_state=None, # int, RandomState instance or None, 随机种子 verbose=0, # int, 训练记录 warm_start=False, # bool, 热启动, 如果为True, 重复使用配置, 降低训练时间 class_weight=None, # {“balanced”, “balanced_subsample”}, dict or list of dicts, 样本的权重 ccp_alpha=0.0, # non-negative float, Minimal Cost-Complexity Pruning max_samples=None, # int or float, bootstrap抽样时的样本数量, 默认和整体相同 monotonic_cst=None # array-like of int of shape (n_features), )","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/3%E6%A0%91%E6%A8%A1%E5%9E%8B/3%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97/3_2%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E5%AE%9E%E6%88%98_scikitlearn_%E8%B6%85%E5%8F%82%E6%90%9C%E7%B4%A2.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:description","content":"接口 构造参数 class sklearn.ensemble.RandomForestClassifier( n_estimators=100, # int, 树的个数 *, criterion='gini', # {“gini”, “entropy”, “log_loss”}, 分裂点选择指标 max_depth=None, # int, 树的深度, 如果不设定, 则树会无限延伸直至纯净或达到min_samples_split的值 min_samples_split=2, # int or float, 节点最小分裂的数据量, 如果为float, 该值为该节点的样本量*该值 min_samples_leaf=1, # int or float, 叶节点最少的样本量 min_weight_fraction_leaf=0.0, # float, 如果我们设置 min_weight_fraction_leaf 为0.1，这意味着每个叶节点在所有输入样本中的权重总和至少要达到10% max_features='sqrt', # {“sqrt”, “log2”, None}, int or float, 每次分裂选择的特征数, 除了int外, 其他都是和数据总特征相关 max_leaf_nodes=None, # int, 最大叶子节点个数 min_impurity_decrease=0.0, # float, 节点的impurity值小于该值时, 将不再分裂 bootstrap=True, # bool, bootstrap抽样 oob_score=False, # bool or callable, 是否使用OOB_Score, 默认使用accuracy_score n_jobs=None, # int, 并行度 random_state=None, # int, RandomState instance or None, 随机种子 verbose=0, # int, 训练记录 warm_start=False, # bool, 热启动, 如果为True, 重复使用配置, 降低训练时间 class_weight=None, # {“balanced”, “balanced_subsample”}, dict or list of dicts, 样本的权重 ccp_alpha=0.0, # non-negative float, Minimal Cost-Complexity Pruning max_samples=None, # int or float, bootstrap抽样时的样本数量, 默认和整体相同 monotonic_cst=None # array-like of int of shape (n_features), )"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"接口","slug":"接口","link":"#接口","children":[{"level":3,"title":"构造参数","slug":"构造参数","link":"#构造参数","children":[]},{"level":3,"title":"对象属性","slug":"对象属性","link":"#对象属性","children":[]},{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]}]},{"level":2,"title":"实战","slug":"实战","link":"#实战","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":2.07,"words":622},"filePathRelative":"2机器学习/1算法原理/3树模型/3随机森林/3_2随机森林实战_scikitlearn_超参搜索.md","localizedDate":"2025年2月24日","excerpt":"<h2> 接口</h2>\\n<h3> 构造参数</h3>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">sklearn</span><span class=\\"token punctuation\\">.</span>ensemble<span class=\\"token punctuation\\">.</span>RandomForestClassifier<span class=\\"token punctuation\\">(</span>\\n    n_estimators<span class=\\"token operator\\">=</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">,</span>                   <span class=\\"token comment\\"># int, 树的个数</span>\\n    <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span>\\n    criterion<span class=\\"token operator\\">=</span><span class=\\"token string\\">'gini'</span><span class=\\"token punctuation\\">,</span>                   <span class=\\"token comment\\"># {“gini”, “entropy”, “log_loss”}, 分裂点选择指标</span>\\n    max_depth<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                     <span class=\\"token comment\\"># int, 树的深度, 如果不设定, 则树会无限延伸直至纯净或达到min_samples_split的值</span>\\n    min_samples_split<span class=\\"token operator\\">=</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span>                <span class=\\"token comment\\"># int or float, 节点最小分裂的数据量, 如果为float, 该值为该节点的样本量*该值</span>\\n    min_samples_leaf<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>                 <span class=\\"token comment\\"># int or float, 叶节点最少的样本量</span>\\n    min_weight_fraction_leaf<span class=\\"token operator\\">=</span><span class=\\"token number\\">0.0</span><span class=\\"token punctuation\\">,</span>       <span class=\\"token comment\\"># float, 如果我们设置 min_weight_fraction_leaf 为0.1，这意味着每个叶节点在所有输入样本中的权重总和至少要达到10%</span>\\n    max_features<span class=\\"token operator\\">=</span><span class=\\"token string\\">'sqrt'</span><span class=\\"token punctuation\\">,</span>                <span class=\\"token comment\\"># {“sqrt”, “log2”, None}, int or float, 每次分裂选择的特征数, 除了int外, 其他都是和数据总特征相关</span>\\n    max_leaf_nodes<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                <span class=\\"token comment\\"># int, 最大叶子节点个数</span>\\n    min_impurity_decrease<span class=\\"token operator\\">=</span><span class=\\"token number\\">0.0</span><span class=\\"token punctuation\\">,</span>          <span class=\\"token comment\\"># float, 节点的impurity值小于该值时, 将不再分裂</span>\\n    bootstrap<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">,</span>                     <span class=\\"token comment\\"># bool, bootstrap抽样</span>\\n    oob_score<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span>                    <span class=\\"token comment\\"># bool or callable, 是否使用OOB_Score, 默认使用accuracy_score</span>\\n    n_jobs<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                        <span class=\\"token comment\\"># int, 并行度</span>\\n    random_state<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                  <span class=\\"token comment\\"># int, RandomState instance or None, 随机种子</span>\\n    verbose<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>                          <span class=\\"token comment\\"># int, 训练记录</span>\\n    warm_start<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span>                   <span class=\\"token comment\\"># bool, 热启动, 如果为True, 重复使用配置, 降低训练时间</span>\\n    class_weight<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                  <span class=\\"token comment\\"># {“balanced”, “balanced_subsample”}, dict or list of dicts, 样本的权重</span>\\n    ccp_alpha<span class=\\"token operator\\">=</span><span class=\\"token number\\">0.0</span><span class=\\"token punctuation\\">,</span>                      <span class=\\"token comment\\"># non-negative float, Minimal Cost-Complexity Pruning</span>\\n    max_samples<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                   <span class=\\"token comment\\"># int or float, bootstrap抽样时的样本数量, 默认和整体相同</span>\\n    monotonic_cst<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span>                  <span class=\\"token comment\\"># array-like of int of shape (n_features), </span>\\n<span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{n as data};
