const t=JSON.parse('{"key":"v-1c61e610","path":"/1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/3%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/1numpy/7%E9%9A%8F%E6%9C%BA%E6%96%B9%E6%B3%95.html","title":"random","lang":"zh-CN","frontmatter":{"description":"random 以下方法都要加np.random.前缀 注意生成的对象没有维度.既.shape属性,第二个数字是空.要用reshape来将它转换为多维度,这样才能像矩阵那样操作. 1.简单随机数据 name describe rand(d0, d1, ..., dn) 返回随机分布,d是维度的意思，既设置0维度数量，1维度数量 randn(d0, d1, ..., dn) 返回正态分布 randint(low[, high, size, dtype]) 返回一个范围在 low (包含) 到 high (不包含)的整数. random_integers(low[, high, size]) Random integers of type np.int between low and high, inclusive. random_sample([size]) Return random floats in the half-open interval [0.0, 1.0). random([size]) Return random floats in the half-open interval [0.0, 1.0). ranf([size]) Return random floats in the half-open interval [0.0, 1.0). sample([size]) Return random floats in the half-open interval [0.0, 1.0). choice(a[, size, replace, p]) Generates a random sample from a given 1-D array bytes(length) Return random bytes. 2.生成随机分布 name describe -- -- beta(a, b[, size]) Draw samples from a Beta distribution. binomial(n, p[, size]) Draw samples from a binomial distribution. chisquare(df[, size]) Draw samples from a chi-square distribution. dirichlet(alpha[, size]) Draw samples from the Dirichlet distribution. exponential([scale, size]) Draw samples from an exponential distribution. f(dfnum, dfden[, size]) Draw samples from an F distribution. gamma(shape[, scale, size]) Draw samples from a Gamma distribution. geometric(p[, size]) Draw samples from the geometric distribution. gumbel([loc, scale, size]) Draw samples from a Gumbel distribution. hypergeometric(ngood, nbad, nsample[, size]) Draw samples from a Hypergeometric distribution. laplace([loc, scale, size]) Draw samples from the Laplace or double exponential distribution with specified logistic([loc, scale, size]) Draw samples from a logistic distribution. lognormal([mean, sigma, size]) Draw samples from a log-normal distribution. logseries(p[, size]) Draw samples from a logarithmic series distribution. multinomial(n, pvals[, size]) Draw samples from a multinomial distribution. multivariate_normal(mean, cov[, size]) Draw random samples from a multivariate normal distribution. negative_binomial(n, p[, size]) Draw samples from a negative binomial distribution. noncentral_chisquare(df, nonc[, size]) Draw samples from a noncentral chi-square distribution. noncentral_f(dfnum, dfden, nonc[, size]) Draw samples from the noncentral F distribution. normal([loc, scale, size]) Draw random samples from a normal (Gaussian) distribution. pareto(a[, size]) Draw samples from a Pareto II or Lomax distribution with specified shape. poisson([lam, size]) Draw samples from a Poisson distribution. power(a[, size]) Draws samples in [0, 1] from a power distribution with positive exponent a - 1. rayleigh([scale, size]) Draw samples from a Rayleigh distribution. standard_cauchy([size]) Draw samples from a standard Cauchy distribution with mode = 0. standard_exponential([size]) Draw samples from the standard exponential distribution. standard_gamma(shape[, size]) Draw samples from a standard Gamma distribution. standard_normal([size]) Draw samples from a standard Normal distribution (mean=0, stdev=1). standard_t(df[, size]) Draw samples from a standard Student’s t distribution with df degrees of freedom. triangular(left, mode, right[, size]) Draw samples from the triangular distribution over the interval [left, right]. uniform([low, high, size]) Draw samples from a uniform distribution. vonmises(mu, kappa[, size]) Draw samples from a von Mises distribution. wald(mean, scale[, size]) Draw samples from a Wald, or inverse Gaussian, distribution. weibull(a[, size]) Draw samples from a Weibull distribution. zipf(a[, size]) Draw samples from a Zipf distribution. 3.重排 name describe -- -- shuffle(x) Modify a sequence in-place by shuffling its contents. permutation(x) Randomly permute a sequence, or return a permuted range. 参考: https://docs.scipy.org/doc/numpy/reference/routines.random.html","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/3%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/1numpy/7%E9%9A%8F%E6%9C%BA%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"random"}],["meta",{"property":"og:description","content":"random 以下方法都要加np.random.前缀 注意生成的对象没有维度.既.shape属性,第二个数字是空.要用reshape来将它转换为多维度,这样才能像矩阵那样操作. 1.简单随机数据 name describe rand(d0, d1, ..., dn) 返回随机分布,d是维度的意思，既设置0维度数量，1维度数量 randn(d0, d1, ..., dn) 返回正态分布 randint(low[, high, size, dtype]) 返回一个范围在 low (包含) 到 high (不包含)的整数. random_integers(low[, high, size]) Random integers of type np.int between low and high, inclusive. random_sample([size]) Return random floats in the half-open interval [0.0, 1.0). random([size]) Return random floats in the half-open interval [0.0, 1.0). ranf([size]) Return random floats in the half-open interval [0.0, 1.0). sample([size]) Return random floats in the half-open interval [0.0, 1.0). choice(a[, size, replace, p]) Generates a random sample from a given 1-D array bytes(length) Return random bytes. 2.生成随机分布 name describe -- -- beta(a, b[, size]) Draw samples from a Beta distribution. binomial(n, p[, size]) Draw samples from a binomial distribution. chisquare(df[, size]) Draw samples from a chi-square distribution. dirichlet(alpha[, size]) Draw samples from the Dirichlet distribution. exponential([scale, size]) Draw samples from an exponential distribution. f(dfnum, dfden[, size]) Draw samples from an F distribution. gamma(shape[, scale, size]) Draw samples from a Gamma distribution. geometric(p[, size]) Draw samples from the geometric distribution. gumbel([loc, scale, size]) Draw samples from a Gumbel distribution. hypergeometric(ngood, nbad, nsample[, size]) Draw samples from a Hypergeometric distribution. laplace([loc, scale, size]) Draw samples from the Laplace or double exponential distribution with specified logistic([loc, scale, size]) Draw samples from a logistic distribution. lognormal([mean, sigma, size]) Draw samples from a log-normal distribution. logseries(p[, size]) Draw samples from a logarithmic series distribution. multinomial(n, pvals[, size]) Draw samples from a multinomial distribution. multivariate_normal(mean, cov[, size]) Draw random samples from a multivariate normal distribution. negative_binomial(n, p[, size]) Draw samples from a negative binomial distribution. noncentral_chisquare(df, nonc[, size]) Draw samples from a noncentral chi-square distribution. noncentral_f(dfnum, dfden, nonc[, size]) Draw samples from the noncentral F distribution. normal([loc, scale, size]) Draw random samples from a normal (Gaussian) distribution. pareto(a[, size]) Draw samples from a Pareto II or Lomax distribution with specified shape. poisson([lam, size]) Draw samples from a Poisson distribution. power(a[, size]) Draws samples in [0, 1] from a power distribution with positive exponent a - 1. rayleigh([scale, size]) Draw samples from a Rayleigh distribution. standard_cauchy([size]) Draw samples from a standard Cauchy distribution with mode = 0. standard_exponential([size]) Draw samples from the standard exponential distribution. standard_gamma(shape[, size]) Draw samples from a standard Gamma distribution. standard_normal([size]) Draw samples from a standard Normal distribution (mean=0, stdev=1). standard_t(df[, size]) Draw samples from a standard Student’s t distribution with df degrees of freedom. triangular(left, mode, right[, size]) Draw samples from the triangular distribution over the interval [left, right]. uniform([low, high, size]) Draw samples from a uniform distribution. vonmises(mu, kappa[, size]) Draw samples from a von Mises distribution. wald(mean, scale[, size]) Draw samples from a Wald, or inverse Gaussian, distribution. weibull(a[, size]) Draw samples from a Weibull distribution. zipf(a[, size]) Draw samples from a Zipf distribution. 3.重排 name describe -- -- shuffle(x) Modify a sequence in-place by shuffling its contents. permutation(x) Randomly permute a sequence, or return a permuted range. 参考: https://docs.scipy.org/doc/numpy/reference/routines.random.html"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-25T10:13:52.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-25T10:13:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"random\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-25T10:13:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740478432000,"updatedTime":1740478432000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":2.18,"words":654},"filePathRelative":"1机器学习/3分析工具/1numpy/7随机方法.md","localizedDate":"2025年2月25日","excerpt":"<h1> random</h1>\\n<p>以下方法都要加np.random.前缀\\n<strong>注意生成的对象没有维度.既.shape属性,第二个数字是空.要用reshape来将它转换为多维度,这样才能像矩阵那样操作.</strong></p>\\n<p>1.简单随机数据</p>\\n<table>\\n<thead>\\n<tr>\\n<th>name</th>\\n<th>describe</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>rand(d0, d1, ..., dn)</td>\\n<td>返回随机分布,d是维度的意思，既设置0维度数量，1维度数量</td>\\n</tr>\\n<tr>\\n<td>randn(d0, d1, ..., dn)</td>\\n<td>返回正态分布</td>\\n</tr>\\n<tr>\\n<td>randint(low[, high, size, dtype])</td>\\n<td>返回一个范围在 low (包含) 到 high (不包含)的整数.</td>\\n</tr>\\n<tr>\\n<td>random_integers(low[, high, size])</td>\\n<td>Random integers of type np.int between low and high, inclusive.</td>\\n</tr>\\n<tr>\\n<td>random_sample([size])</td>\\n<td>Return random floats in the half-open interval [0.0, 1.0).</td>\\n</tr>\\n<tr>\\n<td>random([size])</td>\\n<td>Return random floats in the half-open interval [0.0, 1.0).</td>\\n</tr>\\n<tr>\\n<td>ranf([size])</td>\\n<td>Return random floats in the half-open interval [0.0, 1.0).</td>\\n</tr>\\n<tr>\\n<td>sample([size])</td>\\n<td>Return random floats in the half-open interval [0.0, 1.0).</td>\\n</tr>\\n<tr>\\n<td>choice(a[, size, replace, p])</td>\\n<td>Generates a random sample from a given 1-D array</td>\\n</tr>\\n<tr>\\n<td>bytes(length)</td>\\n<td>Return random bytes.</td>\\n</tr>\\n<tr>\\n<td>2.生成随机分布</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>describe</td>\\n</tr>\\n<tr>\\n<td>--</td>\\n<td>--</td>\\n</tr>\\n<tr>\\n<td>beta(a, b[, size])</td>\\n<td>Draw samples from a Beta distribution.</td>\\n</tr>\\n<tr>\\n<td>binomial(n, p[, size])</td>\\n<td>Draw samples from a binomial distribution.</td>\\n</tr>\\n<tr>\\n<td>chisquare(df[, size])</td>\\n<td>Draw samples from a chi-square distribution.</td>\\n</tr>\\n<tr>\\n<td>dirichlet(alpha[, size])</td>\\n<td>Draw samples from the Dirichlet distribution.</td>\\n</tr>\\n<tr>\\n<td>exponential([scale, size])</td>\\n<td>Draw samples from an exponential distribution.</td>\\n</tr>\\n<tr>\\n<td>f(dfnum, dfden[, size])</td>\\n<td>Draw samples from an F distribution.</td>\\n</tr>\\n<tr>\\n<td>gamma(shape[, scale, size])</td>\\n<td>Draw samples from a Gamma distribution.</td>\\n</tr>\\n<tr>\\n<td>geometric(p[, size])</td>\\n<td>Draw samples from the geometric distribution.</td>\\n</tr>\\n<tr>\\n<td>gumbel([loc, scale, size])</td>\\n<td>Draw samples from a Gumbel distribution.</td>\\n</tr>\\n<tr>\\n<td>hypergeometric(ngood, nbad, nsample[, size])</td>\\n<td>Draw samples from a Hypergeometric distribution.</td>\\n</tr>\\n<tr>\\n<td>laplace([loc, scale, size])</td>\\n<td>Draw samples from the Laplace or double exponential distribution with specified logistic([loc, scale, size]) Draw samples from a logistic distribution.</td>\\n</tr>\\n<tr>\\n<td>lognormal([mean, sigma, size])</td>\\n<td>Draw samples from a log-normal distribution.</td>\\n</tr>\\n<tr>\\n<td>logseries(p[, size])</td>\\n<td>Draw samples from a logarithmic series distribution.</td>\\n</tr>\\n<tr>\\n<td>multinomial(n, pvals[, size])</td>\\n<td>Draw samples from a multinomial distribution.</td>\\n</tr>\\n<tr>\\n<td>multivariate_normal(mean, cov[, size])</td>\\n<td>Draw random samples from a multivariate normal distribution.</td>\\n</tr>\\n<tr>\\n<td>negative_binomial(n, p[, size])</td>\\n<td>Draw samples from a negative binomial distribution.</td>\\n</tr>\\n<tr>\\n<td>noncentral_chisquare(df, nonc[, size])</td>\\n<td>Draw samples from a noncentral chi-square distribution.</td>\\n</tr>\\n<tr>\\n<td>noncentral_f(dfnum, dfden, nonc[, size])</td>\\n<td>Draw samples from the noncentral F distribution.</td>\\n</tr>\\n<tr>\\n<td>normal([loc, scale, size])</td>\\n<td>Draw random samples from a normal (Gaussian) distribution.</td>\\n</tr>\\n<tr>\\n<td>pareto(a[, size])</td>\\n<td>Draw samples from a Pareto II or Lomax distribution with specified shape.</td>\\n</tr>\\n<tr>\\n<td>poisson([lam, size])</td>\\n<td>Draw samples from a Poisson distribution.</td>\\n</tr>\\n<tr>\\n<td>power(a[, size])</td>\\n<td>Draws samples in [0, 1] from a power distribution with positive exponent a - 1.</td>\\n</tr>\\n<tr>\\n<td>rayleigh([scale, size])</td>\\n<td>Draw samples from a Rayleigh distribution.</td>\\n</tr>\\n<tr>\\n<td>standard_cauchy([size])</td>\\n<td>Draw samples from a standard Cauchy distribution with mode = 0.</td>\\n</tr>\\n<tr>\\n<td>standard_exponential([size])</td>\\n<td>Draw samples from the standard exponential distribution.</td>\\n</tr>\\n<tr>\\n<td>standard_gamma(shape[, size])</td>\\n<td>Draw samples from a standard Gamma distribution.</td>\\n</tr>\\n<tr>\\n<td>standard_normal([size])</td>\\n<td>Draw samples from a standard Normal distribution (mean=0, stdev=1).</td>\\n</tr>\\n<tr>\\n<td>standard_t(df[, size])</td>\\n<td>Draw samples from a standard Student’s t distribution with df degrees of freedom.</td>\\n</tr>\\n<tr>\\n<td>triangular(left, mode, right[, size])</td>\\n<td>Draw samples from the triangular distribution over the interval [left, right].</td>\\n</tr>\\n<tr>\\n<td>uniform([low, high, size])</td>\\n<td>Draw samples from a uniform distribution.</td>\\n</tr>\\n<tr>\\n<td>vonmises(mu, kappa[, size])</td>\\n<td>Draw samples from a von Mises distribution.</td>\\n</tr>\\n<tr>\\n<td>wald(mean, scale[, size])</td>\\n<td>Draw samples from a Wald, or inverse Gaussian, distribution.</td>\\n</tr>\\n<tr>\\n<td>weibull(a[, size])</td>\\n<td>Draw samples from a Weibull distribution.</td>\\n</tr>\\n<tr>\\n<td>zipf(a[, size])</td>\\n<td>Draw samples from a Zipf distribution.</td>\\n</tr>\\n<tr>\\n<td>3.重排</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>name</td>\\n<td>describe</td>\\n</tr>\\n<tr>\\n<td>--</td>\\n<td>--</td>\\n</tr>\\n<tr>\\n<td>shuffle(x)</td>\\n<td>Modify a sequence in-place by shuffling its contents.</td>\\n</tr>\\n<tr>\\n<td>permutation(x)</td>\\n<td>Randomly permute a sequence, or return a permuted range.</td>\\n</tr>\\n<tr>\\n<td>参考:</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>https://docs.scipy.org/doc/numpy/reference/routines.random.html</td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
