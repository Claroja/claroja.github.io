const n=JSON.parse('{"key":"v-2139c211","path":"/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c/4%E5%87%BD%E6%95%B0/2%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E.html","title":"函数声明","lang":"zh-CN","frontmatter":{"description":"函数声明 所谓函数声明，就是在函数尚在未定义的情况下，事先将该函数的有关信息通知编译系统，相当于告诉编译器，函数在后面定义，以便使编译能正常进行。 使用extern关键字 以下两种情况,必须先声明函数: 函数与调用它的函数（即主调函数）不在同一文件中， 函数定义的位置在主调函数之后 #include &lt;stdio.h&gt; extern int add(int x, int y); // 函数的声明，分号不能省略 int main() { \\tint a = 5, b = 10; \\tint result = add(a, b); // 函数的调用 \\tprintf(\\"result = %d\\\\n\\", result); \\tgetchar(); \\treturn 0; } // 函数的定义在调用之后 int add(int x, int y) { \\treturn x+y; }","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c/4%E5%87%BD%E6%95%B0/2%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"函数声明"}],["meta",{"property":"og:description","content":"函数声明 所谓函数声明，就是在函数尚在未定义的情况下，事先将该函数的有关信息通知编译系统，相当于告诉编译器，函数在后面定义，以便使编译能正常进行。 使用extern关键字 以下两种情况,必须先声明函数: 函数与调用它的函数（即主调函数）不在同一文件中， 函数定义的位置在主调函数之后 #include &lt;stdio.h&gt; extern int add(int x, int y); // 函数的声明，分号不能省略 int main() { \\tint a = 5, b = 10; \\tint result = add(a, b); // 函数的调用 \\tprintf(\\"result = %d\\\\n\\", result); \\tgetchar(); \\treturn 0; } // 函数的定义在调用之后 int add(int x, int y) { \\treturn x+y; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"函数声明\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.64,"words":193},"filePathRelative":"2编程语言/2c/4函数/2函数声明.md","localizedDate":"2025年2月21日","excerpt":"<h1> 函数声明</h1>\\n<ol>\\n<li>所谓函数声明，就是在函数尚在未定义的情况下，事先将该函数的有关信息通知编译系统，相当于告诉编译器，函数在后面定义，以便使编译能正常进行。</li>\\n<li>使用extern关键字</li>\\n<li>以下两种情况,必须先声明函数:\\n<ol>\\n<li>函数与调用它的函数（即主调函数）不在同一文件中，</li>\\n<li>函数定义的位置在主调函数之后</li>\\n</ol>\\n</li>\\n</ol>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token keyword\\">extern</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 函数的声明，分号不能省略</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 函数的调用</span>\\n\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"result = %d\\\\n\\"</span><span class=\\"token punctuation\\">,</span> result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">getchar</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 函数的定义在调用之后</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> x<span class=\\"token operator\\">+</span>y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}');export{n as data};
