const n=JSON.parse('{"key":"v-08feeb32","path":"/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c/7IO/3_4%E5%B9%BF%E6%92%AD.html","title":"server","lang":"zh-CN","frontmatter":{"description":"广播地址: xxx.xxx.xxx.255 255.255.255.255 网关:(不同局域网信息要通过网关) xxx.xxx.xxx.1 server #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; #include &lt;stdlib.h&gt; #include &lt;sys/types.h&gt; #include &lt;sys/stat.h&gt; #include &lt;string.h&gt; #include &lt;arpa/inet.h&gt; int main(int argc, const char* argv[]) { // 创建套接字 int fd = socket(AF_INET, SOCK_DGRAM, 0); struct sockaddr_in serv;//server端配置 memset(&amp;serv, 0, sizeof(serv)); serv.sin_family = AF_INET; serv.sin_port = htons(9999); // server端口 serv.sin_addr.s_addr = htonl(INADDR_ANY); int ret = bind(fd, (struct sockaddr*)&amp;serv, sizeof(serv));//绑定端口 struct sockaddr_in client;//client端配置 memset(&amp;client, 0, sizeof(client)); client.sin_family = AF_INET; client.sin_port = htons(8888); // 客户端要绑定的端口 inet_pton(AF_INET, \\"192.168.1.255\\", &amp;client.sin_addr.s_addr); int flag = 1; setsockopt(fd, SOL_SOCKET, SO_BROADCAST, &amp;flag, sizeof(flag));//给服务器开放广播权限 while(1) { static int num = 0; char buf[1024] = {0}; int ret = sendto(fd, buf, strlen(buf)+1, 0, (struct sockaddr*)&amp;client, sizeof(client)); printf(\\"server == send buf: %s\\\\n\\", buf); sleep(1); } close(fd); return 0; }","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c/7IO/3_4%E5%B9%BF%E6%92%AD.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"server"}],["meta",{"property":"og:description","content":"广播地址: xxx.xxx.xxx.255 255.255.255.255 网关:(不同局域网信息要通过网关) xxx.xxx.xxx.1 server #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; #include &lt;stdlib.h&gt; #include &lt;sys/types.h&gt; #include &lt;sys/stat.h&gt; #include &lt;string.h&gt; #include &lt;arpa/inet.h&gt; int main(int argc, const char* argv[]) { // 创建套接字 int fd = socket(AF_INET, SOCK_DGRAM, 0); struct sockaddr_in serv;//server端配置 memset(&amp;serv, 0, sizeof(serv)); serv.sin_family = AF_INET; serv.sin_port = htons(9999); // server端口 serv.sin_addr.s_addr = htonl(INADDR_ANY); int ret = bind(fd, (struct sockaddr*)&amp;serv, sizeof(serv));//绑定端口 struct sockaddr_in client;//client端配置 memset(&amp;client, 0, sizeof(client)); client.sin_family = AF_INET; client.sin_port = htons(8888); // 客户端要绑定的端口 inet_pton(AF_INET, \\"192.168.1.255\\", &amp;client.sin_addr.s_addr); int flag = 1; setsockopt(fd, SOL_SOCKET, SO_BROADCAST, &amp;flag, sizeof(flag));//给服务器开放广播权限 while(1) { static int num = 0; char buf[1024] = {0}; int ret = sendto(fd, buf, strlen(buf)+1, 0, (struct sockaddr*)&amp;client, sizeof(client)); printf(\\"server == send buf: %s\\\\n\\", buf); sleep(1); } close(fd); return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T14:08:45.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T14:08:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"server\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T14:08:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740146925000,"updatedTime":1740146925000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.9,"words":271},"filePathRelative":"2编程语言/2c/7IO/3_4广播.md","localizedDate":"2025年2月21日","excerpt":"<p>广播地址:\\nxxx.xxx.xxx.255\\n255.255.255.255\\n网关:(不同局域网信息要通过网关)\\nxxx.xxx.xxx.1</p>\\n<h1> server</h1>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;unistd.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdlib.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;sys/types.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;sys/stat.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;string.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;arpa/inet.h&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> argc<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">char</span><span class=\\"token operator\\">*</span> argv<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 创建套接字</span>\\n    <span class=\\"token keyword\\">int</span> fd <span class=\\"token operator\\">=</span> <span class=\\"token function\\">socket</span><span class=\\"token punctuation\\">(</span>AF_INET<span class=\\"token punctuation\\">,</span> SOCK_DGRAM<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr_in</span> serv<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//server端配置</span>\\n    <span class=\\"token function\\">memset</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>serv<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>serv<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    serv<span class=\\"token punctuation\\">.</span>sin_family  <span class=\\"token operator\\">=</span> AF_INET<span class=\\"token punctuation\\">;</span>\\n    serv<span class=\\"token punctuation\\">.</span>sin_port <span class=\\"token operator\\">=</span> <span class=\\"token function\\">htons</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">9999</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">// server端口</span>\\n    serv<span class=\\"token punctuation\\">.</span>sin_addr<span class=\\"token punctuation\\">.</span>s_addr <span class=\\"token operator\\">=</span> <span class=\\"token function\\">htonl</span><span class=\\"token punctuation\\">(</span>INADDR_ANY<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> ret <span class=\\"token operator\\">=</span> <span class=\\"token function\\">bind</span><span class=\\"token punctuation\\">(</span>fd<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>serv<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>serv<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//绑定端口</span>\\n    <span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr_in</span> client<span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//client端配置</span>\\n    <span class=\\"token function\\">memset</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&amp;</span>client<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>client<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    client<span class=\\"token punctuation\\">.</span>sin_family <span class=\\"token operator\\">=</span> AF_INET<span class=\\"token punctuation\\">;</span>\\n    client<span class=\\"token punctuation\\">.</span>sin_port <span class=\\"token operator\\">=</span> <span class=\\"token function\\">htons</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">8888</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 客户端要绑定的端口</span>\\n    <span class=\\"token function\\">inet_pton</span><span class=\\"token punctuation\\">(</span>AF_INET<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"192.168.1.255\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>client<span class=\\"token punctuation\\">.</span>sin_addr<span class=\\"token punctuation\\">.</span>s_addr<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> flag <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">setsockopt</span><span class=\\"token punctuation\\">(</span>fd<span class=\\"token punctuation\\">,</span> SOL_SOCKET<span class=\\"token punctuation\\">,</span> SO_BROADCAST<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>flag<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>flag<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">//给服务器开放广播权限</span>\\n    <span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">int</span> num <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">char</span> buf<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1024</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> ret <span class=\\"token operator\\">=</span> <span class=\\"token function\\">sendto</span><span class=\\"token punctuation\\">(</span>fd<span class=\\"token punctuation\\">,</span> buf<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">strlen</span><span class=\\"token punctuation\\">(</span>buf<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">sockaddr</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&amp;</span>client<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">sizeof</span><span class=\\"token punctuation\\">(</span>client<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"server == send buf: %s\\\\n\\"</span><span class=\\"token punctuation\\">,</span> buf<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span>fd<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}');export{n as data};
