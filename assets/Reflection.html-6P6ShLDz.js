const e=JSON.parse('{"key":"v-d5b066e4","path":"/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4java/log/Reflection.html","title":"第六编继承-第三章遗嘱继承和遗赠","lang":"zh-CN","frontmatter":{"description":"第六编继承-第三章遗嘱继承和遗赠 Java Reflection 可以在runtime使用classes, interfaces, fields, methods, 而且是在不知道class, method名称的情况下. package com; import java.lang.reflect.Method; public class Demo { public static void main(String[] args) { Method[] methods = Demo.class.getMethods(); for(Method method : methods){ System.out.println(\\"method = \\" + method.getName()); } } }","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4java/log/Reflection.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"第六编继承-第三章遗嘱继承和遗赠"}],["meta",{"property":"og:description","content":"第六编继承-第三章遗嘱继承和遗赠 Java Reflection 可以在runtime使用classes, interfaces, fields, methods, 而且是在不知道class, method名称的情况下. package com; import java.lang.reflect.Method; public class Demo { public static void main(String[] args) { Method[] methods = Demo.class.getMethods(); for(Method method : methods){ System.out.println(\\"method = \\" + method.getName()); } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第六编继承-第三章遗嘱继承和遗赠\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"java class object","slug":"java-class-object","link":"#java-class-object","children":[]},{"level":2,"title":"Constructors","slug":"constructors","link":"#constructors","children":[]},{"level":2,"title":"Field","slug":"field","link":"#field","children":[{"level":3,"title":"获得Field object","slug":"获得field-object","link":"#获得field-object","children":[]},{"level":3,"title":"获得Field 的名称和类型","slug":"获得field-的名称和类型","link":"#获得field-的名称和类型","children":[]},{"level":3,"title":"get/set Field","slug":"get-set-field","link":"#get-set-field","children":[]}]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"获得Method[]","slug":"获得method","link":"#获得method","children":[]},{"level":3,"title":"获得Method Parameters和Return Types","slug":"获得method-parameters和return-types","link":"#获得method-parameters和return-types","children":[]},{"level":3,"title":"调用Methods","slug":"调用methods","link":"#调用methods","children":[]}]},{"level":2,"title":"Getters and Setters","slug":"getters-and-setters","link":"#getters-and-setters","children":[]},{"level":2,"title":"Private Fields and Methods","slug":"private-fields-and-methods","link":"#private-fields-and-methods","children":[{"level":3,"title":"Private Fields","slug":"private-fields","link":"#private-fields","children":[]},{"level":3,"title":"Private Methods","slug":"private-methods","link":"#private-methods","children":[]}]},{"level":2,"title":"Annotations","slug":"annotations","link":"#annotations","children":[{"level":3,"title":"获得Class Annotations","slug":"获得class-annotations","link":"#获得class-annotations","children":[]},{"level":3,"title":"获得 Method Annotations","slug":"获得-method-annotations","link":"#获得-method-annotations","children":[]},{"level":3,"title":"获得 Parameter Annotations","slug":"获得-parameter-annotations","link":"#获得-parameter-annotations","children":[]},{"level":3,"title":"获得 Field Annotations","slug":"获得-field-annotations","link":"#获得-field-annotations","children":[]}]},{"level":2,"title":"Generics","slug":"generics","link":"#generics","children":[{"level":3,"title":"Generic Method Return Types","slug":"generic-method-return-types","link":"#generic-method-return-types","children":[]},{"level":3,"title":"Generic Method Parameter Types","slug":"generic-method-parameter-types","link":"#generic-method-parameter-types","children":[]},{"level":3,"title":"Generic Field Types","slug":"generic-field-types","link":"#generic-field-types","children":[]}]},{"level":2,"title":"Arrays","slug":"arrays","link":"#arrays","children":[{"level":3,"title":"创建Arrays","slug":"创建arrays","link":"#创建arrays","children":[]},{"level":3,"title":"操作Arrays","slug":"操作arrays","link":"#操作arrays","children":[]},{"level":3,"title":"获得Array Class","slug":"获得array-class","link":"#获得array-class","children":[]},{"level":3,"title":"获得Array Element Class","slug":"获得array-element-class","link":"#获得array-element-class","children":[]}]},{"level":2,"title":"Dynamic Proxies","slug":"dynamic-proxies","link":"#dynamic-proxies","children":[]},{"level":2,"title":"Dynamic Class Loading and Reloading","slug":"dynamic-class-loading-and-reloading","link":"#dynamic-class-loading-and-reloading","children":[]}],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":5.85,"words":1755},"filePathRelative":"2编程语言/4java/log/Reflection.md","localizedDate":"2025年2月21日","excerpt":"<h1> 第六编继承-第三章遗嘱继承和遗赠</h1>\\n<p>Java Reflection 可以在runtime使用classes, interfaces, fields, methods, 而且是在不知道class, method名称的情况下.</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">package</span> <span class=\\"token namespace\\">com</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>lang<span class=\\"token punctuation\\">.</span>reflect<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Method</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Demo</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Method</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> methods <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Demo</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMethods</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">for</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Method</span> method <span class=\\"token operator\\">:</span> methods<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"method = \\"</span> <span class=\\"token operator\\">+</span> method<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
