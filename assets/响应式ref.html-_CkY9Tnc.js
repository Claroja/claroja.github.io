import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as t,c,a as n,b as o,d as l,e as p}from"./app-SnI5rGHA.js";const i={},u=p(`<h1 id="响应式ref" tabindex="-1"><a class="header-anchor" href="#响应式ref" aria-hidden="true">#</a> 响应式ref</h1><p>应用:</p><ul><li>不使用<code>ref()</code>来处理响应式对象, 而是使用底层的<code>reactive()</code></li><li>建议使用<code>ref()</code>仅用来处理基础数据, 或者将基础数据放在对象里, 用<code>reactive()</code>来处理 作用: 定义一个响应式的数据 语法: <code>const xxx = ref(initValue)</code></li><li>创建一个包含响应式数据的引用对象(reference对象，简称ref对象)。</li><li>JS中操作数据: <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;{{xxx}}&lt;/div&gt;</code> 备注：</li><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据: 响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据: 内部 “ 求助 ”了Vue3.0中的一个新函数<code>reactive</code>函数, 底层是ES6的proxy 拓展:</li><li>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul><p>实践:</p><ul><li><p>案例1:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
count<span class="token punctuation">.</span>value<span class="token operator">++</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increment<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    {{ count }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考:</h1>`,6),r={href:"https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=e("ExternalLinkIcon");return t(),c("div",null,[u,n("p",null,[n("a",r,[o("响应式基础"),l(a)])])])}const g=s(i,[["render",d],["__file","响应式ref.html.vue"]]);export{g as default};
