import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-qxiCM96p.js";const t={},o=e(`<h1 id="eafp-lbyl" tabindex="-1"><a class="header-anchor" href="#eafp-lbyl" aria-hidden="true">#</a> EAFP-LBYL</h1><p>为了增强程序的健壮性，通常会增加一些检查数据项的代码，用术语来说就是防御性编程，在检查的时候通常有一下两种风格:</p><ol><li><p>“Easier to Ask for Forgiveness than Permission.”（请求宽恕比许可更容易）— EAFP</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> test_dict<span class="token punctuation">[</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>
    <span class="token comment"># key 不存在</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>“Look Before You Leap”（三思而后行 ）— LBYL</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">if</span> <span class="token string">&quot;key&quot;</span> <span class="token keyword">in</span> test_dict<span class="token punctuation">:</span>
    x <span class="token operator">=</span> test_dict<span class="token punctuation">[</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment"># key 不存在</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>二者比较:</p><ol><li><p>性能比较 EAFP 的异常处理往往也会影响一点性能，因为在发生异常的时候，程序会进行保留现场、回溯traceback等操作，但在异常发生频率比较低的情况下，性能相差的并不是很大。 而 LBYL 则会消耗更高的固定成本，因为无论成败与否，总是执行额外的检查。</p></li><li><p>代码易读性 EAFP将业务逻辑代码，跟防御性代码隔离开，让开发者可以更专注于开发业务逻辑，不管数据变量是否合理，按照正常的逻辑思维执行下去 LBYL则容易打乱开发者的思维，在做一件事之前，总是要先要判断能不能这样做, 需要增加很多判断内容，代码连贯性差.</p></li></ol>`,5),i=[o];function p(l,c){return s(),a("div",null,i)}const u=n(t,[["render",p],["__file","EAFP-LBYL.html.vue"]]);export{u as default};
