const n=JSON.parse(`{"key":"v-6dc168cc","path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%88%90%E5%91%98%E6%93%8D%E4%BD%9C/setattr.html","title":"setattr","lang":"zh-CN","frontmatter":{"description":"setattr 当给对象成员进行赋值时(包括添加和修改), 比如__init__()中赋值, object.attr赋值, 或直接调用setattr()方法 作用: 可以限制和管理成员的添加和修改操作 参数: 1. self 2. 设置的成员名 3.设置的成员值 返回值: 无 注意: 使用用父类object来调用__setattr__(),来避免死循环 class Person(object): def __init__(self, name): self.name = name def __setattr__(self, key, value): print(\\"setting:{}, with:{}\\".format(key, value)) return object.__setattr__(self, key, value) # 因为子类重写父类方法，所以要返回父类该方法完成在__dict__的注册，父类的__setattr__本质上是完成了·self.__dict__[key] = value· person = Person(\\"wang\\") # setting:name, with:wang, 直接使用\`__init__()\`来赋值也会触发 person.__dict__ # {'name': 'wang'} person.age=13 # setting:age, with:13, 直接赋值也会触发 person.__dict__ # {'name': 'wang', 'age': 13} setattr(person,\\"gender\\",\\"man\\") # setting:gender, with:man, 使用setarrt方法也会触发 person.__dict__ # {'name': 'wang', 'age': 13, 'gender': 'man'}","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%88%90%E5%91%98%E6%93%8D%E4%BD%9C/setattr.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"setattr"}],["meta",{"property":"og:description","content":"setattr 当给对象成员进行赋值时(包括添加和修改), 比如__init__()中赋值, object.attr赋值, 或直接调用setattr()方法 作用: 可以限制和管理成员的添加和修改操作 参数: 1. self 2. 设置的成员名 3.设置的成员值 返回值: 无 注意: 使用用父类object来调用__setattr__(),来避免死循环 class Person(object): def __init__(self, name): self.name = name def __setattr__(self, key, value): print(\\"setting:{}, with:{}\\".format(key, value)) return object.__setattr__(self, key, value) # 因为子类重写父类方法，所以要返回父类该方法完成在__dict__的注册，父类的__setattr__本质上是完成了·self.__dict__[key] = value· person = Person(\\"wang\\") # setting:name, with:wang, 直接使用\`__init__()\`来赋值也会触发 person.__dict__ # {'name': 'wang'} person.age=13 # setting:age, with:13, 直接赋值也会触发 person.__dict__ # {'name': 'wang', 'age': 13} setattr(person,\\"gender\\",\\"man\\") # setting:gender, with:man, 使用setarrt方法也会触发 person.__dict__ # {'name': 'wang', 'age': 13, 'gender': 'man'}"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-01T12:59:38.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2023-12-01T12:59:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"setattr\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-01T12:59:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1701435578000,"updatedTime":1701435578000,"contributors":[{"name":"claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.88,"words":263},"filePathRelative":"编程语言/python/7面向对象/成员操作/setattr.md","localizedDate":"2023年12月1日","excerpt":"<h1> setattr</h1>\\n<p>当给对象成员进行赋值时(包括添加和修改), 比如<code>__init__()</code>中赋值, <code>object.attr</code>赋值, 或直接调用<code>setattr()</code>方法\\n作用: 可以限制和管理成员的添加和修改操作\\n参数: 1. self 2. 设置的成员名 3.设置的成员值\\n返回值: 无\\n注意: 使用用父类<code>object</code>来调用<code>__setattr__()</code>,来避免死循环</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">object</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__init__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        self<span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name\\n\\n    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">__setattr__</span><span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"setting:{},  with:{}\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">format</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token builtin\\">object</span><span class=\\"token punctuation\\">.</span>__setattr__<span class=\\"token punctuation\\">(</span>self<span class=\\"token punctuation\\">,</span> key<span class=\\"token punctuation\\">,</span> value<span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># 因为子类重写父类方法，所以要返回父类该方法完成在__dict__的注册，父类的__setattr__本质上是完成了·self.__dict__[key] = value·</span>\\n\\nperson <span class=\\"token operator\\">=</span> Person<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"wang\\"</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># setting:name,  with:wang, 直接使用\`__init__()\`来赋值也会触发</span>\\nperson<span class=\\"token punctuation\\">.</span>__dict__  <span class=\\"token comment\\"># {'name': 'wang'}</span>\\n\\nperson<span class=\\"token punctuation\\">.</span>age<span class=\\"token operator\\">=</span><span class=\\"token number\\">13</span>  <span class=\\"token comment\\"># setting:age,  with:13, 直接赋值也会触发</span>\\nperson<span class=\\"token punctuation\\">.</span>__dict__  <span class=\\"token comment\\"># {'name': 'wang', 'age': 13}</span>\\n\\n<span class=\\"token builtin\\">setattr</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"gender\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"man\\"</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># setting:gender,  with:man, 使用setarrt方法也会触发</span>\\nperson<span class=\\"token punctuation\\">.</span>__dict__  <span class=\\"token comment\\"># {'name': 'wang', 'age': 13, 'gender': 'man'}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{n as data};
