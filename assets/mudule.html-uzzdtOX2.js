const e=JSON.parse('{"key":"v-9c042dc0","path":"/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/5_1javascript/1%E6%A8%A1%E5%9D%97(module)/mudule.html","title":"mudule","lang":"zh-CN","frontmatter":{"description":"mudule javascript模块 早期,JS没有模块化的概念(Python中有module,Java中有Package).是直接引入整个JS代码.&lt;script type=\\"text/javascript\\" src=\\"index.js\\"&gt;&lt;/script&gt;. 缺点: 污染全局变量, 相当于将所有JS文本拼贴到一起 加载有顺序: 使用getElement等方法会报错, 因为html文件还没加载 如果JS文件有依赖关系, 则需要把被依赖的JS文件放前面, 先加载","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/5_1javascript/1%E6%A8%A1%E5%9D%97(module)/mudule.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"mudule"}],["meta",{"property":"og:description","content":"mudule javascript模块 早期,JS没有模块化的概念(Python中有module,Java中有Package).是直接引入整个JS代码.&lt;script type=\\"text/javascript\\" src=\\"index.js\\"&gt;&lt;/script&gt;. 缺点: 污染全局变量, 相当于将所有JS文本拼贴到一起 加载有顺序: 使用getElement等方法会报错, 因为html文件还没加载 如果JS文件有依赖关系, 则需要把被依赖的JS文件放前面, 先加载"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"mudule\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"javascript模块","slug":"javascript模块","link":"#javascript模块","children":[]},{"level":2,"title":"ES6规范","slug":"es6规范","link":"#es6规范","children":[{"level":3,"title":"按需导入方法和对象","slug":"按需导入方法和对象","link":"#按需导入方法和对象","children":[]},{"level":3,"title":"导出整个模块","slug":"导出整个模块","link":"#导出整个模块","children":[]}]},{"level":2,"title":"CommonJS规范","slug":"commonjs规范","link":"#commonjs规范","children":[]},{"level":2,"title":"将ES6语法转换为CommonJS","slug":"将es6语法转换为commonjs","link":"#将es6语法转换为commonjs","children":[{"level":3,"title":"查看Node.js对ES6的支持情况","slug":"查看node-js对es6的支持情况","link":"#查看node-js对es6的支持情况","children":[]},{"level":3,"title":"使用babel, 将ES6语法转换为CommonJS","slug":"使用babel-将es6语法转换为commonjs","link":"#使用babel-将es6语法转换为commonjs","children":[]},{"level":3,"title":"webpack中的ES6和CommonJS","slug":"webpack中的es6和commonjs","link":"#webpack中的es6和commonjs","children":[]}]}],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":2.63,"words":790},"filePathRelative":"2编程语言/5_1javascript/1模块(module)/mudule.md","localizedDate":"2025年2月21日","excerpt":"<h1> mudule</h1>\\n<h2> javascript模块</h2>\\n<p>早期,JS没有模块化的概念(Python中有module,Java中有Package).是直接引入整个JS代码.<code>&lt;script type=\\"text/javascript\\" src=\\"index.js\\"&gt;&lt;/script&gt;</code>. 缺点:</p>\\n<ul>\\n<li>污染全局变量, 相当于将所有JS文本拼贴到一起</li>\\n<li>加载有顺序:\\n<ul>\\n<li>使用getElement等方法会报错, 因为html文件还没加载</li>\\n<li>如果JS文件有依赖关系, 则需要把被依赖的JS文件放前面, 先加载</li>\\n</ul>\\n</li>\\n</ul>","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
