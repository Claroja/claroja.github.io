import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as d,c as r,a as e}from"./app-nD1Z-e8V.js";const a={},i=e('<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h1><ol><li>线程除了内存中的栈区不共享,其他的都共享(因为线程本质就是执行一个函数)</li><li>如果只有一个cpu多线程是无用的,因为同一时间一个进程只能获得一个cpu</li><li>light weight process 轻量级的进程，本质仍是进程 线程：最小的执行单位,有PCB,但没有地址空间(共享进程的) 进程：最小分配资源单位，可看成是只有一个线程的进程。有PCB,有独立的地址空间 <code>ps –Lf pid</code> 查看多线程进程</li></ol><h1 id="线程与进程" tabindex="-1"><a class="header-anchor" href="#线程与进程" aria-hidden="true">#</a> 线程与进程</h1><table><thead><tr><th>进程</th><th>线程</th></tr></thead><tbody><tr><td>fork</td><td>pthread_create</td></tr><tr><td>exit</td><td>pthread_exit</td></tr><tr><td>wait</td><td>pthread_join</td></tr><tr><td>kill</td><td>pthread_cancel</td></tr><tr><td>getpid</td><td>pthread_self</td></tr></tbody></table><p>线程属性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>int</td><td>etachstate; //线程的分离状态</td></tr><tr><td>int</td><td>schedpolicy; //线程调度策略</td></tr><tr><td>struct sched_param</td><td>schedparam; //线程的调度参数</td></tr><tr><td>int</td><td>inheritsched; //线程的继承性</td></tr><tr><td>int</td><td>scope; //线程的作用域</td></tr><tr><td>size_t</td><td>guardsize; //线程栈末尾的警戒缓冲区大小</td></tr><tr><td>int</td><td>stackaddr_set; //线程的栈设置</td></tr><tr><td>void*</td><td>stackaddr; //线程栈的位置</td></tr><tr><td>size_t</td><td>stacksize; //线程栈的大小</td></tr></tbody></table>',6),h=[i];function c(s,o){return d(),r("div",null,h)}const n=t(a,[["render",c],["__file","1基础.html.vue"]]);export{n as default};
