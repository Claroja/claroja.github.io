import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r,o as d,c as i,b as t,d as n,e,a as c}from"./app-nD1Z-e8V.js";const o={},p=t("h1",{id:"基础",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#基础","aria-hidden":"true"},"#"),n(" 基础")],-1),l={href:"https://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdio.h.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://pubs.opengroup.org/onlinepubs/9699919799/",target:"_blank",rel:"noopener noreferrer"},h={href:"http://www.gnu.org/software/libc/manual/",target:"_blank",rel:"noopener noreferrer"},f=c(`<h1 id="macros-库变量" tabindex="-1"><a class="header-anchor" href="#macros-库变量" aria-hidden="true">#</a> macros(库变量)</h1><table><thead><tr><th>宏</th><th>描述</th></tr></thead><tbody><tr><td>BUFSIZ</td><td>setbuf使用的缓冲区大小</td></tr><tr><td>_IOFBF、_IOLBF 和 _IONBF</td><td>fully buffered,line buffered,unbuffered</td></tr><tr><td>SEEK_CUR,SEEK_END,SEEK_SET</td><td>current position,end-of-file,start-of-file</td></tr><tr><td>EOF</td><td>文件结束,负整数,一般为-1</td></tr><tr><td>NULL</td><td>Null pointer</td></tr><tr><td>stderr、stdin 和 stdout</td><td>FILE 类型的指针，分别对应于标准错误、标准输入和标准输出流</td></tr><tr><td>FOPEN_MAX</td><td>系统可以同时打开的文件数量</td></tr><tr><td>FILENAME_MAX</td><td>字符数组可以存储的文件名的最大长度</td></tr><tr><td>L_ctermid</td><td></td></tr><tr><td>L_tmpnam</td><td>由 tmpnam 函数创建的临时文件名的最大长度</td></tr><tr><td>TMP_MAX</td><td>tmpnam 函数可生成的独特文件名的最大数量</td></tr></tbody></table><h1 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h1><ol><li>都是正整数 变量|描述 --|-- FILE|和打开文件对应的结构体 fpos_t | size_t |sizeof函数返回</li></ol><h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h1><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>void clearerr(FILE *);</td><td></td></tr><tr><td>int fclose(FILE *);</td><td></td></tr><tr><td>FILE *fdopen(int, const char *);</td><td></td></tr><tr><td>int feof(FILE *);</td><td></td></tr><tr><td>int ferror(FILE *);</td><td></td></tr><tr><td>int fflush(FILE *);</td><td></td></tr><tr><td>int fgetc(FILE *);</td><td></td></tr><tr><td>int fgetpos(FILE *restrict, fpos_t *restrict);</td><td></td></tr><tr><td>char *fgets(char *restrict, int, FILE *restrict);</td><td></td></tr><tr><td>int fileno(FILE *);</td><td></td></tr><tr><td>FILE *fopen(const char *restrict, const char *restrict);</td><td></td></tr><tr><td>int fprintf(FILE *restrict, const char *restrict, ...);</td><td></td></tr><tr><td>int fputc(int, FILE *);</td><td></td></tr><tr><td>int fputs(const char *restrict, FILE *restrict);</td><td></td></tr><tr><td>size_t fread(void *restrict, size_t, size_t, FILE *restrict);</td><td></td></tr><tr><td>FILE *freopen(const char *restrict, const char *restrict,FILE *restrict);</td><td></td></tr><tr><td>int fscanf(FILE *restrict, const char *restrict, ...);</td><td></td></tr><tr><td>int fseek(FILE *, long, int);</td><td></td></tr><tr><td>int fsetpos(FILE *, const fpos_t *);</td><td></td></tr><tr><td>long ftell(FILE *);</td><td></td></tr><tr><td>size_t fwrite(const void *restrict, size_t, size_t, FILE *restrict);</td><td></td></tr><tr><td>int getc(FILE *);</td><td></td></tr><tr><td>int getchar(void);</td><td></td></tr><tr><td>FILE *popen(const char *, const char *);</td><td></td></tr><tr><td>int printf(const char *restrict, ...);</td><td></td></tr><tr><td>int putc(int, FILE *);</td><td></td></tr><tr><td>int putchar(int);</td><td></td></tr><tr><td>int puts(const char *);</td><td></td></tr><tr><td>int remove(const char *);</td><td></td></tr><tr><td>int rename(const char *, const char *);</td><td></td></tr><tr><td>void rewind(FILE *);</td><td></td></tr><tr><td>int scanf(const char *restrict, ...);</td><td></td></tr><tr><td>void setbuf(FILE *restrict, char *restrict);</td><td></td></tr><tr><td>int setvbuf(FILE *restrict, char *restrict, int, size_t);</td><td></td></tr></tbody></table><p>参考: https://pubs.opengroup.org/onlinepubs/009695399/basedefs/stdio.h.html http://www.cplusplus.com/reference/cstdio/</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;./test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> c<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本上每种语言都是这样,文本文件可以显示给我们看,而二进制文件是每种语言所特有的,比如python的pickle,java的objectwrite</p><p>1)文本文件 基于字符编码，常见编码有ASCII、UNICODE等 一般可以使用文本编辑器直接打开 数5678的以ASCII存储形式(ASCII码)为： 00110101 00110110 00110111 00111000</p><p>2)二进制文件 基于值编码,自己根据具体应用,指定某个值是什么意思 把内存中的数据按其在内存中的存储形式原样输出到磁盘上 数5678的存储形式(二进制码)为：00010110 00101110</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>typedef struct
{
	short           level;	//缓冲区&quot;满&quot;或者&quot;空&quot;的程度 
	unsigned        flags;	//文件状态标志 
	char            fd;		//文件描述符
	unsigned char   hold;	//如无缓冲区不读取字符
	short           bsize;	//缓冲区的大小
	unsigned char   *buffer;//数据缓冲区的位置 
	unsigned        ar;	 //指针，当前的指向 
	unsigned        istemp;	//临时文件，指示器
	short           token;	//用于有效性的检查 
}FILE;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明FILE结构体类型的信息包含在头文件“stdio.h”中，一般设置一个指向FILE类型变量的指针变量，然后通过它来引用这些FILE类型变量。通过文件指针就可对它所指的文件进行各种操作。</p><p>C语言中有三个特殊的文件指针由系统默认打开，用户无需定义即可直接使用: stdin： 标准输入，默认为当前终端（键盘），我们使用的scanf、getchar函数默认从此终端获得数据。 stdout：标准输出，默认为当前终端（屏幕），我们使用的printf、puts函数默认输出信息到此终端。 stderr：标准出错，默认为当前终端（屏幕），我们使用的perror函数默认输出信息到此终端。</p><p>C语言中，EOF表示文件结束符(end of file)。在while循环中以EOF作为文件结束标志，这种以EOF作为文件结束标志的文件，必须是文本文件。在文本文件中，数据都是以字符的ASCII代码值的形式存放。我们知道，ASCII代码值的范围是0~127，不可能出现-1，因此可以用EOF作为文件结束标志。</p><p>当把数据以二进制形式存放到文件中时，就会有-1值的出现，因此不能采用EOF作为二进制文件的结束标志。为解决这一个问题，ANSI C提供一个feof函数，用来判断文件是否结束。feof函数既可用以判断二进制文件又可用以判断文本文件。</p>`,16);function v(k,m){const s=r("ExternalLinkIcon");return d(),i("div",null,[p,t("ol",null,[t("li",null,[t("a",l,[n("stdio.h"),e(s)])]),t("li",null,[t("a",u,[n("POSIX"),e(s)]),n(" 国际组织来规定接口标准(不同的软件系统linux或win来加入这个标准)")]),t("li",null,[t("a",h,[n("gun"),e(s)]),n("有具体的实现(gun就是unix系统C语言实现者)")])]),f])}const I=a(o,[["render",v],["__file","2_1FileStreaming.html.vue"]]);export{I as default};
