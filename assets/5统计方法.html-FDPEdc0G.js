import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as a,o,c as r,a as t,b as s,d as l,e}from"./app-A10JnHE0.js";const i={},u=e('<h1 id="statistics" tabindex="-1"><a class="header-anchor" href="#statistics" aria-hidden="true">#</a> statistics</h1><h2 id="排序统计" tabindex="-1"><a class="header-anchor" href="#排序统计" aria-hidden="true">#</a> 排序统计</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>amin(a[, axis, out, keepdims])</td><td>返回最小值</td></tr><tr><td>amax(a[, axis, out, keepdims])</td><td>返回最大值</td></tr><tr><td>nanmin(a[, axis, out, keepdims])</td><td>返回最小值，忽略空值</td></tr><tr><td>nanmax(a[, axis, out, keepdims])</td><td>返回最大值忽略空值</td></tr><tr><td>ptp(a[, axis, out])</td><td>max-min 数组的范围</td></tr><tr><td>percentile(a, q[, axis, out, ...])</td><td>百分比计算</td></tr><tr><td>nanpercentile(a, q[, axis, out, ...])</td><td>百分比计算，并忽略空值</td></tr></tbody></table><h2 id="平均值和方差" tabindex="-1"><a class="header-anchor" href="#平均值和方差" aria-hidden="true">#</a> 平均值和方差</h2>',4),h=t("thead",null,[t("tr",null,[t("th",null,"方法"),t("th",null,"描述")])],-1),c=t("tr",null,[t("td",null,"median(a[, axis, out, overwrite_input, keepdims])"),t("td",null,"中位数")],-1),m=t("tr",null,[t("td",null,"average(a[, axis, weights, returned])"),t("td",null,"权重平均数")],-1),_=t("tr",null,[t("td",null,"mean(a[, axis, dtype, out, keepdims])"),t("td",null,"算数平均数")],-1),p=t("tr",null,[t("td",null,"std(a[, axis, dtype, out, ddof, keepdims])"),t("td",null,"标准差")],-1),x=t("tr",null,[t("td",null,"var(a[, axis, dtype, out, ddof, keepdims])"),t("td",null,"方差")],-1),f=t("tr",null,[t("td",null,"nanmedian(a[, axis, out, overwrite_input, ...])"),t("td",null,"中位数，并忽略空值")],-1),b=t("tr",null,[t("td",null,"nanmean(a[, axis, dtype, out, keepdims])"),t("td",null,"算数平均数，忽略空值")],-1),g=t("tr",null,[t("td",null,"nanstd(a[, axis, dtype, out, ddof, keepdims])"),t("td",null,"标准差，忽略空值")],-1),v=t("tr",null,[t("td",null,"nanvar(a[, axis, dtype, out, ddof, keepdims])"),t("td",null,"方差，忽略空值")],-1),y=t("tr",null,[t("td",null,"#相关性"),t("td")],-1),k=t("tr",null,[t("td",null,"方法"),t("td",null,"描述")],-1),w=t("tr",null,[t("td",null,"--"),t("td",null,"--")],-1),C=t("tr",null,[t("td",null,"corrcoef(x[, y, rowvar, bias, ddof])"),t("td",null,"返回Pearson product-moment correlation 系数")],-1),E=t("tr",null,[t("td",null,"correlate(a, v[, mode])"),t("td",null,"Cross-correlation of two 1-dimensional sequences.")],-1),N={href:"https://blog.csdn.net/claroja/article/details/80169946",target:"_blank",rel:"noopener noreferrer"},V=t("td",null,"Estimate a covariance matrix, given data and weights.",-1),q=e('<h2 id="直方图" tabindex="-1"><a class="header-anchor" href="#直方图" aria-hidden="true">#</a> 直方图</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>histogram(a[, bins, range, normed, weights, ...])</td><td>Compute the histogram of a set of data.</td></tr><tr><td>histogram2d(x, y[, bins, range, normed, weights])</td><td>Compute the bi-dimensional histogram of two data samples.</td></tr><tr><td>histogramdd(sample[, bins, range, normed, ...])</td><td>Compute the multidimensional histogram of some data.</td></tr><tr><td>bincount(x[, weights, minlength])</td><td>Count number of occurrences of each value in array of non-negative ints.</td></tr><tr><td>digitize(x, bins[, right])</td><td>Return the indices of the bins to which each value in input array belongs.</td></tr></tbody></table><p>参考: https://numpy.org/doc/stable/reference/routines.statistics.html</p>',3);function B(I,L){const d=a("ExternalLinkIcon");return o(),r("div",null,[u,t("table",null,[h,t("tbody",null,[c,m,_,p,x,f,b,g,v,y,k,w,C,E,t("tr",null,[t("td",null,[t("a",N,[s("cov(m[, y, rowvar, bias, ddof, fweights, ...])"),l(d)])]),V])])]),q])}const P=n(i,[["render",B],["__file","5统计方法.html.vue"]]);export{P as default};
