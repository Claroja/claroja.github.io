import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as d,c as a,e,a as t,b as n}from"./app-0JgdiRQ-.js";const i={},s=e('<h1 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> math</h1><h2 id="trigonometric-functions-三角函数" tabindex="-1"><a class="header-anchor" href="#trigonometric-functions-三角函数" aria-hidden="true">#</a> Trigonometric functions（三角函数）</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>sin(x, /[, out, where, casting, order, ...])</td><td>正弦, element-wise.</td></tr><tr><td>cos(x, /[, out, where, casting, order, ...])</td><td>余弦 element-wise.</td></tr><tr><td>tan(x, /[, out, where, casting, order, ...])</td><td>正切 element-wise.</td></tr><tr><td>arcsin(x, /[, out, where, casting, order, ...])</td><td>反正弦, element-wise.</td></tr><tr><td>arccos(x, /[, out, where, casting, order, ...])</td><td>反余弦, element-wise.</td></tr><tr><td>arctan(x, /[, out, where, casting, order, ...])</td><td>反正切, element-wise.</td></tr><tr><td>hypot(x1, x2, /[, out, where, casting, ...])</td><td>Given the “legs” of a right triangle, return its hypotenuse.</td></tr><tr><td>arctan2(x1, x2, /[, out, where, casting, ...])</td><td>Element-wise arc tangent of x1/x2 choosing the quadrant correctly.</td></tr><tr><td>degrees(x, /[, out, where, casting, order, ...])</td><td>弧度转角度</td></tr><tr><td>radians(x, /[, out, where, casting, order, ...])</td><td>角度转弧度</td></tr><tr><td>unwrap(p[, discont, axis])</td><td>Unwrap by changing deltas between values to 2*pi complement.</td></tr><tr><td>deg2rad(x, /[, out, where, casting, order, ...])</td><td>Convert angles from degrees to radians.</td></tr><tr><td>rad2deg(x, /[, out, where, casting, order, ...])</td><td>Convert angles from radians to degrees.</td></tr></tbody></table><h2 id="hyperbolic-functions-双曲线函数" tabindex="-1"><a class="header-anchor" href="#hyperbolic-functions-双曲线函数" aria-hidden="true">#</a> Hyperbolic functions（双曲线函数）</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>sinh(x, /[, out, where, casting, order, ...])</td><td>Hyperbolic sine, element-wise.</td></tr><tr><td>cosh(x, /[, out, where, casting, order, ...])</td><td>Hyperbolic cosine, element-wise.</td></tr><tr><td>tanh(x, /[, out, where, casting, order, ...])</td><td>Compute hyperbolic tangent element-wise.</td></tr><tr><td>arcsinh(x, /[, out, where, casting, order, ...])</td><td>Inverse hyperbolic sine element-wise.</td></tr><tr><td>arccosh(x, /[, out, where, casting, order, ...])</td><td>Inverse hyperbolic cosine, element-wise.</td></tr><tr><td>arctanh(x, /[, out, where, casting, order, ...])</td><td>Inverse hyperbolic tangent element-wise.</td></tr></tbody></table><h2 id="rounding-约数" tabindex="-1"><a class="header-anchor" href="#rounding-约数" aria-hidden="true">#</a> Rounding（约数）</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>around(a[, decimals, out])</td><td>约数</td></tr><tr><td>round_(a[, decimals, out])</td><td>Round an array to the given number of decimals.</td></tr><tr><td>rint(x, /[, out, where, casting, order, ...])</td><td>取整</td></tr><tr><td>fix(x[, out])</td><td>向0取整</td></tr><tr><td>floor(x, /[, out, where, casting, order, ...])</td><td>向下取整，element-wise.</td></tr><tr><td>ceil(x, /[, out, where, casting, order, ...])</td><td>向上取整, element-wise.</td></tr><tr><td>trunc(x, /[, out, where, casting, order, ...])</td><td>截取整数部分，不四舍五入, element-wise.</td></tr></tbody></table><h2 id="sums-products-differences-加法-乘法-区别" tabindex="-1"><a class="header-anchor" href="#sums-products-differences-加法-乘法-区别" aria-hidden="true">#</a> Sums, products, differences（加法，乘法，区别）</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>prod(a[, axis, dtype, out, keepdims])</td><td>给定方向相乘</td></tr><tr><td>sum(a[, axis, dtype, out, keepdims])</td><td>给定方向相加</td></tr><tr><td>nanprod(a[, axis, dtype, out, keepdims])</td><td>乎略缺失值，给定方向相乘</td></tr><tr><td>nansum(a[, axis, dtype, out, keepdims])</td><td>乎略缺失值，给定方向相加</td></tr><tr><td>cumprod(a[, axis, dtype, out])</td><td>给定方向，累乘</td></tr><tr><td>cumsum(a[, axis, dtype, out])</td><td>给定方向，累加</td></tr><tr><td>nancumprod(a[, axis, dtype, out])</td><td>乎略缺失值，给定方向，累乘</td></tr><tr><td>nancumsum(a[, axis, dtype, out])</td><td>乎略缺失值，给定方向，累加</td></tr><tr><td>diff(a[, n, axis])</td><td>Calculate the n-th discrete difference along given axis.</td></tr><tr><td>ediff1d(ary[, to_end, to_begin])</td><td>The differences between consecutive elements of an array.</td></tr><tr><td>gradient(f, *varargs, **kwargs)</td><td>Return the gradient of an N-dimensional array.</td></tr><tr><td>cross(a, b[, axisa, axisb, axisc, axis])</td><td>Return the cross product of two (arrays of) vectors.</td></tr><tr><td>trapz(y[, x, dx, axis])</td><td>Integrate along the given axis using the composite trapezoidal rule.</td></tr></tbody></table><h2 id="exponents-and-logarithms-指数和对数" tabindex="-1"><a class="header-anchor" href="#exponents-and-logarithms-指数和对数" aria-hidden="true">#</a> Exponents and logarithms（指数和对数）</h2>',10),o=t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"函数"),t("th",null,"描述")])]),t("tbody",null,[t("tr",null,[t("td",null,"exp(x, /[, out, where, casting, order, ...])"),t("td",null,[n("指数 "),t("span",{class:"katex"},[t("span",{class:"katex-mathml"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("semantics",null,[t("mrow",null,[t("mi",null,"y"),t("mo",null,"="),t("msup",null,[t("mi",null,"e"),t("mi",null,"x")])]),t("annotation",{encoding:"application/x-tex"},"y=e^x")])])]),t("span",{class:"katex-html","aria-hidden":"true"},[t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.625em","vertical-align":"-0.1944em"}}),t("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),t("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),t("span",{class:"mrel"},"="),t("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),t("span",{class:"base"},[t("span",{class:"strut",style:{height:"0.6644em"}}),t("span",{class:"mord"},[t("span",{class:"mord mathnormal"},"e"),t("span",{class:"msupsub"},[t("span",{class:"vlist-t"},[t("span",{class:"vlist-r"},[t("span",{class:"vlist",style:{height:"0.6644em"}},[t("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[t("span",{class:"pstrut",style:{height:"2.7em"}}),t("span",{class:"sizing reset-size6 size3 mtight"},[t("span",{class:"mord mathnormal mtight"},"x")])])])])])])])])])])])]),t("tr",null,[t("td",null,"expm1(x, /[, out, where, casting, order, ...])"),t("td",null,"Calculate exp(x) - 1 for all elements in the array.")]),t("tr",null,[t("td",null,"exp2(x, /[, out, where, casting, order, ...])"),t("td",null,"Calculate 2**p for all p in the input array.")]),t("tr",null,[t("td",null,"log(x, /[, out, where, casting, order, ...])"),t("td",null,"对数, element-wise.")]),t("tr",null,[t("td",null,"log10(x, /[, out, where, casting, order, ...])"),t("td",null,"Return the base 10 logarithm of the input array, element-wise.")]),t("tr",null,[t("td",null,"log2(x, /[, out, where, casting, order, ...])"),t("td",null,"Base-2 logarithm of x.")]),t("tr",null,[t("td",null,"log1p(x, /[, out, where, casting, order, ...])"),t("td",null,"Return the natural logarithm of one plus the input array, element-wise.")]),t("tr",null,[t("td",null,"logaddexp(x1, x2, /[, out, where, casting, ...])"),t("td",null,"Logarithm of the sum of exponentiations of the inputs.")]),t("tr",null,[t("td",null,"logaddexp2(x1, x2, /[, out, where, casting, ...])"),t("td",null,"Logarithm of the sum of exponentiations of the inputs in base-2.")])])],-1),l=e('<h2 id="other-special-functions-其他特殊函数" tabindex="-1"><a class="header-anchor" href="#other-special-functions-其他特殊函数" aria-hidden="true">#</a> Other special functions（其他特殊函数）</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>i0(x)</td><td>Modified Bessel function of the first kind, order 0.</td></tr><tr><td>sinc(x)</td><td>Return the sinc function.</td></tr></tbody></table><h2 id="floating-point-routines-浮点路线" tabindex="-1"><a class="header-anchor" href="#floating-point-routines-浮点路线" aria-hidden="true">#</a> Floating point routines（浮点路线）</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>signbit(x, /[, out, where, casting, order, ...])</td><td>Returns element-wise True where signbit is set (less than zero).</td></tr><tr><td>copysign(x1, x2, /[, out, where, casting, ...])</td><td>Change the sign of x1 to that of x2, element-wise.</td></tr><tr><td>frexp(x[, out1, out2], / [[, out, where, ...])</td><td>Decompose the elements of x into mantissa and twos exponent.</td></tr><tr><td>ldexp(x1, x2, /[, out, where, casting, ...])</td><td>Returns x1 * 2**x2, element-wise.</td></tr><tr><td>nextafter(x1, x2, /[, out, where, casting, ...])</td><td>Return the next floating-point value after x1 towards x2, element-wise.</td></tr><tr><td>spacing(x, /[, out, where, casting, order, ...])</td><td>Return the distance between x and the nearest adjacent number.</td></tr></tbody></table><h2 id="arithmetic-operations-数学函数" tabindex="-1"><a class="header-anchor" href="#arithmetic-operations-数学函数" aria-hidden="true">#</a> Arithmetic operations（数学函数）</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>add(x1, x2, /[, out, where, casting, order, ...])</td><td>相加element-wise.</td></tr><tr><td>reciprocal(x, /[, out, where, casting, ...])</td><td>倒数, element-wise.</td></tr><tr><td>negative(x, /[, out, where, casting, order, ...])</td><td>相反数, element-wise.</td></tr><tr><td>multiply(x1, x2, /[, out, where, casting, ...])</td><td>乘积 element-wise.</td></tr><tr><td>divide(x1, x2, /[, out, where, casting, ...])</td><td>触发 element-wise.</td></tr><tr><td>power(x1, x2, /[, out, where, casting, ...])</td><td>幂运算, element-wise.</td></tr><tr><td>subtract(x1, x2, /[, out, where, casting, ...])</td><td>相减, element-wise.</td></tr><tr><td>true_divide(x1, x2, /[, out, where, ...])</td><td>Returns a true division of the inputs, element-wise.</td></tr><tr><td>floor_divide(x1, x2, /[, out, where, ...])</td><td>Return the largest integer smaller or equal to the division of the inputs.</td></tr><tr><td>float_power(x1, x2, /[, out, where, ...])</td><td>幂运算, element-wise.</td></tr><tr><td>fmod(x1, x2, /[, out, where, casting, ...])</td><td>取余数，element-wise</td></tr><tr><td>mod(x1, x2, /[, out, where, casting, order, ...])</td><td>Return element-wise remainder of division.</td></tr><tr><td>modf(x[, out1, out2], / [[, out, where, ...])</td><td>Return the fractional and integral parts of an array, element-wise.</td></tr><tr><td>remainder(x1, x2, /[, out, where, casting, ...])</td><td>Return element-wise remainder of division.</td></tr><tr><td>divmod(x1, x2[, out1, out2], / [[, out, ...])</td><td>Return element-wise quotient and remainder simultaneously.</td></tr></tbody></table><h2 id="handling-complex-numbers-处理复杂的数字" tabindex="-1"><a class="header-anchor" href="#handling-complex-numbers-处理复杂的数字" aria-hidden="true">#</a> Handling complex numbers（处理复杂的数字）</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>angle(z[, deg])</td><td>Return the angle of the complex argument.</td></tr><tr><td>real(val)</td><td>Return the real part of the complex argument.</td></tr><tr><td>imag(val)</td><td>Return the imaginary part of the complex argument.</td></tr><tr><td>conj(x, /[, out, where, casting, order, ...])</td><td>Return the complex conjugate, element-wise.</td></tr></tbody></table><h2 id="miscellaneous-杂项" tabindex="-1"><a class="header-anchor" href="#miscellaneous-杂项" aria-hidden="true">#</a> Miscellaneous（杂项）</h2><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>convolve(a, v[, mode])</td><td>Returns the discrete, linear convolution of two one-dimensional sequences.</td></tr><tr><td>clip(a, a_min, a_max[, out])</td><td>Clip (limit) the values in an array.</td></tr><tr><td>sqrt(x, /[, out, where, casting, order, ...])</td><td>Return the positive square-root of an array, element-wise.</td></tr><tr><td>cbrt(x, /[, out, where, casting, order, ...])</td><td>Return the cube-root of an array, element-wise.</td></tr><tr><td>square(x, /[, out, where, casting, order, ...])</td><td>Return the element-wise square of the input.</td></tr><tr><td>absolute(x, /[, out, where, casting, order, ...])</td><td>Calculate the absolute value element-wise.</td></tr><tr><td>fabs(x, /[, out, where, casting, order, ...])</td><td>Compute the absolute values element-wise.</td></tr><tr><td>sign(x, /[, out, where, casting, order, ...])</td><td>Returns an element-wise indication of the sign of a number.</td></tr><tr><td>heaviside(x1, x2, /[, out, where, casting, ...])</td><td>Compute the Heaviside step function.</td></tr><tr><td>maximum(x1, x2, /[, out, where, casting, ...])</td><td>Element-wise maximum of array elements.</td></tr><tr><td>minimum(x1, x2, /[, out, where, casting, ...])</td><td>Element-wise minimum of array elements.</td></tr><tr><td>fmax(x1, x2, /[, out, where, casting, ...])</td><td>Element-wise maximum of array elements.</td></tr><tr><td>fmin(x1, x2, /[, out, where, casting, ...])</td><td>Element-wise minimum of array elements.</td></tr><tr><td>nan_to_num(x[, copy])</td><td>Replace nan with zero and inf with finite numbers.</td></tr><tr><td>real_if_close(a[, tol])</td><td>If complex input returns a real array if complex parts are close to zero.</td></tr><tr><td>interp(x, xp, fp[, left, right, period])</td><td>One-dimensional linear interpolation.</td></tr></tbody></table><p>参考: https://docs.scipy.org/doc/numpy/reference/routines.math.html</p>',11),h=[s,o,l];function u(c,m){return d(),a("div",null,h)}const p=r(i,[["render",u],["__file","math.html.vue"]]);export{p as default};
