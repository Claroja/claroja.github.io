import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-A10JnHE0.js";const t="/assets/1-PiMUvU_S.png",i={},c=e(`<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h1><ol><li>在<code>main</code>中终断自己,并返回</li><li>1.0:sucess;1:failure;2:error</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">_exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">_Exit</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="exit-and-exit-and-exit" tabindex="-1"><a class="header-anchor" href="#exit-and-exit-and-exit" aria-hidden="true">#</a> exit() and _exit() and _Exit()</h1><ol><li>三种终断进程的方法 方法|描述 --|-- _exit()|请求OS立刻终断进程,强行,不回收资源 exit()|C标准库函数,先回收资源,再终断 _Exit()|C标准库函数,本质是<code>_exit()</code>的包装</li></ol><p>1.左图<code>exit</code>会先将buffer里的内容输出的屏幕,再退出 2.右图<code>_exit</code>不会等待,直接退出 3.可以调用<code>fflush()</code>将buffer内容输出</p><figure><img src="`+t+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h1 id="atexit-退出回调" tabindex="-1"><a class="header-anchor" href="#atexit-退出回调" aria-hidden="true">#</a> atexit() 退出回调</h1><p>1.终断<code>exit()</code>时回调其他函数</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*exit_handler_demo.c*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">my_exit1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;FIRST Exit Handler\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">my_exit2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SECOND Exit Handler\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token comment">//exit handers execute in reverse order of registration                                                                                                                    </span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>my_exit1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">atexit</span><span class="token punctuation">(</span>my_exit2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//my_exit2 will run before my_exit1                                                                                                                                        </span>

  <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">//implicitly calls exit()                                                                                                                                         </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),p=[c];function o(l,u){return s(),a("div",null,p)}const k=n(i,[["render",o],["__file","4退出进程exit.html.vue"]]);export{k as default};
