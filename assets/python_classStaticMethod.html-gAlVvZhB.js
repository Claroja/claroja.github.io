import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,d as t}from"./app-j3zK2x6_.js";const e={},o=t(`<h1 id="classstaticmethod" tabindex="-1"><a class="header-anchor" href="#classstaticmethod" aria-hidden="true">#</a> classStaticMethod</h1><h2 id="类属性方法-实例属性方法" tabindex="-1"><a class="header-anchor" href="#类属性方法-实例属性方法" aria-hidden="true">#</a> 类属性方法&amp;实例属性方法</h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>类变量(静态变量)</td><td>所有实例共有,每个实例可以不加<code>self</code>调用</td></tr><tr><td>类方法(静态方法)</td><td>所有实例共有,每个实例都可以调用</td></tr><tr><td>实例变量(非静态变量)</td><td>单个实例所有,需通过<code>self</code>调用</td></tr><tr><td>实例方法(非静态方法)</td><td>单个实例所有</td></tr><tr><td>下例中</td><td></td></tr><tr><td><code>class_name</code>是类属性,所有的实例都具有该属性,而且任何一个实例修改都可以修改该属性,修改后,其他实例也会改变</td><td></td></tr><tr><td><code>object_name</code>是实例属性,只有实例具有,智能通过<code>__init__</code>来创建</td><td></td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    class_name <span class="token operator">=</span> <span class="token string">&#39;wang&#39;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>na<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>object_name <span class="token operator">=</span> <span class="token string">&#39;wei&#39;</span>

<span class="token comment">## 查看类的成员,只有class_name,没有object_name</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">## 查看对象成员,既有class_name,又有object_name</span>
obj <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token string">&#39;zhao&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="instancemethod-classmethod和staticmethod" tabindex="-1"><a class="header-anchor" href="#instancemethod-classmethod和staticmethod" aria-hidden="true">#</a> <code>instancemethod</code>,<code>classmethod</code>和<code>staticmethod</code></h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&quot;executing foo(%s, %s)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">class_foo</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&quot;executing class_foo(%s, %s)&quot;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>cls<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">static_foo</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">&quot;executing static_foo(%s)&quot;</span> <span class="token operator">%</span> x    
a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>instancemethod</code> 在定义<code>foo(self,x)</code>方法时，将<code>self</code>作为第一个参数，而调用时就隐式地将<code>a</code>作为第一个参数传入，而我们只要传一个参数即可。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">.</span>foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">## executing foo(&lt;__main__.A object at 0xb7dbef0c&gt;,1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>classmethod</code> 类似instancemethod，只是第一个参数变成了<code>cls</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">.</span>class_foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">## executing class_foo(&lt;class &#39;__main__.A&#39;&gt;,1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>staticmethods</code><code>slef</code>(the object instance)和<code>cls</code>(the class)都不会传入方法，这个和再类外定义一个函数没有区别，只是有些时候某些方法在逻辑上属于某个类的时候，才用。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a<span class="token punctuation">.</span>static_foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">## executing static_foo(1)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结: <code>foo</code>只是一个方法，当使用<code>a.foo</code>时，将instance作为第一个参数与<code>foo</code>进行绑定。 当使用<code>A.class_foo</code>时，将类A作为第一个参数与之相绑定。 档使用<code>A.static_foo</code>时，没有与instance和class绑定，定义和调用时都只是一个参数。</p><p>参考: https://stackoverflow.com/questions/136097/difference-between-staticmethod-and-classmethod?r=SearchResults</p>`,14),c=[o];function p(i,l){return s(),a("div",null,c)}const r=n(e,[["render",p],["__file","python_classStaticMethod.html.vue"]]);export{r as default};
