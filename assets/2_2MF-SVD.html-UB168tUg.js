import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,a as i}from"./app-9tftCahk.js";const r="/assets/3-RYS74eSU.png",h={},n=i('<h1 id="基于模型的方法" tabindex="-1"><a class="header-anchor" href="#基于模型的方法" aria-hidden="true">#</a> 基于模型的方法</h1><h2 id="矩阵分解算法简介" tabindex="-1"><a class="header-anchor" href="#矩阵分解算法简介" aria-hidden="true">#</a> 矩阵分解算法简介</h2><p>矩阵分解算法就是把原来的user-item评分表拆分成用户表示矩阵与item表示矩阵的乘积，其中k可以理解成为表示的维度。通过种种方法得到两个表示矩阵之后，两个矩阵相乘所得到的特定位置的数值就是用户的期望评分。</p><figure><img src="'+r+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>直观一点，以电影推荐为例，这k个维度可以分别是喜剧、动作、悬疑等，每个维度的数值代表用户对这个类别的喜欢程度或者电影与这个类别的接近程度。</p><p>不过在具体的学习中就是学习到一个抽象的embedding表示。每个k的含义并不清楚，此时又被叫做隐因子、隐变量等。我想这一点对于学习机器学习的应该都不陌生了，就不过多掰扯了。</p><h2 id="奇异值分解svd" tabindex="-1"><a class="header-anchor" href="#奇异值分解svd" aria-hidden="true">#</a> 奇异值分解SVD</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ol><li>https://www.cnblogs.com/Diyo/p/11333596.html</li><li>https://zhuanlan.zhihu.com/p/686778699</li></ol>',9),s=[n];function d(o,c){return a(),t("div",null,s)}const p=e(h,[["render",d],["__file","2_2MF-SVD.html.vue"]]);export{p as default};
