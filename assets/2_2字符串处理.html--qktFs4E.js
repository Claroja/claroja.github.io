import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as t,a}from"./app-nD1Z-e8V.js";const c={},p=a(`<table><thead><tr><th>函数</th><th>描述</th><th>参数</th><th>返回</th></tr></thead><tbody><tr><td>size_t strlen(const char *s);</td><td>计算指定指定字符串s的长度，不包含字符串结束符‘\\0’</td><td>s：字符串首地址</td><td>字符串s的长度，size_t为unsigned int类型</td></tr><tr><td>char *strcpy(char *dest, const char *src);</td><td>把src所指向的字符串复制到dest所指向的空间中，&#39;\\0&#39;也会拷贝过去</td><td>dest：目的字符串首地址；src：源字符首地址</td><td>成功：返回dest字符串的首地址；失败：NULL</td></tr><tr><td>char *strncpy(char *dest, const char *src, size_t n);</td><td>把src指向字符串的前n个字符复制到dest所指向的空间中，是否拷贝结束符看指定的长度是否包含&#39;\\0&#39;。</td><td>dest：目的字符串首地址；src：源字符首地址；n：指定需要拷贝字符串个数</td><td>成功：返回dest字符串的首地址；失败：NULL</td></tr><tr><td>char *strcat(char *dest, const char *src);</td><td>将src字符串连接到dest的尾部，‘\\0’也会追加过去</td><td>dest：目的字符串首地址;src：源字符首地址</td><td>成功：返回dest字符串的首地址;失败：NULL</td></tr><tr><td>char *strncat(char *dest, const char *src, size_t n);</td><td>将src字符串前n个字符连接到dest的尾部，‘\\0’也会追加过去</td><td>dest：目的字符串首地址;src：源字符首地址;n：指定需要追加字符串个数</td><td>成功：返回dest字符串的首地址;失败：NULL</td></tr><tr><td>int strcmp(const char *s1, const char *s2);</td><td>比较 s1 和 s2 的大小，比较的是字符ASCII码大小。</td><td>s1：字符串1首地址;s2：字符串2首地址</td><td>相等：0大于：&gt;0小于：&lt;0</td></tr><tr><td>int strncmp(const char *s1, const char *s2, size_t n);</td><td>比较 s1 和 s2 前n个字符的大小，比较的是字符ASCII码大小</td><td>s1：字符串1首地址;s2：字符串2首地址;n：指定比较字符串的数量</td><td>相等：0;大于： &gt; 0;小于： &lt; 0</td></tr><tr><td>int sprintf(char *_CRT_SECURE_NO_WARNINGS, const char *format, ...);</td><td>根据参数format字符串来转换并格式化数据，然后将结果输出到str指定的空间中，直到出现字符串结束符 &#39;\\0&#39; 为止</td><td>str：字符串首地址;format：字符串格式，用法和printf()一样</td><td>成功：实际格式化的字符个数;失败： - 1</td></tr><tr><td>int sscanf(const char *str, const char *format, ...);</td><td>从str指定的字符串读取数据，并根据参数format字符串来转换并格式化数据</td><td>str：指定的字符串首地址;format：字符串格式，用法和scanf()一样</td><td>成功：参数数目，成功转换的值的个数;失败： - 1</td></tr><tr><td>char *strchr(const char *s, int c);</td><td>在字符串s中查找字母c出现的位置</td><td>s：字符串首地址;c：匹配字母(字符)</td><td>成功：返回第一次出现的c地址;失败：NULL</td></tr><tr><td>char *strstr(const char *haystack, const char *needle);</td><td>在字符串haystack中查找字符串needle出现的位置</td><td>haystack：源字符串首地址;needle：匹配字符串首地址</td><td>成功：返回第一次出现的needle地址;失败：NULL</td></tr><tr><td>strtok()</td><td>来将字符串分割成一个个片段。当strtok()在参数s的字符串中发现参数delim中包含的分割字符时, 则会将该字符改为\\0 字符，当连续出现多个时只替换第一个为\\0。</td><td>str：指向欲分割的字符串;delim：为分割字符串中包含的所有字符</td><td>成功：分割后字符串首地址;失败：NULL</td></tr><tr><td>int atoi(const char *nptr);</td><td>atoi()会扫描nptr字符串，跳过前面的空格字符，直到遇到数字或正负号才开始做转换，而遇到非数字或字符串结束符(&#39;\\0&#39;)才结束转换，并将结果返回返回值。</td><td>nptr：待转换的字符串</td><td>成功转换后整数</td></tr><tr><td>atof()</td><td>把一个小数形式的字符串转化为一个浮点数。</td><td></td><td></td></tr><tr><td>atol()</td><td>将一个字符串转化为long类型</td><td></td><td></td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;字符串的有效长度：%d&quot;</span><span class="token punctuation">,</span> len1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strlen会自动忽略\`\\0\`</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;字符串的长度：%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;he\\0llo&quot;</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;字符串的有效长度：%d&quot;</span><span class="token punctuation">,</span> len2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//strlen遇到\`\\0\`时停止</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;字符串的长度：%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">char</span> arr3<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token char">&#39;h&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;o&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> len3 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数组中没有\`\\0\`</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;字符串的有效长度：%d&quot;</span><span class="token punctuation">,</span> len3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;字符串的长度：%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),e=[p];function o(d,r){return s(),t("div",null,e)}const u=n(c,[["render",o],["__file","2_2字符串处理.html.vue"]]);export{u as default};
