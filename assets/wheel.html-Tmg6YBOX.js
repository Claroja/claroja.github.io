const e=JSON.parse(`{"key":"v-1a32f9a0","path":"/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3python/2%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/wheel.html","title":"wheel","lang":"zh-CN","frontmatter":{"description":"wheel Egg格式是由setuptools在2004年引入，而Wheel格式是由PEP427在2012年定义。 wheels是发行版Python的新标准并且要取代.egg。 Wheel有一个官方的PEP427来定义，而Egg没有PEP定义。 name : 打包起来的包的文件名 version : 版本号,添加为打包文件的后缀名 author : 作者 author_email : 作者的邮箱 py_modules : 打包的.py文件 packages: 打包的python文件夹 include_package_data : 项目里会有一些非py文件,比如html和js等,这时候就要靠include_package_data 和 package_data 来指定了。package_data:一般写成{‘your_package_name': [“files”]}, include_package_data还没完,还需要修改MANIFEST.in文件.MANIFEST.in文件的语法为: include xxx/xxx/xxx/.ini/(所有以.ini结尾的文件,也可以直接指定文件名) license : 支持的开源协议 description : 对项目简短的一个形容 ext_modules : 是一个包含Extension实例的列表,Extension的定义也有一些参数。 ext_package : 定义extension的相对路径 requires : 定义依赖哪些模块 provides : 定义可以为哪些模块提供依赖 data_files :指定其他的一些文件(如配置文件),规定了哪些文件被安装到哪些目录中。如果目录名是相对路径,则是相对于sys.prefix或sys.exec_prefix的路径。如果没有提供模板,会被添加到MANIFEST文件中。","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3python/2%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%8C%85/wheel.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"wheel"}],["meta",{"property":"og:description","content":"wheel Egg格式是由setuptools在2004年引入，而Wheel格式是由PEP427在2012年定义。 wheels是发行版Python的新标准并且要取代.egg。 Wheel有一个官方的PEP427来定义，而Egg没有PEP定义。 name : 打包起来的包的文件名 version : 版本号,添加为打包文件的后缀名 author : 作者 author_email : 作者的邮箱 py_modules : 打包的.py文件 packages: 打包的python文件夹 include_package_data : 项目里会有一些非py文件,比如html和js等,这时候就要靠include_package_data 和 package_data 来指定了。package_data:一般写成{‘your_package_name': [“files”]}, include_package_data还没完,还需要修改MANIFEST.in文件.MANIFEST.in文件的语法为: include xxx/xxx/xxx/.ini/(所有以.ini结尾的文件,也可以直接指定文件名) license : 支持的开源协议 description : 对项目简短的一个形容 ext_modules : 是一个包含Extension实例的列表,Extension的定义也有一些参数。 ext_package : 定义extension的相对路径 requires : 定义依赖哪些模块 provides : 定义可以为哪些模块提供依赖 data_files :指定其他的一些文件(如配置文件),规定了哪些文件被安装到哪些目录中。如果目录名是相对路径,则是相对于sys.prefix或sys.exec_prefix的路径。如果没有提供模板,会被添加到MANIFEST文件中。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"wheel\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.13,"words":339},"filePathRelative":"4编程语言/3python/2模块与包/wheel.md","localizedDate":"2025年2月24日","excerpt":"<h1> wheel</h1>\\n<ol>\\n<li>Egg格式是由setuptools在2004年引入，而Wheel格式是由PEP427在2012年定义。</li>\\n<li>wheels是发行版Python的新标准并且要取代.egg。</li>\\n<li>Wheel有一个官方的PEP427来定义，而Egg没有PEP定义。</li>\\n</ol>\\n<p>name : 打包起来的包的文件名\\nversion : 版本号,添加为打包文件的后缀名\\nauthor : 作者\\nauthor_email : 作者的邮箱\\npy_modules : 打包的.py文件\\npackages: 打包的python文件夹\\ninclude_package_data : 项目里会有一些非py文件,比如html和js等,这时候就要靠include_package_data 和 package_data 来指定了。package_data:一般写成{‘your_package_name': [“files”]}, include_package_data还没完,还需要修改MANIFEST.in文件.MANIFEST.in文件的语法为: include xxx/xxx/xxx/.ini/(所有以.ini结尾的文件,也可以直接指定文件名)\\nlicense : 支持的开源协议\\ndescription : 对项目简短的一个形容\\next_modules : 是一个包含Extension实例的列表,Extension的定义也有一些参数。\\next_package : 定义extension的相对路径\\nrequires : 定义依赖哪些模块\\nprovides : 定义可以为哪些模块提供依赖\\ndata_files :指定其他的一些文件(如配置文件),规定了哪些文件被安装到哪些目录中。如果目录名是相对路径,则是相对于sys.prefix或sys.exec_prefix的路径。如果没有提供模板,会被添加到MANIFEST文件中。</p>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{e as data};
