const t=JSON.parse('{"key":"v-4036d04b","path":"/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c/3%E6%8C%87%E9%92%88/10%E5%A0%86%E5%86%85%E5%AD%98%E6%93%8D%E4%BD%9C.html","title":"","lang":"zh-CN","frontmatter":{"description":"存储类型总结内存操作函数 函数 描述 参数 返回 void *memset(void *s, int c, size_t n); 将s指针开始到n字节的内存区域,每个字节初始化为c void *memcpy(void *dest, const void *src, size_t n); 拷贝src所指的地址往后数n个字节到dest所值的内存地址上。 void* memmove(void* dest,const void* src,size_t num) 和memcpy区别在于dest与src内存块可以重叠 int memcmp(const void *s1, const void *s2, size_t n); 比较s1和s2所指向内存区域的前n个字节 参考:https://blog.csdn.net/tanrui519521/article/details/81164275","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c/3%E6%8C%87%E9%92%88/10%E5%A0%86%E5%86%85%E5%AD%98%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:description","content":"存储类型总结内存操作函数 函数 描述 参数 返回 void *memset(void *s, int c, size_t n); 将s指针开始到n字节的内存区域,每个字节初始化为c void *memcpy(void *dest, const void *src, size_t n); 拷贝src所指的地址往后数n个字节到dest所值的内存地址上。 void* memmove(void* dest,const void* src,size_t num) 和memcpy区别在于dest与src内存块可以重叠 int memcmp(const void *s1, const void *s2, size_t n); 比较s1和s2所指向内存区域的前n个字节 参考:https://blog.csdn.net/tanrui519521/article/details/81164275"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"存储类型总结内存操作函数","slug":"存储类型总结内存操作函数","link":"#存储类型总结内存操作函数","children":[]},{"level":2,"title":"memset","slug":"memset","link":"#memset","children":[]},{"level":2,"title":"memcpy","slug":"memcpy","link":"#memcpy","children":[]}],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.2,"words":359},"filePathRelative":"2编程语言/2c/3指针/10堆内存操作.md","localizedDate":"2025年2月21日","excerpt":"<h2> 存储类型总结内存操作函数</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>函数</th>\\n<th>描述</th>\\n<th>参数</th>\\n<th>返回</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>void *memset(void *s, int c, size_t n);</td>\\n<td>将s指针开始到n字节的内存区域,每个字节初始化为c</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>void *memcpy(void *dest, const void *src, size_t n);</td>\\n<td>拷贝src所指的地址往后数n个字节到dest所值的内存地址上。</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>void* memmove(void* dest,const void* src,size_t num)</td>\\n<td>和memcpy区别在于dest与src内存块可以重叠</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>int memcmp(const void *s1, const void *s2, size_t n);</td>\\n<td>比较s1和s2所指向内存区域的前n个字节</td>\\n<td></td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>参考:https://blog.csdn.net/tanrui519521/article/details/81164275</td>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
