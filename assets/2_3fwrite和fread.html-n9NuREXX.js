import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c,b as n,d as s,e as i,a}from"./app-7knaTE3M.js";const l={},u=a('<h1 id="格式化io" tabindex="-1"><a class="header-anchor" href="#格式化io" aria-hidden="true">#</a> 格式化IO</h1><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>fprintf</td><td>Write formatted data to stream (function ) 向文件格式化写入</td></tr><tr><td>fscanf</td><td>Read formatted data from stream (function ) 向文件格式化读出</td></tr><tr><td>sprintf</td><td>Write formatted data to string (function ) 向C字符串读出</td></tr><tr><td>sscanf</td><td>Read formatted data from string (function ) 向C字符串写入</td></tr><tr><td>printf</td><td>Print formatted data to stdout (function ) 向标准输出给石化读出</td></tr><tr><td>scanf</td><td>Read formatted data from stdin (function ) 向标准输入格式化写入</td></tr></tbody></table><h1 id="字符字符串io" tabindex="-1"><a class="header-anchor" href="#字符字符串io" aria-hidden="true">#</a> 字符字符串IO</h1>',3),r=n("thead",null,[n("tr",null,[n("th",null,"参数"),n("th",null,"描述")])],-1),d=n("td",null,"fgetc(函数实现)",-1),k={href:"https://bbs.csdn.net/topics/230005816",target:"_blank",rel:"noopener noreferrer"},m=n("tr",null,[n("td",null,"fputc(函数实现)"),n("td",null,"Write character to stream (function ) putc(宏实现)")],-1),v=n("tr",null,[n("td",null,"fgets"),n("td",null,"Get string from stream (function )")],-1),f=n("tr",null,[n("td",null,"fputs"),n("td",null,"Write string to stream (function )")],-1),b=n("tr",null,[n("td",null,"getchar"),n("td",null,"Get character from stdin (function )")],-1),h=n("tr",null,[n("td",null,"putchar"),n("td",null,"Write character to stdout (function )")],-1),g=n("tr",null,[n("td",null,"gets"),n("td",null,"Get string from stdin (function )")],-1),w=n("tr",null,[n("td",null,"puts"),n("td",null,"Write string to stdout (function )")],-1),y=a(`<h1 id="直接io-二进制io" tabindex="-1"><a class="header-anchor" href="#直接io-二进制io" aria-hidden="true">#</a> 直接IO(二进制IO)</h1><ol><li>二进制读写,在读文件的时候加<code>b</code></li></ol><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>fread</td><td>Read block of data from stream (function )</td></tr><tr><td>fwrite</td><td>Write block of data to stream (function )</td></tr></tbody></table><h2 id="fread" tabindex="-1"><a class="header-anchor" href="#fread" aria-hidden="true">#</a> fread</h2><p><code>size_t fread ( void * ptr, size_t size, size_t count, FILE * stream )</code> Read block of data from stream</p><ol><li>fread()──从fp所指向文件的当前位置开始，一次读入size个字节，重复count次，并将读入的数据存放到从buffer开始的内存中；</li><li>读写的是数据块,既<code>size_t size</code> 参数|描述 --|-- ptr|block of memory with a size of at least (size<em>count) bytes,converted to a void</em> size|Size, in bytes, of each element to be read. count|Number of elements, each one with a size of size bytes. stream|Pointer to a FILE object</li></ol><table><thead><tr><th>返回</th><th>描述</th></tr></thead><tbody><tr><td>成功</td><td>返回count</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//一定要初始化数组,不然会很&#39;烫&#39;(声明数组时,内存空间可能被其他程序修改过)</span>
	<span class="token function">fread</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="fwrite" tabindex="-1"><a class="header-anchor" href="#fwrite" aria-hidden="true">#</a> fwrite</h1><p>和fread对应</p><h1 id="int-类型读写" tabindex="-1"><a class="header-anchor" href="#int-类型读写" aria-hidden="true">#</a> int 类型读写</h1><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	FILE <span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wb+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">int</span> wbuffer<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token function">fwrite</span><span class="token punctuation">(</span>wbuffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时文件position已经在1字节后</span>
	<span class="token keyword">int</span> rbuffer<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token function">fread</span><span class="token punctuation">(</span>rbuffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> rbuffer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="结构体读写" tabindex="-1"><a class="header-anchor" href="#结构体读写" aria-hidden="true">#</a> 结构体读写</h1><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>person<span class="token punctuation">;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	FILE <span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wb+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	person wper<span class="token punctuation">;</span>
	wper<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">strcpy</span><span class="token punctuation">(</span>wper<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">&quot;wang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字符串数组</span>
	<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wper<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">rewind</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此时文件position已经在1字节后</span>
	
	person rper<span class="token punctuation">;</span>
	<span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rper<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pFile<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s\\n&quot;</span><span class="token punctuation">,</span> rper<span class="token punctuation">.</span>age<span class="token punctuation">,</span> rper<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: http://www.cplusplus.com/reference/cstdio/ http://www.gnu.org/software/libc/manual/html_node/I_002fO-on-Streams.html#I_002fO-on-Streams</p>`,15);function _(q,x){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,n("table",null,[r,n("tbody",null,[n("tr",null,[d,n("td",null,[s("Get character from stream (function ),getc("),n("a",k,[s("宏实现"),i(t)]),s(")")])]),m,v,f,b,h,g,w])]),y])}const I=e(l,[["render",_],["__file","2_3fwrite和fread.html.vue"]]);export{I as default};
