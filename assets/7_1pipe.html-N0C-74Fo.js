const e=JSON.parse('{"key":"v-cf5418a6","path":"/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c%E8%AF%AD%E8%A8%80/8%E8%BF%9B%E7%A8%8B/7_1pipe.html","title":"管道(pipe)","lang":"zh-CN","frontmatter":{"description":"每个进程拥有各自的地址空间,一个进程的全局变量在另一个进程中看不到,所以进程之间不能相互访问,要交换数据必须经过内核,在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信（IPC，InterProcess Communication）。 常用的IPC方法有: pipe管道 (使用最简单) fifo信号 (开销最小) mmap共享映射区 (无血缘关系) socket本地套接字 (最稳定) 管道(pipe) 管道是内核管理的缓冲区,所以只有有血缘关系(子与父,子与子)的进程之间，完成数据传递。 管道缓冲区不打,被设计为环形数据结构. 当管道没有信息,从管道读取信息的进程会等待,知道另一端放入信息. 当管道放满信息,写入管道的进程会等待,直到另一端进程取出信息. 当两个进程都终结的时候,管道自动消失.","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c%E8%AF%AD%E8%A8%80/8%E8%BF%9B%E7%A8%8B/7_1pipe.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"管道(pipe)"}],["meta",{"property":"og:description","content":"每个进程拥有各自的地址空间,一个进程的全局变量在另一个进程中看不到,所以进程之间不能相互访问,要交换数据必须经过内核,在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信（IPC，InterProcess Communication）。 常用的IPC方法有: pipe管道 (使用最简单) fifo信号 (开销最小) mmap共享映射区 (无血缘关系) socket本地套接字 (最稳定) 管道(pipe) 管道是内核管理的缓冲区,所以只有有血缘关系(子与父,子与子)的进程之间，完成数据传递。 管道缓冲区不打,被设计为环形数据结构. 当管道没有信息,从管道读取信息的进程会等待,知道另一端放入信息. 当管道放满信息,写入管道的进程会等待,直到另一端进程取出信息. 当两个进程都终结的时候,管道自动消失."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"管道(pipe)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.55,"words":466},"filePathRelative":"4编程语言/2c语言/8进程/7_1pipe.md","localizedDate":"2025年2月24日","excerpt":"<p>每个进程拥有各自的地址空间,一个进程的全局变量在另一个进程中看不到,所以进程之间不能相互访问,要交换数据必须经过内核,在内核中开辟一块缓冲区，进程1把数据从用户空间拷到内核缓冲区，进程2再从内核缓冲区把数据读走，内核提供的这种机制称为进程间通信（IPC，InterProcess Communication）。</p>\\n<p>常用的IPC方法有:\\npipe管道 (使用最简单)\\nfifo信号 (开销最小)\\nmmap共享映射区 (无血缘关系)\\nsocket本地套接字 (最稳定)</p>\\n<h1> 管道(pipe)</h1>\\n<p>管道是内核管理的缓冲区,所以只有有血缘关系(子与父,子与子)的进程之间，完成数据传递。\\n管道缓冲区不打,被设计为环形数据结构.\\n当管道没有信息,从管道读取信息的进程会等待,知道另一端放入信息.\\n当管道放满信息,写入管道的进程会等待,直到另一端进程取出信息.\\n当两个进程都终结的时候,管道自动消失.</p>","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
