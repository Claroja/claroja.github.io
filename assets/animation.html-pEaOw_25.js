const t=JSON.parse('{"key":"v-415d0e14","path":"/%E6%95%B0%E5%AD%A6/%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/matplotlib-artist-%E7%89%B9%E6%AE%8A%E5%86%85%E5%AE%B9/animation.html","title":"animation","lang":"zh-CN","frontmatter":{"description":"animation matplotlib中有两个创建动画的类FuncAnimation和ArtistAnimation. FuncAnimation是比较容易理解和使用更广泛的, 所以我们也使用它. 我们将自定义一个animate方法, 作为FuncAnimation的参数, FuncAnimation将根据animate的内容逐帧创建动画. API","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E6%95%B0%E5%AD%A6/%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/matplotlib-artist-%E7%89%B9%E6%AE%8A%E5%86%85%E5%AE%B9/animation.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"animation"}],["meta",{"property":"og:description","content":"animation matplotlib中有两个创建动画的类FuncAnimation和ArtistAnimation. FuncAnimation是比较容易理解和使用更广泛的, 所以我们也使用它. 我们将自定义一个animate方法, 作为FuncAnimation的参数, FuncAnimation将根据animate的内容逐帧创建动画. API"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://claroja.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-27T13:31:52.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"animation"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2023-11-27T13:31:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"animation\\",\\"image\\":[\\"https://claroja.github.io/\\"],\\"dateModified\\":\\"2023-11-27T13:31:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"API","slug":"api","link":"#api","children":[]},{"level":2,"title":"动画的理解","slug":"动画的理解","link":"#动画的理解","children":[]},{"level":2,"title":"直线增长类型","slug":"直线增长类型","link":"#直线增长类型","children":[]},{"level":2,"title":"文本案例","slug":"文本案例","link":"#文本案例","children":[]},{"level":2,"title":"使用Writer控制输出格式即帧率","slug":"使用writer控制输出格式即帧率","link":"#使用writer控制输出格式即帧率","children":[]},{"level":2,"title":"动态柱状图","slug":"动态柱状图","link":"#动态柱状图","children":[]},{"level":2,"title":"直线图案例","slug":"直线图案例","link":"#直线图案例","children":[]},{"level":2,"title":"泡泡图案例","slug":"泡泡图案例","link":"#泡泡图案例","children":[]},{"level":2,"title":"点沿着方程曲线移动","slug":"点沿着方程曲线移动","link":"#点沿着方程曲线移动","children":[]}],"git":{"createdTime":1701091021000,"updatedTime":1701091912000,"contributors":[{"name":"claroja","email":"63183535@qq.com","commits":2}]},"readingTime":{"minutes":6.5,"words":1949},"filePathRelative":"数学/分析工具/matplotlib-artist-特殊内容/animation.md","localizedDate":"2023年11月27日","excerpt":"<h1> animation</h1>\\n<p>matplotlib中有两个创建动画的类<code>FuncAnimation</code>和<code>ArtistAnimation</code>. <code>FuncAnimation</code>是比较容易理解和使用更广泛的, 所以我们也使用它.</p>\\n<p>我们将自定义一个<code>animate</code>方法, 作为<code>FuncAnimation</code>的参数, <code>FuncAnimation</code>将根据<code>animate</code>的内容逐帧创建动画.</p>\\n<h2> API</h2>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
