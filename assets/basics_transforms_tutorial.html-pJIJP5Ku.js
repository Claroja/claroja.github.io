import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-XqA98pG8.js";const o={},e=t(`<h1 id="transforms-tutorial" tabindex="-1"><a class="header-anchor" href="#transforms-tutorial" aria-hidden="true">#</a> transforms_tutorial</h1><h2 id="transforms" tabindex="-1"><a class="header-anchor" href="#transforms" aria-hidden="true">#</a> TRANSFORMS</h2><p>数据个格式一般不是最终的训练需要的, 所以需要使用<code>torchvision.transforms</code>提供的方法进行转换. <code>TorchVision</code>有两个参数:</p><ol><li><code>transform</code>转换特征</li><li><code>target_transform</code>转换标签 二者都接收一个可调用的对象. <code>FashionMNIST</code>中的特征是PIL Image格式, 标签是整型.为了训练, 我们需要将特征转换为normalized tensors, 将标签转换为one-hot encoded tensors.</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets
<span class="token keyword">from</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> ToTensor<span class="token punctuation">,</span> Lambda

ds <span class="token operator">=</span> datasets<span class="token punctuation">.</span>FashionMNIST<span class="token punctuation">(</span>
    root<span class="token operator">=</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span>
    train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    transform<span class="token operator">=</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    target_transform<span class="token operator">=</span>Lambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> y<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">.</span>scatter_<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="totensor" tabindex="-1"><a class="header-anchor" href="#totensor" aria-hidden="true">#</a> ToTensor()</h2><p><code>ToTensor</code>将PIL <code>Image</code>或NumPy <code>ndarray</code>转换为<code>FloatTensor</code>, 并将图片的像素标准化到[0,1]</p><h2 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda" aria-hidden="true">#</a> Lambda()</h2><p>我们定义了有一个将integer转换为one-hot编码的tensor. 首先创建一个长度为10(和我们标签的种类数量相同)的,初始值为0的tensor. 然后调用<code>scatter_</code>方法将y对应位置上的值设置为1</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>target_transform <span class="token operator">=</span> Lambda<span class="token punctuation">(</span><span class="token keyword">lambda</span> y<span class="token punctuation">:</span> 
    torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
    scatter_<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token operator">=</span>torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://pytorch.org/tutorials/beginner/basics/transforms_tutorial.html https://pytorch.org/vision/stable/transforms.html</p>`,11),p=[e];function c(r,i){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","basics_transforms_tutorial.html.vue"]]);export{d as default};
