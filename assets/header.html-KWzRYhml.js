const e=JSON.parse('{"key":"v-50c62736","path":"/%E6%9C%AA%E5%88%86%E7%B1%BB/header.html","title":"header","lang":"zh-CN","frontmatter":{"description":"header requests的Header Accept: 客户端能够处理的内容类型.Accept: text/html表示客户端可以处理服务端返回的text/html(也就是html文档). 如果服务器无法返回text/html类型的数据, 则会返回406(non acceptable). 通配符*表示任意类型, 例如:Accept: */*表示客户端可以处理任意类型. Accept-Encoding表示客户端能够处理的压缩类型. Accept-Language表示客户端能够处理的语言, 比如Accept-Encoding: zh-CN,zh;q=0.8 Accept_Charset表示客户端支持的字符集. Cache-Control: 控制客户端是从缓存读取资源还是从服务器读取资源 Cookie: 由之前服务器使用set cookie设置的cookie信息 Connection: 浏览器与服务器的连接类型. 比如keep-alive表示当网页打开完成后, 连接会不关闭, 如果客户端再次访问服务器的网页, 会复用这个连接 Content-Type: 指明body中的类型, 比如:Content-Type: application/x-www-form-urlencoded Host: 服务器的域名和端口, 如果为80端口, 则可以省略端口. Referer: 客户端告诉服务器是从哪个页面链接过来的 User-Agent: 客户端的操作系统和浏览器信息","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E6%9C%AA%E5%88%86%E7%B1%BB/header.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"header"}],["meta",{"property":"og:description","content":"header requests的Header Accept: 客户端能够处理的内容类型.Accept: text/html表示客户端可以处理服务端返回的text/html(也就是html文档). 如果服务器无法返回text/html类型的数据, 则会返回406(non acceptable). 通配符*表示任意类型, 例如:Accept: */*表示客户端可以处理任意类型. Accept-Encoding表示客户端能够处理的压缩类型. Accept-Language表示客户端能够处理的语言, 比如Accept-Encoding: zh-CN,zh;q=0.8 Accept_Charset表示客户端支持的字符集. Cache-Control: 控制客户端是从缓存读取资源还是从服务器读取资源 Cookie: 由之前服务器使用set cookie设置的cookie信息 Connection: 浏览器与服务器的连接类型. 比如keep-alive表示当网页打开完成后, 连接会不关闭, 如果客户端再次访问服务器的网页, 会复用这个连接 Content-Type: 指明body中的类型, 比如:Content-Type: application/x-www-form-urlencoded Host: 服务器的域名和端口, 如果为80端口, 则可以省略端口. Referer: 客户端告诉服务器是从哪个页面链接过来的 User-Agent: 客户端的操作系统和浏览器信息"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-27T13:17:01.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2023-11-27T13:17:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"header\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-27T13:17:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"requests的Header","slug":"requests的header","link":"#requests的header","children":[]},{"level":2,"title":"response的Header","slug":"response的header","link":"#response的header","children":[]}],"git":{"createdTime":1701091021000,"updatedTime":1701091021000,"contributors":[{"name":"claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.58,"words":475},"filePathRelative":"未分类/header.md","localizedDate":"2023年11月27日","excerpt":"<h1> header</h1>\\n<h2> requests的Header</h2>\\n<ol>\\n<li><code>Accept</code>: 客户端能够处理的内容类型.<code>Accept: text/html</code>表示客户端可以处理服务端返回的<code>text/html</code>(也就是html文档). 如果服务器无法返回<code>text/html</code>类型的数据, 则会返回406(non acceptable). 通配符<code>*</code>表示任意类型, 例如:<code>Accept: */*</code>表示客户端可以处理任意类型.</li>\\n<li><code>Accept-Encoding</code>表示客户端能够处理的压缩类型.</li>\\n<li><code>Accept-Language</code>表示客户端能够处理的语言, 比如<code>Accept-Encoding: zh-CN,zh;q=0.8</code></li>\\n<li><code>Accept_Charset</code>表示客户端支持的字符集.</li>\\n<li><code>Cache-Control</code>: 控制客户端是从缓存读取资源还是从服务器读取资源</li>\\n<li><code>Cookie</code>: 由之前服务器使用<code>set cookie</code>设置的cookie信息</li>\\n<li><code>Connection</code>: 浏览器与服务器的连接类型. 比如<code>keep-alive</code>表示当网页打开完成后, 连接会不关闭, 如果客户端再次访问服务器的网页, 会复用这个连接</li>\\n<li><code>Content-Type</code>: 指明body中的类型, 比如:<code>Content-Type: application/x-www-form-urlencoded</code></li>\\n<li><code>Host</code>: 服务器的域名和端口, 如果为80端口, 则可以省略端口.</li>\\n<li><code>Referer</code>: 客户端告诉服务器是从哪个页面链接过来的</li>\\n<li><code>User-Agent</code>: 客户端的操作系统和浏览器信息</li>\\n</ol>","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
