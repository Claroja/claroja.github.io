import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as c,c as t,a as n,b as s,d as e,e as o}from"./app-XqA98pG8.js";const d={},l=o(`<h1 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> import</h1><h2 id="module" tabindex="-1"><a class="header-anchor" href="#module" aria-hidden="true">#</a> module</h2><p>一个<code>module</code>拥有一个命名空间(namespace),包含了各种各种各样的python对象, 其他的module可以导入, 以复用.</p><h3 id="命名空间" tabindex="-1"><a class="header-anchor" href="#命名空间" aria-hidden="true">#</a> 命名空间</h3><p>我们没有直接调用<code>pi</code>, 而是调用<code>math.pi</code>, 这里<code>math</code>就是<code>namespace</code>, 通过它将所有的属性在<code>math</code>的空间下. 可以通过<code>dir()</code>来查看命名空间下所有的属性.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math
math<span class="token punctuation">.</span>pi  <span class="token comment"># 3.141592653589793</span>
<span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># [&#39;__annotations__&#39;, &#39;__builtins__&#39;, ..., &#39;math&#39;], global namespace全局的命名空间</span>
<span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># {&#39;__name__&#39;: &#39;__main__&#39;, ... ,&#39;pi&#39;: 3.141592653589793}, 详细的全局命名空间</span>
<span class="token builtin">dir</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span>  <span class="token comment"># [&#39;__doc__&#39;, ..., &#39;nan&#39;, &#39;pi&#39;, &#39;pow&#39;, ...], math namespace math的命名空间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接导入<code>math</code>的属性<code>pi</code>, 此时<code>pi</code>在global namespace空间中.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> math <span class="token keyword">import</span> pi
pi  <span class="token comment"># 3.141592653589793</span>
<span class="token punctuation">[</span><span class="token string">&#39;__annotations__&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">&#39;__spec__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pi&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="别名" tabindex="-1"><a class="header-anchor" href="#别名" aria-hidden="true">#</a> 别名</h3><p>可以使用<code>as</code>给导入的modules或attributes取别名</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math <span class="token keyword">as</span> m
m<span class="token punctuation">.</span>pi  <span class="token comment"># 3.141592653589793</span>
<span class="token keyword">from</span> math <span class="token keyword">import</span> pi <span class="token keyword">as</span> PI
PI  <span class="token comment"># 3.141592653589793</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>: module的命名空间可以通过<code>.__dict__()</code>来访问, 而管局的命名空间, 可以通过<code>globals()</code>来访问:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math
math<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span><span class="token string">&quot;pi&quot;</span><span class="token punctuation">]</span>  <span class="token comment"># 3.141592653589793</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="packages" tabindex="-1"><a class="header-anchor" href="#packages" aria-hidden="true">#</a> packages</h2><p>python定义了两种packages, <code>regular packages</code>和<code>namespace packages</code>.<code>regular packages</code>包含了<code>__init__.py</code>文件, 当<code>regular package</code>被<code>import</code>时, <code>__init__.py</code>文件将被执行.在<code>__init__.py</code>文件夹下, 可以添加一些代码和导入module.</p><h3 id="regular-package" tabindex="-1"><a class="header-anchor" href="#regular-package" aria-hidden="true">#</a> regular package</h3><p>在实际使用中, <code>regular package</code>是一个包含了python文件的文件夹, 可以使用<code>package</code>来组织<code>modules</code>. 该文件夹的根目录包含了<code>__init__.py</code>文件. <code>__init__.py</code>中可以写入<code>package</code>所有可导入的内容, 因此<code>__init__.py</code>就是该<code>package</code>的<code>module</code>形式, 我们在导入<code>package</code>文件时, 实际导入的就是<code>__init__.py</code>文件. 通常情况下, 当我们导入一个<code>package</code>时, 它的子<code>module</code>和子<code>package</code>没有被导入, 可以在<code>__init__.py</code>中加入子<code>module</code>和子<code>package</code>.</p><p>让我们创建一个名为<code>world</code>的<code>package</code>, 根目录是<code>world</code>, 二级目录是世界区域(非洲africa, 欧洲europe), 三级目录是国家(津巴布韦zimbabwe, 希腊greece, 挪威norway, 西班牙spain), 目录结构如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>world/
│
├── africa/
│   ├── __init__.py
│   └── zimbabwe.py
│
├── europe/
│   ├── __init__.py
│   ├── greece.py
│   ├── norway.py
│   └── spain.py
│
└── __init__.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个国家都会打印国家的名字, 注意:</p><ol><li>非洲africa的<code>__init__.py</code>文件没有导入任何东西</li><li>欧洲europe的<code>__init__.py</code>文件导入了希腊greece和挪威norway</li><li>世纪world的<code>__init__.py</code>文件导入了非洲africa</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## world/africa/__init__.py  (Empty file)</span>

<span class="token comment">## world/africa/zimbabwe.py</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;津巴布韦zimbabwe&quot;</span><span class="token punctuation">)</span>

<span class="token comment">## world/europe/__init__.py</span>
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> greece
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> norway

<span class="token comment">## world/europe/greece.py</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;希腊Greek&quot;</span><span class="token punctuation">)</span>

<span class="token comment">## world/europe/norway.py</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;挪威norway&quot;</span><span class="token punctuation">)</span>

<span class="token comment">## world/europe/spain.py</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;西班牙spain&quot;</span><span class="token punctuation">)</span>

<span class="token comment">## world/__init__.py</span>
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> africa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>单独导入package时, 只有在<code>package/__init__.py</code>中存在模块才可以直接调用, 因为<code>import package</code>本质就是<code>import package/__init__.py</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 1. 将world导入全局命名空间</span>
<span class="token keyword">import</span> world
<span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># [..., &#39;world&#39;] &#39;world&#39;加入了全局命名空间, 所以可以直接使用</span>
world  <span class="token comment"># &lt;module &#39;world&#39; from &#39;world/__init__.py&#39;&gt;, 注意world被当成了module, 而且指向的是__init__.py</span>

<span class="token comment">## 2. world的命名空间中只有africa, 因为world/__init__.py只导入了africa, 可以使用world.africa, 而不能使用world.europe</span>
<span class="token builtin">dir</span><span class="token punctuation">(</span>world<span class="token punctuation">)</span> <span class="token comment"># [..., &#39;africa&#39;]</span>
world<span class="token punctuation">.</span>africa  <span class="token comment"># &lt;module &#39;world.africa&#39; from &#39;world/africa/__init__.py&#39;&gt;</span>
world<span class="token punctuation">.</span>europe  <span class="token comment"># AttributeError: module &#39;world&#39; has no attribute &#39;europe&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>from</code>关键词后面的<code>package</code>不会被导入命名空间, 也就是说python不会运行<code>from</code>后面的<code>package/__init__.py</code>后面的module</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 通过绝对路径, 直接导入europe</span>
<span class="token keyword">from</span> world <span class="token keyword">import</span> europe
<span class="token comment">## 希腊greece</span>
<span class="token comment">## 挪威norway</span>
<span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># [..., &#39;europe&#39;] europe加进了全局的命名空间, 而world没有加入命名空间</span>
<span class="token builtin">dir</span><span class="token punctuation">(</span>world<span class="token punctuation">)</span> <span class="token comment"># NameError: name &#39;world&#39; is not defined</span>

<span class="token comment">## 1 因为&#39;europe/__init__.py&#39;中导入了希腊greece, 所以可以直接使用</span>
europe<span class="token punctuation">.</span>greece  <span class="token comment"># &lt;module &#39;world.europe.greece&#39; from &#39;world/europe/greece.py&#39;&gt;</span>

<span class="token comment">## 2 因为&#39;from world import europe&#39;, 所以欧洲europe可以通过world来获取了</span>
europe<span class="token punctuation">.</span>norway  <span class="token comment"># &lt;module &#39;world.europe.norway&#39; from &#39;world/europe/norway.py&#39;&gt;</span>

<span class="token comment">## 3 西班牙spain不在欧洲europe的&#39;__init__.py&#39;文件中, 所以不能直接引用</span>
europe<span class="token punctuation">.</span>spain  <span class="token comment"># AttributeError: module &#39;world.europe&#39; has no attribute &#39;spain&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>import</code>后面的<code>package</code>会导入命名空间, 也就是说python会运行<code>import</code>后面的<code>package/__init__.py</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 通过绝对路径, 直接导入spain</span>
<span class="token keyword">import</span> world<span class="token punctuation">.</span>europe<span class="token punctuation">.</span>spain  <span class="token comment"># 西班牙spain</span>
<span class="token comment">## 希腊greece</span>
<span class="token comment">## 挪威norway</span>
<span class="token comment">## 西班牙spain</span>

<span class="token builtin">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># [..., &#39;world&#39;] # world加入了全局命名空间, import后面的模块都会加入命名空间</span>
<span class="token builtin">dir</span><span class="token punctuation">(</span>world<span class="token punctuation">)</span>  <span class="token comment"># [..., &#39;africa&#39;, &#39;europe&#39;]  # africa是world本身具有的, europe是通过import绝对路径导入的</span>
<span class="token builtin">dir</span><span class="token punctuation">(</span>world<span class="token punctuation">.</span>europe<span class="token punctuation">)</span>  <span class="token comment"># [..., &#39;greece&#39;, &#39;norway&#39;, &#39;spain&#39;]  # greece和norway是europe本身具有的, spain是import 导入的</span>
world<span class="token punctuation">.</span>europe<span class="token punctuation">.</span>spain  <span class="token comment"># &lt;module &#39;world.europe.spain&#39; from &#39;world/europe/spain.py&#39;&gt;</span>

<span class="token keyword">from</span> world<span class="token punctuation">.</span>europe <span class="token keyword">import</span> norway  <span class="token comment"># 不会重复导入norway模块, 但是却将norway加入到了全局的命名空间中</span>
norway  <span class="token comment"># &lt;module &#39;world.europe.norway&#39; from &#39;world/europe/norway.py&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),r=n("strong",null,"总结",-1),u=n("code",null,"子packages",-1),m=n("code",null,"modules",-1),v=n("code",null,"__init__.py",-1),k=n("code",null,"requests",-1),b={href:"https://github.com/psf/requests/blob/v2.23.0/requests/__init__.py#L112",target:"_blank",rel:"noopener noreferrer"},h=o(`<h3 id="namespace-package" tabindex="-1"><a class="header-anchor" href="#namespace-package" aria-hidden="true">#</a> namespace package</h3><p>在没有<code>__init__.py</code>的时候, package的名字只起到了<code>namespace</code>的作用, 这就是<code>namespace package</code>的由来.</p><p>假设有一下的目录结构, <code>mod1.py</code>文件中有<code>foo()</code>方法, <code>mod2.py</code>中有<code>bar()</code>方法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pkg/
│
├── mod1.py/
├── mod2.py/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pkg  <span class="token comment"># 不能调用pkg.mod1, 因为pkg仅仅是一个路径</span>
<span class="token keyword">import</span> pkg<span class="token punctuation">.</span>mod1<span class="token punctuation">,</span> pkg<span class="token punctuation">.</span>mod2  <span class="token comment"># 导入两个模块, pkg仍然是路径</span>
<span class="token keyword">from</span> pkg <span class="token keyword">import</span> mod1  <span class="token comment"># 导入一个模块, pkg仍然是一个模块</span>
<span class="token keyword">from</span> pkg<span class="token punctuation">.</span>mod1 <span class="token keyword">import</span> foo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="绝对和相对导入" tabindex="-1"><a class="header-anchor" href="#绝对和相对导入" aria-hidden="true">#</a> 绝对和相对导入</h3><p>在<code> world/__init__.py</code>文件中, 有下列代码:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> africa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>相对导入:<code>from . import africa</code>中的<code>.</code>表示current package, 这句话可以理解为<code>从当前的package中导入subpackage africa</code></li><li>绝对导入:<code>from world import africa</code></li></ul>`,9),g={href:"https://www.python.org/dev/peps/pep-0008/#imports",target:"_blank",rel:"noopener noreferrer"},y={href:"https://realpython.com/absolute-vs-relative-python-imports/",target:"_blank",rel:"noopener noreferrer"},_=o(`<h2 id="import-path" tabindex="-1"><a class="header-anchor" href="#import-path" aria-hidden="true">#</a> import path</h2><p>可以通过<code>sys.path</code>来获得python导入包时搜索的路径, 它主要包含了3种:</p><ol><li>当前的python运行的current directory, 注意不是所运行python文件的路径</li><li>我们配置的<code>PYTHONPATH</code>环境变量</li><li>安装的第三方包installation-dependent directories</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>path
<span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 当前工作路径</span>
<span class="token string">&#39;D:\\\\Program Files\\\\Python310\\\\python310.zip&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D:\\\\Program Files\\\\Python310\\\\DLLs&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 默认的</span>
<span class="token string">&#39;D:\\\\Program Files\\\\Python310\\\\lib&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 默认的</span>
<span class="token string">&#39;D:\\\\Program Files\\\\Python310&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 默认的</span>
<span class="token string">&#39;E:\\\\code\\\\aitrainer\\\\.env&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 默认的</span>
<span class="token string">&#39;E:\\\\code\\\\aitrainer\\\\.env\\\\lib\\\\site-packages&#39;</span> <span class="token comment"># 第三方包</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>:上面并没有<code>PYTHONPATH</code>, 因为我们并没有设置. 当我们使用<code>os.environ[&#39;PYTHONPATH&#39;]</code>, 会报错. 可以通过<code>export PYTHONPATH=&quot;\${PYTHONPATH}:/my/other/path&quot;</code>来设置.</p><p>python会按照以上顺序, 来寻找所导入的包, 所以注意在工作目录下自己创建的module和package不要使用内置的和第三方的名称, 否则会被覆盖.</p><p>假设有如下的目录结构:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>package/
│
├── module_A.py
└── run_package.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>module_A.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;module_A&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>run_package.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> module_A
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    module_A<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>run_package.py</code>通过绝对位置引入<code>module_A.py</code>, 意为着<code>module_A</code>必须在<code>import path</code>中.幸运的是, 程序的运行目录就是当前的目录.但是, 如果其他人想要直接使用<code>package</code>而将他直接复制到他们的工程下, 就会出现问题. 比如将目录改成如下结构:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>other/
│
├── package/
│   ├── module_A.py
│   └── run_package.py
│
└── cli.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cli.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> package<span class="token punctuation">.</span>run_package <span class="token keyword">import</span> main
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们运行<code>python cli.py</code>会报错, 因为, 我们在运行<code>cli.py</code>时, 改变了工作目录(<code>cli.py</code>所在的路径是<code>other/</code>), 进而改变了<code>import path</code>. <code>module_A</code>现在不在<code>other/</code>的工作目录下, 既不在<code>import path</code>下.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python cli.py
<span class="token comment">## ModuleNotFoundError: No module named &#39;module_A&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个解决办法是, 在<code>run_package.py</code>中添加如下的代码, 手动修改<code>import path</code>. 也就说将<code>other/package</code>路径也加入到了<code>import path</code>中. 现在的<code>import path</code>中既含有<code>cli.py</code>的路径<code>other/</code>, 也还有<code>run_package.py, module_A.py</code>的路径<code>other/package</code>.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> sys
<span class="token keyword">import</span> pathlib
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>pathlib<span class="token punctuation">.</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 或者 sys.path.append(str(pathlib.Path(__file__).parent)</span>
<span class="token comment">## __file__  # other\\package\\run_package.py</span>
<span class="token comment">## pathlib.Path(__file__)  # other\\package\\run_package.py</span>
<span class="token comment">## pathlib.Path(__file__).parent  # other\\package</span>
<span class="token keyword">import</span> module_A
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外一种解决方法是, 使用相对路径, 修改<code>run_package.py</code>.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> module_A
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但使用相对路径后, 我们就不能直接再运行<code>run_package.py</code>了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python ./package/module_A.py  <span class="token comment"># ImportError: attempted relative import with no known parent package</span>
<span class="token comment">## 即使进入到package/路径下也不行</span>
<span class="token builtin class-name">cd</span> package
python ./module_A.py  <span class="token comment"># ImportError: attempted relative import with no known parent package</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要既能被其他人使用, 又可以自己运行package, 可以使用<code>try...except</code>方法. 修改<code>run_package.py</code>的相关方法.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> module_A
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">import</span> module_A

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而更建议的方式是安装本地的package. 当使用<code>pip</code>命令从<code>PyPI</code>上安装package时, package可以被所有的脚本使用. 当然我们也可以在本地安装package. 创建本地的package, 首先需要创建两个文件:</p><ol><li><code>setup.cfg</code><code>name</code>和<code>version</code>可以任意指定, 建议<code>name</code>使用<code>local_</code>开头, 以区分本地和网络的安装</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">[</span>metadata<span class="token punctuation">]</span>
name <span class="token operator">=</span> local_structure
version <span class="token operator">=</span> <span class="token number">0.1</span><span class="token number">.0</span>

<span class="token punctuation">[</span>options<span class="token punctuation">]</span>
packages <span class="token operator">=</span> package
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>setup.py</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>setuptools<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后运行<code>pip</code>安装命令, 这个命令将会把包安装到系统中, 可以在<code>import path</code>中看到.这样就不需要关系模块的路径, 相对引入等问题. <code>-e</code>(editable)指我们可以直接更改安装好的源码, 而不需要重新编辑, 重新安装包.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pip <span class="token function">install</span> <span class="token parameter variable">-e</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装好后, 我们就可以在任意路径下的脚本中使用:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## Local imports</span>
from package <span class="token function">import</span> module_A
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>TIPS</strong>: 脚本(script)意为着可以运行(run) 包(library)意为着可以被引入(imported)</p><h2 id="resource-import" tabindex="-1"><a class="header-anchor" href="#resource-import" aria-hidden="true">#</a> Resource Import</h2><p>有些时候开发的package中可能包含一些数据, 图片文件, 这时会遇到一些问题:</p><ol><li>路径问题, 用户运行的路径和开发路径不同, 一些情况下可以通过package的<code>__file__</code>和<code>__path__</code>来解决</li><li>你的package可能在zip压缩文件中</li></ol><p>python 3.7之后提供了<code>importlib.resources</code>包来解决这些问题.<code>resource</code>表示package中的文件.之前的版本如果想使用, 需要首先安装<code>importlib_resources</code>, 可以写如下的代码:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> importlib <span class="token keyword">import</span> resources
<span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>
    <span class="token keyword">import</span> importlib_resources <span class="token keyword">as</span> resources
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>package/
│
├── resources/
│   └── test.txt
│
└── main.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>main.py</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> importlib <span class="token keyword">import</span> resources
<span class="token keyword">with</span> resources<span class="token punctuation">.</span>path<span class="token punctuation">(</span><span class="token string">&quot;book.resources&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> path<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们在其他目录导入<code>package.main</code>模块时<code>from book import main</code>即可打印出<code>text.txt</code>的绝对路径<code>E:\\code\\test_python\\book\\resources\\test.txt</code>. 另外<code>resources</code>还提供了<code>open_text()</code>和<code>open_binary()</code>方法, 等价于<code>open()</code>方法.</p><h2 id="动态导入" tabindex="-1"><a class="header-anchor" href="#动态导入" aria-hidden="true">#</a> 动态导入</h2><p><code>import</code>关键字实际上调用了<code>importlib</code> package. 下面的例子中<code>importlib.import_module(&quot;module_name&quot;)</code>和<code>import module_name</code>效果一样, 需要注意的是前者传入的参数是字符串类型.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> importlib
module_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Name of module? &quot;</span><span class="token punctuation">)</span>
module <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span>module_name<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="import原理" tabindex="-1"><a class="header-anchor" href="#import原理" aria-hidden="true">#</a> import原理</h2><p>当我们使用<code>import</code>关键字时, 其实是执行了</p><ol><li>python解释器首先检查<code>sys.modules</code>是否已经包含了相关的<code>module</code>, 如果有跳过.如果没有, 则执行2</li><li>使用<code>finders</code>来查到, 查找的顺序是: built-in modules-&gt; frozen modules -&gt; import path(sys.path) 2.1 当前文件夹的下 2.2 <code>PYTHONPATH</code>环境变量 2.3 Other, installation-dependent directories</li><li>使用<code>loader</code>来加载, <code>loader</code>会根据不同的类型(built-in, frozen...)来加载</li><li>绑定命名空间</li></ol><p>当使用<code>import</code>时, 上述四步会自动执行, 而当我们使用<code>importlib</code>时, 只自动执行了前三步, 我们要手动给模块指定变量或命名空间.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> math <span class="token keyword">import</span> pi <span class="token keyword">as</span> PI
PI  <span class="token comment"># 3.141592653589793</span>


<span class="token keyword">import</span> importlib
_tmp <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">)</span>
PI <span class="token operator">=</span> _tmp<span class="token punctuation">.</span>pi
<span class="token keyword">del</span> _tmp
PI  <span class="token comment"># 3.141592653589793</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意, 即使仅仅引入了module的一个attribute, 整个module也被执行和加载了. 只不过是其他的attribute没有被挂到命名空间里, 可以使用<code>sys.modules</code>来验证.<code>sys.modules</code>包含了所有导入的模块.(每次导入mudule时都会检查<code>sys.modules</code>以免重复导入)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> math <span class="token keyword">import</span> pi
pi <span class="token comment"># 3.141592653589793</span>

<span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cos<span class="token punctuation">(</span>pi<span class="token punctuation">)</span>  <span class="token comment"># -1.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reloading-modules" tabindex="-1"><a class="header-anchor" href="#reloading-modules" aria-hidden="true">#</a> Reloading Modules</h2><p>假设我们新建了<code>number.py</code>, 并定义了变量:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## number.py</span>
answer <span class="token operator">=</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在python终端里导入, 并输出</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> number
number<span class="token punctuation">.</span>answer  <span class="token comment"># 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不关闭python终端, 修改<code>number.py</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## number.py</span>
answer <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在python终端中重新导入, 输出结果仍然是0. 这时因为每次<code>import</code>导入<code>mudule</code>时都会检查<code>sys.modules</code>,如果有就不导入, 以免重复导入</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> number
number<span class="token punctuation">.</span>answer  <span class="token comment"># 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想实现热更新, 则需要<code>importlib.reload()</code>方法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> importlib
importlib<span class="token punctuation">.</span><span class="token builtin">reload</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>
number<span class="token punctuation">.</span>answer  <span class="token comment"># 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://realpython.com/python-import/</p>`,68);function w(f,x){const a=i("ExternalLinkIcon");return c(),t("div",null,[l,n("p",null,[r,s(" 建议将"),u,s("和子"),m,s("都在"),v,s("文件中导入, 这样对使用者会更友好. 可以参考"),k,s("的"),n("a",b,[s("例子"),e(a)])]),h,n("p",null,[n("a",g,[s("PEP 8 style guide"),e(a)]),s("建议使用绝对路径导入. 更详细的比较可以参考"),n("a",y,[s("Absolute vs Relative Imports in Python"),e(a)])]),_])}const A=p(d,[["render",w],["__file","python_import.html.vue"]]);export{A as default};
