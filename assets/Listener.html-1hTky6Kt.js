import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as e,f as t,b as n,d as o,a as p}from"./app-7knaTE3M.js";const c={},l=n("h1",{id:"mouseevent",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mouseevent","aria-hidden":"true"},"#"),o(" mouseEvent")],-1),i=n("p",null,"监听器：专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象.",-1),r=p(`<h3 id="servlet-监听器" tabindex="-1"><a class="header-anchor" href="#servlet-监听器" aria-hidden="true">#</a> Servlet 监听器：</h3><p>Servlet 规范中定义的一种特殊类，用于监听<code>ServletContext</code>, <code>HttpSession</code> 和 <code>ServletRequest</code> 等域对象的创建与销毁事件，以及属性发生修改的事件。</p><h4 id="监听域对象的创建和销毁" tabindex="-1"><a class="header-anchor" href="#监听域对象的创建和销毁" aria-hidden="true">#</a> 监听域对象的创建和销毁</h4><p>监听 <code>ServletContext</code>, <code>HttpSession</code>, <code>HttpServletRequest</code> 这三个对象的创建和销毁事件的监听器, 下面代码以<code>ServletContextListener</code>为例. 最常用, 在web工程启动时做初始化的工作, 比如创建数据库连接池, 创建IOC容器, 读取初始化参数 创建步骤:</p><ol><li>实现<code>ServletContextListener</code>接口</li><li><code>xml</code>中配置</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">claroja</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContextEvent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletContextListener</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServletContextListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ServletContext 对象创建&quot;</span><span class="token operator">+</span>servletContextEvent<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ServletContext 对象销毁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>claroja.HelloServletContextListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="域对象中属性的改变事件监听器" tabindex="-1"><a class="header-anchor" href="#域对象中属性的改变事件监听器" aria-hidden="true">#</a> 域对象中属性的改变事件监听器</h4><p><code>ServletContextAttributeListener</code> &amp; <code>HttpSessionAttributeListener</code> &amp; <code>ServletRequestAttributeListener</code> 都定义了三个方法来处理被监听对象中的属性的增加，删除和替换的事件.</p><h4 id="session-绑定的事件监听器" tabindex="-1"><a class="header-anchor" href="#session-绑定的事件监听器" aria-hidden="true">#</a> Session 绑定的事件监听器</h4><p>保存在 Session 域中的对象可以有多种状态：</p><ul><li>绑定到 Session 中</li><li>从 Session 中解除绑定</li><li>随 Session 对象持久化</li><li>随 Session 对象从一个存储设备中恢复</li></ul><p>两个特殊的监听器接口<code>HttpSessionBindingListener</code>和<code>HttpSessionActivationListener</code>来监听这些事件 实现这两个接口的类不需要 web.xml 文件中进行注册</p><p>详细代码参考 javaweb/demo8</p>`,14);function u(d,v){return a(),e("div",null,[l,i,t("more"),r])}const b=s(c,[["render",u],["__file","Listener.html.vue"]]);export{b as default};
