import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as e,c as n,a as i}from"./app-7knaTE3M.js";const s={},t=i(`<h1 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h1><ol><li>语法</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>type function_name (parameter type list){
	declarations
	statements
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>函数的类型(type)就是函数的返回值类型,如果没有返回值,就使用关键字<code>void</code>.</li><li>参数类表(parameter type list)描述了调用函数时传递给函数的参数个数和类型,如果不传递参数就用<code>void</code>.</li><li>把函数定义中的参数称为形式参数(formal parameter),用以强调它作为占位符的角色,在调用函数时传递给函数的实际值要传递给形式参数.</li></ol><h1 id="函数原型" tabindex="-1"><a class="header-anchor" href="#函数原型" aria-hidden="true">#</a> 函数原型</h1><ol><li>函数应该先声明后使用.函数声明语法使用函数原型(function prototype).函数原型告诉编译器传递给函数的参数的个数和类型以及返回值的类型. <code>type function_name (parameter type list);</code></li><li>参数类型表通常是用逗号分隔开的类型列表.在表中可以没有标识符,标识符不会影响原型.例如<code>void f(char c, int i);</code>等价于<code>void f(char, int);</code></li><li>如果函数没有参数,就使用关键字<code>void</code>,如果函数没有返回值也是用关键字<code>void</code></li><li>函数的参数个数是不确定的,name就用省略号(...)</li><li>函数原型可使得编译器彻底地检查代码.强制转换传递给参数的值.例如,函数声明的时候,限定传入的参数是double类型,但是传进去了一个int类型,这个int类型的参数会强制转换为double类型.</li></ol><h1 id="函数编写次序" tabindex="-1"><a class="header-anchor" href="#函数编写次序" aria-hidden="true">#</a> 函数编写次序</h1><ol><li>把#include和#define放在文件头部</li><li>枚举类型和结构类型</li><li>函数原型列表</li><li>main()函数</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">float</span> a<span class="token punctuation">,</span><span class="token keyword">float</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token operator">?</span>a<span class="token operator">:</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>当返回值类型和函数定义类型不一致时，以函数定义类型为准，如上例，返回浮点型，而定义为整形，则会强制转换为整形。</li><li>当不需要返回值的时候，则在函数定义时用void声明</li><li>C语言中不能在函数中定义函数，既没有闭包1</li></ol>`,10),l=[t];function o(c,d){return e(),n("div",null,l)}const u=a(s,[["render",o],["__file","1函数.html.vue"]]);export{u as default};
