import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,a as n,b as s,d as l,e as a}from"./app-jdLxCr9I.js";const i={},d=a(`<h1 id="独热编码-onehotencoder" tabindex="-1"><a class="header-anchor" href="#独热编码-onehotencoder" aria-hidden="true">#</a> 独热编码(OneHotEncoder)</h1><p>处理类别间不具有大小关系的特征。例如血型，一共4个值，独热编码将其变成4维的稀疏向量。独热编码的特征向量只有一维取值为1，其余为0。</p><p>缺点是它处理不好类别取值多的特征，类别数越大会带来过很多列的稀疏特征。对于类别取值较多的情况要注意通过特征选择降低维度。</p><h2 id="pandas" tabindex="-1"><a class="header-anchor" href="#pandas" aria-hidden="true">#</a> pandas</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;BloodType&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;AB&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;O&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>data<span class="token punctuation">,</span> dummy_na<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment">#    BloodType_A  BloodType_AB  BloodType_B  BloodType_O  BloodType_nan</span>
<span class="token comment"># 0            1             0            0            0              0</span>
<span class="token comment"># 1            0             1            0            0              0</span>
<span class="token comment"># 2            0             0            0            1              0</span>
<span class="token comment"># 3            0             0            1            0              0</span>
<span class="token comment"># 4            0             0            0            0              1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),r={id:"category-encoders",tabindex:"-1"},u=n("a",{class:"header-anchor",href:"#category-encoders","aria-hidden":"true"},"#",-1),k={href:"https://contrib.scikit-learn.org/category_encoders/index.html",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">import</span> category_encoders <span class="token keyword">as</span> ce
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;BloodType&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;AB&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;O&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

ce<span class="token punctuation">.</span>OneHotEncoder<span class="token punctuation">(</span>cols<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;BloodType&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> use_cat_names<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token comment">#    BloodType_A  BloodType_AB  BloodType_O  BloodType_B  BloodType_nan</span>
<span class="token comment"># 0            1             0            0            0              0</span>
<span class="token comment"># 1            0             1            0            0              0</span>
<span class="token comment"># 2            0             0            1            0              0</span>
<span class="token comment"># 3            0             0            0            1              0</span>
<span class="token comment"># 4            0             0            0            0              1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✨功能上是一致的, 区别在于:</p><ol><li>label encoder是给目标类别编码的, 所以输入的数据形状是一维的, (n_samples,)</li><li>ordinal encoder是给特征类别编码的, 所以输入的数据形状是多维的, (n_samples, n_features)</li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ol><li>https://datascience.stackexchange.com/questions/39317/difference-between-ordinalencoder-and-labelencoder</li><li>https://www.cnblogs.com/dangui/p/15836197.html</li></ol>`,5);function v(_,b){const e=o("ExternalLinkIcon");return p(),c("div",null,[d,n("h2",r,[u,s(),n("a",k,[s("category_encoders"),l(e)])]),m])}const g=t(i,[["render",v],["__file","3_1_2特征编码_OneHot.html.vue"]]);export{g as default};
