import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-YE2Hltoy.js";const p={},e=t(`<h1 id="epoll" tabindex="-1"><a class="header-anchor" href="#epoll" aria-hidden="true">#</a> epoll</h1><p>1.Linux2.6出现epoll,西能最好的多路I/O就绪通知方法 2.epoll同时支持水平触发和边缘触发(只触发1次,再发生变化不会告知) 3.使用mmap技术,省去了fd在系统调用时复制的开销 4.epoll采用事件就绪通知方式,类似于callback机制</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>select.epoll([sizehint=-1])</td><td>返回epoll对象</td></tr><tr><td>epoll.poll(timeout=-1[, maxevnets=-1])</td><td>等待事件，timeout(float)的单位是秒（second）</td></tr><tr><td>epoll.close()</td><td>关闭epoll对象的文件描述符。</td></tr><tr><td>epoll.fileno</td><td>返回control fd的文件描述符number。</td></tr><tr><td>epoll.fromfd(fd)</td><td>用给予的fd来创建一个epoll对象。</td></tr><tr><td>epoll.register(fd[, eventmask])</td><td>在epoll对象中注册一个文件描述符。（如果文件描述符已经存在，将会引起一个IOError）</td></tr><tr><td>epoll.modify(fd, eventmask)</td><td>修改一个已经注册的文件描述符。</td></tr><tr><td>epoll.unregister(fd)</td><td>注销一个文件描述符。</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> select
serSocket <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">)</span>
serSocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
epoll <span class="token operator">=</span> select<span class="token punctuation">.</span>epoll<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 注意win环境下是没有epoll的</span>
epoll<span class="token punctuation">.</span>register<span class="token punctuation">(</span>serSocket<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> select<span class="token punctuation">.</span>EPOLLIN<span class="token operator">|</span>select<span class="token punctuation">.</span>EPOLLET<span class="token punctuation">)</span>  <span class="token comment"># 读就绪|边缘触发</span>
connections <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
adress <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    epoll_list <span class="token operator">=</span> epoll<span class="token punctuation">.</span>epoll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># epoll 进行 fd 扫描的地方 扫描出能满足条件的套接字，添加进列表中</span>
    <span class="token keyword">for</span> fd<span class="token punctuation">,</span> events <span class="token keyword">in</span> epoll_list<span class="token punctuation">:</span>
        <span class="token keyword">if</span> fd <span class="token operator">==</span> serSocket<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#对epoll列表中的文件描述符、事件进行扫描</span>
            conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> serSocket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#表示有客户端连接了服务器套接字</span>
            connections<span class="token punctuation">[</span>conn<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> conn
            adress<span class="token punctuation">[</span>addr<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> addr
            epoll<span class="token punctuation">.</span>register<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> select<span class="token punctuation">.</span>EPOLLIN<span class="token operator">|</span>select<span class="token punctuation">.</span>EPOLLET<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> events <span class="token operator">==</span> select<span class="token punctuation">.</span>EPOLLIN<span class="token punctuation">:</span> <span class="token comment"># 读就绪,既客户端发来信息</span>
            recvData <span class="token operator">=</span> connections<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>recvData<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;%s %s&#39;</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">,</span> recvData<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                epoll<span class="token punctuation">.</span>unregister<span class="token punctuation">(</span>fd<span class="token punctuation">)</span>
                connections<span class="token punctuation">[</span>fd<span class="token punctuation">]</span><span class="token punctuation">.</span>colse<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://blog.csdn.net/wangbowj123/article/details/77885294</p>`,5),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","epoll.html.vue"]]);export{k as default};
