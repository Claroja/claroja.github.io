const n=JSON.parse('{"key":"v-42efedba","path":"/%E6%9C%AA%E5%88%86%E7%B1%BB/%E5%89%8D%E7%AB%AF/vue/vue%E5%AF%B9%E8%B1%A1/vue_reactive.html","title":"reactive","lang":"zh-CN","frontmatter":{"description":"reactive 基本使用 参考原文 reactive返回一个响应式的对象状态， 该响应式转换是“深度转换”——它会影响传递对象的所有嵌套property 响应式状态改变时视图会自动更新 &lt;script setup&gt; import {reactive, toRefs} from \\"vue\\" import _ from \\"lodash\\" let test = reactive({ a: \\"a\\", b: {bb: \\"b\\"}, c: [\\"c\\", \\"c\\"], }) /// 1. reactive中，当key对应的value是基本类型时， 直接变量赋值或解包都会失去响应式 // let a = test.a let {a} = test //此时a是字符串，不再是响应式 // let {a} = toRefs(test) //此时a是RefImpl是响应式 console.log(a, test.a, a === test.a) a = \\"aa\\" /// 2. reactive中，当key对应的value是对象时，变量赋值和解包都不会失去响应式 /// 2.1 字典{} // let b = test.b let {b} = test // 和上一行是等价的 console.log(b, test.b, b === test.b) // 地址引用, 所以b仍然是响应式 b.bb = \\"bb\\" // 当改变b.bb的值时，也就是更改了test.b.bb /// 2.2 列表[] // let c = test.c let {c} = test console.log(c, test.c, c === test.c) c.push(\\"c\\") setTimeout(() =&gt; { a = \\"aaa\\" b.bb = \\"bbb\\" c.push(\\"c\\") }, 1000) setTimeout(() =&gt; { b = {bbbb: \\"bbbb\\"} //直接赋值，普通对象，没有响应式 }, 2000) &lt;/script&gt; &lt;template&gt; {{ test.a }} &lt;br /&gt; {{ test.b }} &lt;br /&gt; {{ c }} &lt;/template&gt;","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E6%9C%AA%E5%88%86%E7%B1%BB/%E5%89%8D%E7%AB%AF/vue/vue%E5%AF%B9%E8%B1%A1/vue_reactive.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"reactive"}],["meta",{"property":"og:description","content":"reactive 基本使用 参考原文 reactive返回一个响应式的对象状态， 该响应式转换是“深度转换”——它会影响传递对象的所有嵌套property 响应式状态改变时视图会自动更新 &lt;script setup&gt; import {reactive, toRefs} from \\"vue\\" import _ from \\"lodash\\" let test = reactive({ a: \\"a\\", b: {bb: \\"b\\"}, c: [\\"c\\", \\"c\\"], }) /// 1. reactive中，当key对应的value是基本类型时， 直接变量赋值或解包都会失去响应式 // let a = test.a let {a} = test //此时a是字符串，不再是响应式 // let {a} = toRefs(test) //此时a是RefImpl是响应式 console.log(a, test.a, a === test.a) a = \\"aa\\" /// 2. reactive中，当key对应的value是对象时，变量赋值和解包都不会失去响应式 /// 2.1 字典{} // let b = test.b let {b} = test // 和上一行是等价的 console.log(b, test.b, b === test.b) // 地址引用, 所以b仍然是响应式 b.bb = \\"bb\\" // 当改变b.bb的值时，也就是更改了test.b.bb /// 2.2 列表[] // let c = test.c let {c} = test console.log(c, test.c, c === test.c) c.push(\\"c\\") setTimeout(() =&gt; { a = \\"aaa\\" b.bb = \\"bbb\\" c.push(\\"c\\") }, 1000) setTimeout(() =&gt; { b = {bbbb: \\"bbbb\\"} //直接赋值，普通对象，没有响应式 }, 2000) &lt;/script&gt; &lt;template&gt; {{ test.a }} &lt;br /&gt; {{ test.b }} &lt;br /&gt; {{ c }} &lt;/template&gt;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T13:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2023-11-25T13:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"reactive\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-25T13:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":2,"title":"ref和reactive转换","slug":"ref和reactive转换","link":"#ref和reactive转换","children":[]},{"level":2,"title":"lodash 结合","slug":"lodash-结合","link":"#lodash-结合","children":[]},{"level":2,"title":"易错点","slug":"易错点","link":"#易错点","children":[]},{"level":2,"title":"reactive与props","slug":"reactive与props","link":"#reactive与props","children":[]}],"git":{"createdTime":1700920018000,"updatedTime":1700920018000,"contributors":[{"name":"claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":3.05,"words":915},"filePathRelative":"未分类/前端/vue/vue对象/vue_reactive.md","localizedDate":"2023年11月25日","excerpt":"<h1> reactive</h1>\\n<h2> 基本使用</h2>\\n<p><a href=\\"https://v3.cn.vuejs.org/guide/reactivity-fundamentals.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考原文</a>\\n<code>reactive</code>返回一个响应式的对象状态，</p>\\n<ol>\\n<li>该响应式转换是“深度转换”——它会影响传递对象的所有嵌套property</li>\\n<li>响应式状态改变时视图会自动更新</li>\\n</ol>\\n<div class=\\"language-vue line-numbers-mode\\" data-ext=\\"vue\\"><pre class=\\"language-vue\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>script</span> <span class=\\"token attr-name\\">setup</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token script\\"><span class=\\"token language-javascript\\">\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span>reactive<span class=\\"token punctuation\\">,</span> toRefs<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"vue\\"</span>\\n<span class=\\"token keyword\\">import</span> _ <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"lodash\\"</span>\\n<span class=\\"token keyword\\">let</span> test <span class=\\"token operator\\">=</span> <span class=\\"token function\\">reactive</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">a</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"a\\"</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">b</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">bb</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"b\\"</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token literal-property property\\">c</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"c\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"c\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">/// 1. reactive中，当key对应的value是基本类型时， 直接变量赋值或解包都会失去响应式</span>\\n<span class=\\"token comment\\">// let a = test.a</span>\\n<span class=\\"token keyword\\">let</span> <span class=\\"token punctuation\\">{</span>a<span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> test <span class=\\"token comment\\">//此时a是字符串，不再是响应式</span>\\n<span class=\\"token comment\\">// let {a} = toRefs(test) //此时a是RefImpl是响应式</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span> test<span class=\\"token punctuation\\">.</span>a<span class=\\"token punctuation\\">,</span> a <span class=\\"token operator\\">===</span> test<span class=\\"token punctuation\\">.</span>a<span class=\\"token punctuation\\">)</span>\\na <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"aa\\"</span>\\n\\n<span class=\\"token comment\\">/// 2. reactive中，当key对应的value是对象时，变量赋值和解包都不会失去响应式</span>\\n<span class=\\"token comment\\">/// 2.1 字典{}</span>\\n<span class=\\"token comment\\">// let b = test.b</span>\\n<span class=\\"token keyword\\">let</span> <span class=\\"token punctuation\\">{</span>b<span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> test <span class=\\"token comment\\">// 和上一行是等价的</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">,</span> test<span class=\\"token punctuation\\">.</span>b<span class=\\"token punctuation\\">,</span> b <span class=\\"token operator\\">===</span> test<span class=\\"token punctuation\\">.</span>b<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 地址引用, 所以b仍然是响应式</span>\\nb<span class=\\"token punctuation\\">.</span>bb <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"bb\\"</span> <span class=\\"token comment\\">// 当改变b.bb的值时，也就是更改了test.b.bb</span>\\n\\n<span class=\\"token comment\\">/// 2.2 列表[]</span>\\n<span class=\\"token comment\\">// let c = test.c</span>\\n<span class=\\"token keyword\\">let</span> <span class=\\"token punctuation\\">{</span>c<span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">=</span> test\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>c<span class=\\"token punctuation\\">,</span> test<span class=\\"token punctuation\\">.</span>c<span class=\\"token punctuation\\">,</span> c <span class=\\"token operator\\">===</span> test<span class=\\"token punctuation\\">.</span>c<span class=\\"token punctuation\\">)</span>\\nc<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"c\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    a <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"aaa\\"</span>\\n    b<span class=\\"token punctuation\\">.</span>bb <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"bbb\\"</span>\\n    c<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">push</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"c\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">setTimeout</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    b <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">bbbb</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">\\"bbbb\\"</span><span class=\\"token punctuation\\">}</span> <span class=\\"token comment\\">//直接赋值，普通对象，没有响应式</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2000</span><span class=\\"token punctuation\\">)</span>\\n</span></span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>script</span><span class=\\"token punctuation\\">&gt;</span></span>\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>template</span><span class=\\"token punctuation\\">&gt;</span></span>\\n    {{ test.a }}\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>br</span> <span class=\\"token punctuation\\">/&gt;</span></span>\\n    {{ test.b }}\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>br</span> <span class=\\"token punctuation\\">/&gt;</span></span>\\n    {{ c }}\\n<span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>template</span><span class=\\"token punctuation\\">&gt;</span></span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}');export{n as data};
