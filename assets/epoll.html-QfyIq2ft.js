const e=JSON.parse('{"key":"v-a1ff440c","path":"/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3python/8%E8%AF%BB%E5%86%99(io)/%E5%9F%BA%E7%A1%80/epoll.html","title":"epoll","lang":"zh-CN","frontmatter":{"description":"epoll 1.Linux2.6出现epoll,西能最好的多路I/O就绪通知方法 2.epoll同时支持水平触发和边缘触发(只触发1次,再发生变化不会告知) 3.使用mmap技术,省去了fd在系统调用时复制的开销 4.epoll采用事件就绪通知方式,类似于callback机制 方法 描述 select.epoll([sizehint=-1]) 返回epoll对象 epoll.poll(timeout=-1[, maxevnets=-1]) 等待事件，timeout(float)的单位是秒（second） epoll.close() 关闭epoll对象的文件描述符。 epoll.fileno 返回control fd的文件描述符number。 epoll.fromfd(fd) 用给予的fd来创建一个epoll对象。 epoll.register(fd[, eventmask]) 在epoll对象中注册一个文件描述符。（如果文件描述符已经存在，将会引起一个IOError） epoll.modify(fd, eventmask) 修改一个已经注册的文件描述符。 epoll.unregister(fd) 注销一个文件描述符。","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3python/8%E8%AF%BB%E5%86%99(io)/%E5%9F%BA%E7%A1%80/epoll.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"epoll"}],["meta",{"property":"og:description","content":"epoll 1.Linux2.6出现epoll,西能最好的多路I/O就绪通知方法 2.epoll同时支持水平触发和边缘触发(只触发1次,再发生变化不会告知) 3.使用mmap技术,省去了fd在系统调用时复制的开销 4.epoll采用事件就绪通知方式,类似于callback机制 方法 描述 select.epoll([sizehint=-1]) 返回epoll对象 epoll.poll(timeout=-1[, maxevnets=-1]) 等待事件，timeout(float)的单位是秒（second） epoll.close() 关闭epoll对象的文件描述符。 epoll.fileno 返回control fd的文件描述符number。 epoll.fromfd(fd) 用给予的fd来创建一个epoll对象。 epoll.register(fd[, eventmask]) 在epoll对象中注册一个文件描述符。（如果文件描述符已经存在，将会引起一个IOError） epoll.modify(fd, eventmask) 修改一个已经注册的文件描述符。 epoll.unregister(fd) 注销一个文件描述符。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"epoll\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.26,"words":379},"filePathRelative":"4编程语言/3python/8读写(io)/基础/epoll.md","localizedDate":"2025年2月24日","excerpt":"<h1> epoll</h1>\\n<p>1.Linux2.6出现epoll,西能最好的多路I/O就绪通知方法\\n2.epoll同时支持水平触发和边缘触发(只触发1次,再发生变化不会告知)\\n3.使用mmap技术,省去了fd在系统调用时复制的开销\\n4.epoll采用事件就绪通知方式,类似于callback机制</p>\\n<table>\\n<thead>\\n<tr>\\n<th>方法</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>select.epoll([sizehint=-1])</td>\\n<td>返回epoll对象</td>\\n</tr>\\n<tr>\\n<td>epoll.poll(timeout=-1[, maxevnets=-1])</td>\\n<td>等待事件，timeout(float)的单位是秒（second）</td>\\n</tr>\\n<tr>\\n<td>epoll.close()</td>\\n<td>关闭epoll对象的文件描述符。</td>\\n</tr>\\n<tr>\\n<td>epoll.fileno</td>\\n<td>返回control fd的文件描述符number。</td>\\n</tr>\\n<tr>\\n<td>epoll.fromfd(fd)</td>\\n<td>用给予的fd来创建一个epoll对象。</td>\\n</tr>\\n<tr>\\n<td>epoll.register(fd[, eventmask])</td>\\n<td>在epoll对象中注册一个文件描述符。（如果文件描述符已经存在，将会引起一个IOError）</td>\\n</tr>\\n<tr>\\n<td>epoll.modify(fd, eventmask)</td>\\n<td>修改一个已经注册的文件描述符。</td>\\n</tr>\\n<tr>\\n<td>epoll.unregister(fd)</td>\\n<td>注销一个文件描述符。</td>\\n</tr>\\n</tbody>\\n</table>","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
