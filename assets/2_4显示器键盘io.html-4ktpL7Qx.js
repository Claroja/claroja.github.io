const t=JSON.parse(`{"key":"v-4f4e7d22","path":"/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c%E8%AF%AD%E8%A8%80/2%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2_4%E6%98%BE%E7%A4%BA%E5%99%A8%E9%94%AE%E7%9B%98io.html","title":"scanf","lang":"zh-CN","frontmatter":{"description":"include &lt;stdio.h&gt; 函数 描述 参数 返回 char *gets(char *s); 从标准输入读入字符，并保存到s指定的内存空间，直到出现换行符或读到文件结尾为止 s：字符串首地址 成功：读入的字符串,失败：NULL char *fgets(char *s, int size, FILE *stream); 从stream指定的文件内读入字符，保存到s所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size - 1个字符为止，最后会自动加上字符 '\\\\0' 作为字符串结束。 s：字符串size：指定最大读取字符串的长度（size - 1）stream：文件指针，如果读键盘输入的字符串，固定写为stdin 成功：成功读取的字符串；读到文件尾或出错： NULL int puts(const char *s); 标准设备输出s字符串，在输出完成后自动输出一个'\\\\n'。 s：字符串首地址 成功：非负数；失败：-1 int fputs(const char * str, FILE * stream); 将str所指定的字符串写入到stream指定的文件中， 字符串结束符 '\\\\0' 不写入文件。 str：字符串stream：文件指针，如果把字符串输出到屏幕，固定写为stdout 成功：0 失败：-1","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c%E8%AF%AD%E8%A8%80/2%E5%A4%8D%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/2_4%E6%98%BE%E7%A4%BA%E5%99%A8%E9%94%AE%E7%9B%98io.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"scanf"}],["meta",{"property":"og:description","content":"include &lt;stdio.h&gt; 函数 描述 参数 返回 char *gets(char *s); 从标准输入读入字符，并保存到s指定的内存空间，直到出现换行符或读到文件结尾为止 s：字符串首地址 成功：读入的字符串,失败：NULL char *fgets(char *s, int size, FILE *stream); 从stream指定的文件内读入字符，保存到s所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size - 1个字符为止，最后会自动加上字符 '\\\\0' 作为字符串结束。 s：字符串size：指定最大读取字符串的长度（size - 1）stream：文件指针，如果读键盘输入的字符串，固定写为stdin 成功：成功读取的字符串；读到文件尾或出错： NULL int puts(const char *s); 标准设备输出s字符串，在输出完成后自动输出一个'\\\\n'。 s：字符串首地址 成功：非负数；失败：-1 int fputs(const char * str, FILE * stream); 将str所指定的字符串写入到stream指定的文件中， 字符串结束符 '\\\\0' 不写入文件。 str：字符串stream：文件指针，如果把字符串输出到屏幕，固定写为stdout 成功：0 失败：-1"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"scanf\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.95,"words":585},"filePathRelative":"4编程语言/2c语言/2复合数据类型/2_4显示器键盘io.md","localizedDate":"2025年2月24日","excerpt":"<p><code>include &lt;stdio.h&gt;</code></p>\\n<table>\\n<thead>\\n<tr>\\n<th>函数</th>\\n<th>描述</th>\\n<th>参数</th>\\n<th>返回</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>char *gets(char *s);</td>\\n<td>从标准输入读入字符，并保存到s指定的内存空间，直到出现换行符或读到文件结尾为止</td>\\n<td>s：字符串首地址</td>\\n<td>成功：读入的字符串,失败：NULL</td>\\n</tr>\\n<tr>\\n<td>char *fgets(char *s, int size, FILE *stream);</td>\\n<td>从stream指定的文件内读入字符，保存到s所指定的内存空间，直到出现换行字符、读到文件结尾或是已读了size - 1个字符为止，最后会自动加上字符 '\\\\0' 作为字符串结束。</td>\\n<td>s：字符串size：指定最大读取字符串的长度（size - 1）stream：文件指针，如果读键盘输入的字符串，固定写为stdin</td>\\n<td>成功：成功读取的字符串；读到文件尾或出错： NULL</td>\\n</tr>\\n<tr>\\n<td>int puts(const char *s);</td>\\n<td>标准设备输出s字符串，在输出完成后自动输出一个'\\\\n'。</td>\\n<td>s：字符串首地址</td>\\n<td>成功：非负数；失败：-1</td>\\n</tr>\\n<tr>\\n<td>int fputs(const char * str, FILE * stream);</td>\\n<td>将str所指定的字符串写入到stream指定的文件中， 字符串结束符 '\\\\0'  不写入文件。</td>\\n<td>str：字符串stream：文件指针，如果把字符串输出到屏幕，固定写为stdout</td>\\n<td>成功：0 失败：-1</td>\\n</tr>\\n</tbody>\\n</table>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{t as data};
