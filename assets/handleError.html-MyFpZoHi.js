const e=JSON.parse('{"key":"v-de30541e","path":"/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3python/5%E6%8E%A7%E5%88%B6%E6%B5%81(flowControl)/%E5%BC%82%E5%B8%B8(exception)/handleError.html","title":"handleError","lang":"zh-CN","frontmatter":{"description":"handleError LBYL和EAFP 有两种应对error和exception的方法: 在error和exception发生前阻止, 比如使用if语句, C和GO中, 简称为Look before you leap (LBYL) if \\"possible_key\\" in data_dict: value = data_dict[\\"possible_key\\"] else: # Handle missing keys here... 在error和exception发生后处理, 比如使用try...except, C++,Java和Python, 简称为Easier to ask forgiveness than permission (EAFP) try: value = data_dict[\\"possible_key\\"] except KeyError: # Handle missing keys here...","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3python/5%E6%8E%A7%E5%88%B6%E6%B5%81(flowControl)/%E5%BC%82%E5%B8%B8(exception)/handleError.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"handleError"}],["meta",{"property":"og:description","content":"handleError LBYL和EAFP 有两种应对error和exception的方法: 在error和exception发生前阻止, 比如使用if语句, C和GO中, 简称为Look before you leap (LBYL) if \\"possible_key\\" in data_dict: value = data_dict[\\"possible_key\\"] else: # Handle missing keys here... 在error和exception发生后处理, 比如使用try...except, C++,Java和Python, 简称为Easier to ask forgiveness than permission (EAFP) try: value = data_dict[\\"possible_key\\"] except KeyError: # Handle missing keys here..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"handleError\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"LBYL和EAFP","slug":"lbyl和eafp","link":"#lbyl和eafp","children":[]},{"level":2,"title":"如何选择","slug":"如何选择","link":"#如何选择","children":[{"level":3,"title":"Avoiding Unnecessary Check Repetition","slug":"avoiding-unnecessary-check-repetition","link":"#avoiding-unnecessary-check-repetition","children":[]},{"level":3,"title":"Improving Readability and Clarity","slug":"improving-readability-and-clarity","link":"#improving-readability-and-clarity","children":[]},{"level":3,"title":"Avoiding Race Conditions","slug":"avoiding-race-conditions","link":"#avoiding-race-conditions","children":[]},{"level":3,"title":"Improving Your Code’s Performance","slug":"improving-your-code-s-performance","link":"#improving-your-code-s-performance","children":[]}]}],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":2.41,"words":724},"filePathRelative":"4编程语言/3python/5控制流(flowControl)/异常(exception)/handleError.md","localizedDate":"2025年2月24日","excerpt":"<h1> handleError</h1>\\n<h2> LBYL和EAFP</h2>\\n<p>有两种应对<code>error</code>和<code>exception</code>的方法:</p>\\n<ol>\\n<li>\\n<p>在<code>error</code>和<code>exception</code>发生前阻止, 比如使用<code>if</code>语句, <code>C</code>和<code>GO</code>中, 简称为Look before you leap (LBYL)</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">if</span> <span class=\\"token string\\">\\"possible_key\\"</span> <span class=\\"token keyword\\">in</span> data_dict<span class=\\"token punctuation\\">:</span>\\n    value <span class=\\"token operator\\">=</span> data_dict<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"possible_key\\"</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token comment\\"># Handle missing keys here...</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>在<code>error</code>和<code>exception</code>发生后处理, 比如使用<code>try...except</code>, <code>C++</code>,<code>Java</code>和<code>Python</code>, 简称为Easier to ask forgiveness than permission (EAFP)</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">try</span><span class=\\"token punctuation\\">:</span>\\n    value <span class=\\"token operator\\">=</span> data_dict<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"possible_key\\"</span><span class=\\"token punctuation\\">]</span>\\n<span class=\\"token keyword\\">except</span> KeyError<span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token comment\\"># Handle missing keys here...</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
