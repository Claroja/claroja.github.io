const n=JSON.parse(`{"key":"v-50bf3d87","path":"/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/5javascript/8%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5(promise)/async_await.html","title":"async&await","lang":"zh-CN","frontmatter":{"description":"async&amp;await async函数 函数的返回值为 promise 对象, 和.then很相似. //then async function main(){ //1. 如果返回值是一个非Promise类型的数据, 结果是成功的promise对象 // return 521; //2. 如果返回的是一个Promise对象, 结果是Promise对象 // return new Promise((resolve, reject) =&gt; { // // resolve('OK'); // reject('Error'); // }); //3. 抛出异常, 结果是失败的promise对象 throw \\"Oh NO\\"; } let result = main(); console.log(result);","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/5javascript/8%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5(promise)/async_await.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"async&await"}],["meta",{"property":"og:description","content":"async&amp;await async函数 函数的返回值为 promise 对象, 和.then很相似. //then async function main(){ //1. 如果返回值是一个非Promise类型的数据, 结果是成功的promise对象 // return 521; //2. 如果返回的是一个Promise对象, 结果是Promise对象 // return new Promise((resolve, reject) =&gt; { // // resolve('OK'); // reject('Error'); // }); //3. 抛出异常, 结果是失败的promise对象 throw \\"Oh NO\\"; } let result = main(); console.log(result);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"async&await\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"async函数","slug":"async函数","link":"#async函数","children":[]},{"level":2,"title":"await表达式","slug":"await表达式","link":"#await表达式","children":[]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[]}],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.32,"words":395},"filePathRelative":"4编程语言/5javascript/8同步异步(promise)/async&await.md","localizedDate":"2025年2月24日","excerpt":"<h1> async&amp;await</h1>\\n<h2> async函数</h2>\\n<p>函数的返回值为 promise 对象, 和<code>.then</code>很相似.</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">//then</span>\\n<span class=\\"token keyword\\">async</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//1. 如果返回值是一个非Promise类型的数据, 结果是成功的promise对象</span>\\n    <span class=\\"token comment\\">// return 521;</span>\\n    <span class=\\"token comment\\">//2. 如果返回的是一个Promise对象, 结果是Promise对象</span>\\n    <span class=\\"token comment\\">// return new Promise((resolve, reject) =&gt; {</span>\\n    <span class=\\"token comment\\">//     // resolve('OK');</span>\\n    <span class=\\"token comment\\">//     reject('Error');</span>\\n    <span class=\\"token comment\\">// });</span>\\n    <span class=\\"token comment\\">//3. 抛出异常, 结果是失败的promise对象</span>\\n    <span class=\\"token keyword\\">throw</span> <span class=\\"token string\\">\\"Oh NO\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">let</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\nconsole<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>result<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{n as data};
