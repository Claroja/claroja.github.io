import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-yeyEmHfz.js";const e={},p=t(`<h1 id="color" tabindex="-1"><a class="header-anchor" href="#color" aria-hidden="true">#</a> color</h1><h2 id="正则原理" tabindex="-1"><a class="header-anchor" href="#正则原理" aria-hidden="true">#</a> 正则原理</h2><h3 id="正则字符" tabindex="-1"><a class="header-anchor" href="#正则字符" aria-hidden="true">#</a> 正则字符</h3><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>配置除换行符(<code>\\n</code>)以外的字符, <code>re.search(&#39;1.3&#39;, &#39;foo123bar&#39;) # 123 </code></td></tr><tr><td><code>\\w</code></td><td>匹配字母或数字或下划线或汉字, <code>\\W</code>是取反, <code>re.search(&#39;ba[artz]&#39;, &#39;foobarqux&#39;) # bar</code></td></tr><tr><td><code>\\s</code></td><td>匹配空白字符(空格,制表符<code>\\t</code>,换行符<code>\\n</code>), <code>\\S</code>是取反</td></tr><tr><td><code>\\d</code></td><td>匹配数字<code>[0-9]</code>, <code>\\D</code>是取反</td></tr><tr><td><code>\\b</code></td><td>匹配单词的开始或结束, 可以理解为匹配非字符和数字(空格, 制表符<code>\\t</code>,换行符<code>\\n</code>,普通符号如<code>.</code>), <code>\\B</code>是取反</td></tr><tr><td><code>^</code></td><td>多行模式下匹配字符串的开始, 多行模式下可以理解位开始的<code>\\n</code></td></tr><tr><td><code>$</code></td><td>单行模式下匹配字符串的结束, 多行模式下可以理解为结尾的<code>\\n</code></td></tr><tr><td>例子:</td><td></td></tr></tbody></table><ol><li><p><code>\\ba\\w*\\b</code>匹配以字母a开头的单词——先是某个单词开始处(<code>\\b</code>)，然后是字母<code>a</code>,然后是任意数量的字母或数字(<code>\\w*</code>)，最后是单词结束处(<code>\\b</code>)。</p></li><li><p><code>^</code>与<code>$</code></p><ol><li><p>单行模式下(整个文本当成一个输入) 比如, 一个网站如果要求你填写的密码号必须为5位数字时，可以使用：<code>^\\d{5}$</code>. 如果不使用<code>^</code>和<code>$</code>的话，对于<code>\\d{5}</code>而言，使用这样的方法就只能保证字符串里包含5连续位数字，而不是整个字符串就是5位数字。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;^\\d{5}$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12345&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># match 严格的5位数字</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;^\\d{5}$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># not match  如果是6位则不匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\d{5}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># match 不加\`^\`和\`$\`, 则只要包含5位就可以</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>多行模式下(先对文本按行切分, 每一行当成一个输入) <code>^</code>和<code>$</code>的意义就变成了匹配行的开始处和结束处。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;^c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a\\nb\\nc&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># not match, 在单行模式下(默认), \`^c\`是指整个字符串(字符串中包含换行)的开始.</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?m)^c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a\\nb\\nc&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># match, 多行模式下, \`^c\`既可以指整个字符串的开始, 也可以指行的开始(\`\\n\`), 所以可以匹配.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><p>例子:</p><ol><li><code>.</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fooxbar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># fooxbar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo*bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo*bar</span>
<span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None 默认情况下\`.\`不能匹配\`\\n\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>\\b</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;foo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;foo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;foo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo bar baz&#39;</span><span class="token punctuation">)</span> <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo(bar)baz&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobarbaz&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数量限定符" tabindex="-1"><a class="header-anchor" href="#数量限定符" aria-hidden="true">#</a> 数量限定符</h3><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>重复0次或多次, 贪婪</td></tr><tr><td><code>+</code></td><td>重复1次或多次, 贪婪</td></tr><tr><td><code>?</code></td><td>重复0次或1次, 贪婪</td></tr><tr><td><code>*?</code></td><td>重复0次或多次, 懒惰</td></tr><tr><td><code>+?</code></td><td>重复1次或多次, 懒惰</td></tr><tr><td><code>??</code></td><td>重复0次或1次, 懒惰</td></tr><tr><td><code>{n}</code></td><td>重复n次</td></tr><tr><td><code>{n,}</code></td><td>重复n次或多次</td></tr><tr><td><code>{n,m}</code></td><td>重复n到m次</td></tr><tr><td><code>{,}</code></td><td>任意次</td></tr></tbody></table><p>例子:</p><ol><li><code>*</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-*bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foobar 零次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-*bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo-bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo-bar 一次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-*bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo--bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo--bar 两次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo.*bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;# foo $qux@grault % bar #&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 任意次匹配任意字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>+</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-+bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None 零次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-+bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo-bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo-bar 一次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-+bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo--bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo--bar 两次匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>?</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-?bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foobar 零次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-?bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo-bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo-bar 一次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-?bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo--bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None 两次匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>*?,+?,??</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;.*&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%&lt;foo&gt; &lt;bar&gt; &lt;baz&gt;%&#39;</span><span class="token punctuation">)</span> <span class="token comment"># &lt;foo&gt; &lt;bar&gt; &lt;baz&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正则表达式<code>&lt;.*&gt;</code>的含义:</p><ol><li><code>&lt;</code>匹配一个<code>&lt;</code>字符</li><li><code>.*</code>一系列的字符</li><li><code>&gt;</code>匹配一个<code>&gt;</code>字符 但是<code>&gt;</code>具体指哪一个呢?有三种情况:</li><li><code>foo</code>字符串后面的</li><li><code>bar</code>字符串后面的</li><li><code>baz</code>字符串后面的</li></ol><p>由于<code>*</code>是贪婪的, 所以将匹配最长的字符串, 如果想匹配最短的字符串, 则可以使用<code>*?</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;.*?&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%&lt;foo&gt; &lt;bar&gt; &lt;baz&gt;%&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo</span>
<span class="token comment">## 同样的道理也使用+和?</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;.+&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%&lt;foo&gt; &lt;bar&gt; &lt;baz&gt;%&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;foo&gt; &lt;bar&gt; &lt;baz&gt;</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;.+?&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%&lt;foo&gt; &lt;bar&gt; &lt;baz&gt;%&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;foo&gt;</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;ba?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baaaa&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># ba</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;ba??&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baaaa&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="逻辑或" tabindex="-1"><a class="header-anchor" href="#逻辑或" aria-hidden="true">#</a> 逻辑或</h3><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>[]</code></td><td>中括号内部任意一位, <code>[0-9]</code> 匹配0到9的任意一个数字，等同于\\d, <code>[a-z0-9A-Z_]</code> 匹配任意字符，等同于\\w如果不考虑中文</td></tr><tr><td><code>[^x]</code></td><td>匹配除<code>x</code>以外的任意字符, <code>[^aeiou]</code>匹配除了aeiou这几个字母以外的任意字符, <code>^[^a]</code> 匹配非a开头的字符</td></tr><tr><td>\`A</td><td>B\`</td></tr></tbody></table><p>列子:</p><ol><li><code>[]</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;ba[artz]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobarqux&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># bar []中只代表一个字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;ba[artz]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobazqux&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># baz []中只代表一个字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[)*+|]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123*456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># * \`*\`在\`[]\`中失效</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[)*+|]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123+456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># + \`+\`在\`[]\`中失效, 在正则中有特殊含义的符号, 在\`[]\`中都会失效</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[ab\\]cd]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo[1]&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># ] \`]\`有特殊含义, 所以使用转义字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[a-z]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;FOObar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 使用\`-\`表示连续</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[0-9][0-9]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo123bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 12</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[0-9a-fA-f]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--- a0 ---&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># a 十六进制</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[-abc]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123-456&#39;</span><span class="token punctuation">)</span> <span class="token comment"># - 匹配-本身</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[abc-]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123-456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># - 匹配-本身</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[ab\\-c]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123-456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># - 如果-有特殊含义, 比如表示连续, 则需要使用转义字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[^0-9]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12345foo&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># f 当^在[]的开头 f 匹配非0-9的字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[#:^]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo^bar:baz#qux&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># ^ 当^不在[]的开头, 则就表示^本身</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h3><p>可以用小括号指定一个子表达式.</p><ol><li>可以分组批次处理</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;a{4}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1aaaa1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># match 匹配4个a</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(aa){2}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1aaaa1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># match 两个a为1组, 匹配2组</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(a{2}){2}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1aaaa1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># match 两个a为1组, 匹配2组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>分组可以引用 默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。后向引用用于重复搜索前面某个分组匹配的文本。</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(aa)\\\\1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1aaaa1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 两个a为1组, 第2组是用\`\\1\`来替代, 匹配2组. 因为\`\\\`首先会被python解释器转义一次, 送给regex的时候只有一个\`\\\`了, 或者使用raw string</span>
<span class="token keyword">match</span> <span class="token operator">=</span>  re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;(aa)\\1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1aaaa1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 两个a为1组, 第2组是用\`\\1\`来替代, 匹配2组</span>
<span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># &#39;aaaa&#39; 0表示全部的匹配</span>
<span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># &#39;aa&#39; 1表示第1组</span>
<span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 2表示第2组, 这里因为第二组和第一组相同, 所以没有</span>
<span class="token keyword">match</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># (&#39;aa&#39;,) 元组的行驶返回所有组, 这里因为第二组和第一组相同, 所以只有1个元素</span>
<span class="token keyword">match</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 1, 整体匹配的开始, 默认参数是0</span>
<span class="token keyword">match</span><span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 5, 整体匹配的结束, 默认参数是0</span>
<span class="token keyword">match</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 1, 第1组匹配的开始</span>
<span class="token keyword">match</span><span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 3, 第1组匹配的结束</span>
<span class="token keyword">match</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将分组的匹配的起点和终点一起返回[start, end]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以给分组起个名字, 来引用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(\\w+),(\\w+),(\\w+)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo,quux,baz&#39;</span><span class="token punctuation">)</span>
m<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>
m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># &#39;foo&#39;</span>
m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># &#39;baz&#39;</span>
m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># (&#39;foo&#39;, &#39;quux&#39;, &#39;baz&#39;)</span>

m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?P&lt;w1&gt;\\w+),(?P&lt;w2&gt;\\w+),(?P&lt;w3&gt;\\w+)&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo,quux,baz&#39;</span><span class="token punctuation">)</span>
m<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># (&#39;foo&#39;, &#39;quux&#39;, &#39;baz&#39;)</span>
m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">&#39;w1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &#39;foo&#39;</span>
m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">&#39;w3&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &#39;baz&#39;</span>
m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">&#39;w1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w3&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># (&#39;foo&#39;, &#39;quux&#39;, &#39;baz&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="零宽断言" tabindex="-1"><a class="header-anchor" href="#零宽断言" aria-hidden="true">#</a> 零宽断言</h3><ol><li>Lookahead <code>(?=&lt;lookahead_regex&gt;)</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?=[a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo \`(?=[a-z]) \`表示foo后面必须跟[a-z]字母才满足要求, 然后返回foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?=[a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo123&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo([a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foob</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>(?!&lt;lookahead_regex&gt;)</code>取反</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?=[a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?![a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?=[a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo123&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?![a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo123&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>lookbehind</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?&lt;=foo)bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?&lt;=qux)bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>(?&lt;!&lt;lookbehind_regex&gt;)</code>取反</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?&lt;!foo)bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?&lt;!qux)bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># bar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转义字符" tabindex="-1"><a class="header-anchor" href="#转义字符" aria-hidden="true">#</a> 转义字符</h3><p>将在正则里有特殊意义的字符, 转换为普通字符.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># f , 这里\`.\`是通配符(wildcard)</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\.&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># . , 这里\`.\`就是普通的字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意<code>\\</code>本身就是一个特殊字符, 不能使用<code>\\</code>来转义<code>\\</code>, 因为python解释器会对<code>\\</code>进行一次转义, 然后正则表达式会对它进行一次转义.</p><ol><li>python首先对<code>\\\\</code>进行转义, 变成了一个<code>\\</code></li><li>regex仅仅收到了一个<code>\\</code>, 因为后面没有跟转义的字符, 所以会报错 这时需要多加两个<code>\\\\</code>变为<code>\\\\\\\\</code>, 或者使用让正则表达式使用<code>raw string</code>, 也就是告诉python解释器, 不要转义, 直接传给regex. 建议在进行regex操作时, 都使用<code>raw string</code>来处理<code>\\</code>.</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;foo\\bar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 错误</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\\\&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;foo\\bar&#39;</span><span class="token punctuation">)</span>  
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\\\&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;foo\\bar&#39;</span><span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意:只有在正则字符有特殊含义时, 才需要进行转义:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;{1}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;foo{1}&#39;</span><span class="token punctuation">)</span> <span class="token comment"># re.error: nothing to repeat at position 0 \`{1}\`已经有了正则含义</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\{1}&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;foo{1}&#39;</span><span class="token punctuation">)</span> <span class="token comment"># {1}, 对第一个\`{\`进行转义之后, \`{1}\`就变成了普通字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多的正则的转义字符 <code>\\.</code><code>\\^</code><code>\\$</code><code>\\*</code><code>\\+</code><code>\\?</code><code>\\|</code><code>\\{}</code><code>\\[]</code></p><h3 id="raw-string" tabindex="-1"><a class="header-anchor" href="#raw-string" aria-hidden="true">#</a> raw_string</h3><p>在正则表达式中, 定义了一些可以赋予特殊含义的转义字符如:</p><ol><li><code>\\w</code>表示字符</li><li><code>\\s</code>表示空白</li><li><code>\\d</code>表示数字</li><li><code>\\b</code>表示单词的开始和结束</li><li><code>\\1</code>表示分组</li></ol><p>其中1,2,3使用普通字符串就可以表示, 但是4,5中的<code>\\b</code>和<code>\\1</code>在字符串中有特殊含义, 会先被python解释器转义.这时就需要使用到<code>raw string</code>或者给<code>\\</code>前加<code>\\</code>进行转义, 既<code>\\\\b</code>和<code>\\\\1</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment"># a</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment"># a</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a b&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 空</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a b&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 空</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\bfoo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None \`\\b\`被转义成了&#39;\\x08&#39;所以无法正常匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bfoo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foo , 另一种解法\`re.search(&#39;\\\\bfoo\\\\b&#39;,&#39;bar.foo&#39;)\`</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(a)\\1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None \`\\1\`被转义成了\`\\x01\`所以正则无法匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;(a)\\1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span> <span class="token comment"># aa, 另一种解法\`re.search(r&#39;(a)\\\\1&#39;,&#39;aa&#39;)\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>建议在regex中如果遇到了<code>\\</code>就使用raw string, 或者无脑对所有字符串都使用raw string, 因为不转义的string和raw string也是一样的.</strong></p><p>一个小问题, 看是不是能真正理解字符串的转义:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\167&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment"># a 等价re.search(&#39;\\w&#39;, &#39;abc&#39;), 因为\`\\\\\`被python解释器转义为\`\\\`, 而\`\\167\`是ascii码\`w\`八进制表示, 下面的同理:</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\163&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a b&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 空</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\144&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\142foo\\\\\\142&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(a)\\\\\\61&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span> <span class="token comment"># aa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模式-flag" tabindex="-1"><a class="header-anchor" href="#模式-flag" aria-hidden="true">#</a> 模式(flag)</h3><p>在正则表达式之前加上<code>(?&lt;flags&gt;)</code>可以设置不同模式, 比如多行, 忽略大小写等</p><table><thead><tr><th>Letter</th><th>写法</th><th>re简写</th><th>re全称</th></tr></thead><tbody><tr><td>a</td><td><code>(?a)</code></td><td>re.A</td><td>re.ASCII</td></tr><tr><td>i</td><td><code>(?i)</code></td><td>re.I</td><td>re.IGNORECASE</td></tr><tr><td>L</td><td><code>(?L)</code></td><td>re.L</td><td>re.LOCALE</td></tr><tr><td>m</td><td><code>(?m)</code></td><td>re.M</td><td>re.MULTILINE</td></tr><tr><td>s</td><td><code>(?s)</code></td><td>re.S</td><td>re.DOTALL</td></tr><tr><td>u</td><td><code>(?u)</code></td><td>re.U</td><td>re.UNICODE</td></tr><tr><td>x</td><td><code>(?x)</code></td><td>re.X</td><td>re.VERBOSE</td></tr></tbody></table><h2 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> python</h2><p>python中的<code>re</code>模块.</p><h3 id="匹配" tabindex="-1"><a class="header-anchor" href="#匹配" aria-hidden="true">#</a> 匹配</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 匹配到一个既结束, 返回match对象. 类似的有re.match(), 是从字符串的开头进行匹配, 相当于re.search(&quot;^...&quot;,&quot;string&quot;)</span>
re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 匹配所有, 返回元素是字符串的列表. 类似的有re.finditer, 返回的是迭代器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token punctuation">)</span> 替换
re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> 切分
re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 变异正则表达式<span class="token punctuation">,</span> 可以进行复用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="取反" tabindex="-1"><a class="header-anchor" href="#取反" aria-hidden="true">#</a> 取反</h2><p><code>^((?!你的规则).)*</code></p><p>如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>123
456
789
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>规则：^((?!.5.+).)*</p><p>效果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>123
~~456~~
789
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多条件用 &quot;|&quot;隔开即可</p><p>规则：^((?!.+5.+|8).)*</p><p>效果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>~~123~~
~~456~~
789

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://realpython.com/regex-python/ https://realpython.com/regex-python-part-2/ https://www.jb51.net/tools/zhengze.html</p>`,85),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","正则表达式.html.vue"]]);export{d as default};
