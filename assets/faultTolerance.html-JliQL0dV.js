const e=JSON.parse('{"key":"v-6ecf369e","path":"/8%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B/2_1flink/state/faultTolerance.html","title":"faultTolerance","lang":"zh-CN","frontmatter":{"description":"faultTolerance 在 Flink 中，有一套完整的容错机制（fault tolerance）来保证故障后的恢复，其中最重要 的就是检查点（checkpoint） Checkpoint 在流处理中，我们同样可以用存档读档的思路，把之前的计算结果做个保存，这样重启之后就可以继续处理新数据、而不需要重新计算了。进一步地，我们知道在有状态的流处理中，任务继续处理新数据，并不需要“之前的计算结果”，而是需要任务“之前的状态”。所以我们最终的选择，就是将之前某个时间点所有的状态保存下来，这份“存档”就是所谓的“检查点”（checkpoint）。","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/8%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B/2_1flink/state/faultTolerance.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"faultTolerance"}],["meta",{"property":"og:description","content":"faultTolerance 在 Flink 中，有一套完整的容错机制（fault tolerance）来保证故障后的恢复，其中最重要 的就是检查点（checkpoint） Checkpoint 在流处理中，我们同样可以用存档读档的思路，把之前的计算结果做个保存，这样重启之后就可以继续处理新数据、而不需要重新计算了。进一步地，我们知道在有状态的流处理中，任务继续处理新数据，并不需要“之前的计算结果”，而是需要任务“之前的状态”。所以我们最终的选择，就是将之前某个时间点所有的状态保存下来，这份“存档”就是所谓的“检查点”（checkpoint）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"faultTolerance\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Checkpoint","slug":"checkpoint","link":"#checkpoint","children":[]},{"level":2,"title":"状态一致性","slug":"状态一致性","link":"#状态一致性","children":[]},{"level":2,"title":"end-to-end exactly-once","slug":"end-to-end-exactly-once","link":"#end-to-end-exactly-once","children":[{"level":3,"title":"输入端保证","slug":"输入端保证","link":"#输入端保证","children":[]},{"level":3,"title":"输出端保证","slug":"输出端保证","link":"#输出端保证","children":[]}]}],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":8.52,"words":2557},"filePathRelative":"8数据工程/2_1flink/state/faultTolerance.md","localizedDate":"2025年2月21日","excerpt":"<h1> faultTolerance</h1>\\n<p>在 Flink 中，有一套完整的容错机制（fault tolerance）来保证故障后的恢复，其中最重要\\n的就是检查点（checkpoint）</p>\\n<h2> Checkpoint</h2>\\n<p>在流处理中，我们同样可以用存档读档的思路，把之前的计算结果做个保存，这样重启之后就可以继续处理新数据、而不需要重新计算了。进一步地，我们知道在有状态的流处理中，任务继续处理新数据，并不需要“之前的计算结果”，而是需要任务“之前的状态”。所以我们最终的选择，就是将之前某个时间点所有的状态保存下来，这份“存档”就是所谓的“检查点”（checkpoint）。</p>","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
