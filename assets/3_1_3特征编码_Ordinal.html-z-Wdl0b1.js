import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c,b as n,d as s,e as i,a}from"./app-9tftCahk.js";const l={},u=a(`<h1 id="顺序编码-ordinalencoder" tabindex="-1"><a class="header-anchor" href="#顺序编码-ordinalencoder" aria-hidden="true">#</a> 顺序编码(OrdinalEncoder)</h1><p>序号编码通常用于处理类别间具有大小关系的数据。如产品等级分为高、中、低三档，存在“高&gt;中&gt;低”的排序关系, 则高表示为3，中表示为2，低表示为1</p><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ol><li>打比赛中, 测试集是批量给出的, 使用pandas的map方法更快</li><li>真实应用中, 用于生产是单条, 单条处理, 适用scikit进行单调转换(虽然也可以用map转换, 但是one-hot编码pandas对单条处理不友好, 为了和onehot保持一致, 所以建议使用scikit)</li></ol><h2 id="ordinalencoder" tabindex="-1"><a class="header-anchor" href="#ordinalencoder" aria-hidden="true">#</a> OrdinalEncoder</h2><h3 id="最佳实践-1" tabindex="-1"><a class="header-anchor" href="#最佳实践-1" aria-hidden="true">#</a> 最佳实践</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> OrdinalEncoder
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;Grade&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;High&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token string">&#39;Medium&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;other&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
enc <span class="token operator">=</span> OrdinalEncoder<span class="token punctuation">(</span>categories <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Medium&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;High&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> handle_unknown<span class="token operator">=</span> <span class="token string">&#39;use_encoded_value&#39;</span><span class="token punctuation">,</span> unknown_value<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> encoded_missing_value<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>

df<span class="token punctuation">[</span><span class="token string">&#39;Grade_ord&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> enc<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;Grade&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造参数" tabindex="-1"><a class="header-anchor" href="#构造参数" aria-hidden="true">#</a> 构造参数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">sklearn</span><span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>OrdinalEncoder<span class="token punctuation">(</span>
    <span class="token operator">*</span><span class="token punctuation">,</span> 
    categories<span class="token operator">=</span><span class="token string">&#39;auto&#39;</span><span class="token punctuation">,</span>                  <span class="token comment"># categories: ‘auto’ or a list of array-like, auto: 从训练集自定义映射; list: 根据元素索引进行映射</span>
    dtype<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;numpy.float64&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>      <span class="token comment"># dtype: number type, 输出的数据类型</span>
    handle_unknown<span class="token operator">=</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>             <span class="token comment"># {‘error’, ‘use_encoded_value’}, 遇到没有指定的分类, error: 会报错; ‘use_encoded_value’会根据unknown_value的值来表示</span>
    unknown_value<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 <span class="token comment"># int or np.nan, </span>
    encoded_missing_value<span class="token operator">=</span>nan<span class="token punctuation">,</span>          <span class="token comment"># int or np.nan, 缺失值的处理</span>
    min_frequency<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                 <span class="token comment"># int or float, 大于该阈值的才会被编码. int: 直接比较大小; float: min_frequency * n_samples</span>
    max_categories<span class="token operator">=</span><span class="token boolean">None</span>                 <span class="token comment"># int, 最大的分类编码个数</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><ol><li>categories_: list of arrays</li><li>n_features_in_: int</li><li>feature_names_in_: ndarray of shape (n_features_in_,)</li><li>infrequent_categories_: list of ndarray</li></ol><h2 id="pandas" tabindex="-1"><a class="header-anchor" href="#pandas" aria-hidden="true">#</a> pandas</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> category_encoders <span class="token keyword">as</span> ce
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;Grade&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;High&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token string">&#39;Medium&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;other&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;haha&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

df<span class="token punctuation">[</span><span class="token string">&#39;Grade&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;Medium&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;High&#39;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 0    2.0</span>
<span class="token comment"># 1    NaN</span>
<span class="token comment"># 2    1.0</span>
<span class="token comment"># 3    0.0</span>
<span class="token comment"># 4    NaN</span>
<span class="token comment"># Name: Grade, dtype: float64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✨缺失值(missing)和未知值(unknown)被当成NaN对待</p><p>✨另一种是使用pandas的Categorical类型</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>edu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Uneducated&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;High School&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;College&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Graduate&#39;</span><span class="token punctuation">]</span>
test<span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>Categorical<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">&#39;Education&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> categories<span class="token operator">=</span>edu<span class="token punctuation">,</span> ordered<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
test<span class="token punctuation">[</span><span class="token string">&#39;cat&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cat<span class="token punctuation">.</span>codes
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),r={id:"category-encoders",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#category-encoders","aria-hidden":"true"},"#",-1),k={href:"https://contrib.scikit-learn.org/category_encoders/index.html",target:"_blank",rel:"noopener noreferrer"},m=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">category_encoders</span><span class="token punctuation">.</span>ordinal<span class="token punctuation">.</span>OrdinalEncoder<span class="token punctuation">(</span>
    verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>                  <span class="token comment"># int, 输出信息的详细程度</span>
    mapping<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>               <span class="token comment"># list of dicts, key是要编码的特征名字, value是字典, 子key是原始分类, 子value是编码分类[{‘col’: ‘col1’, ‘mapping’: {None: 0, ‘a’: 1, ‘b’: 2}}, {‘col’: ‘col2’, ‘mapping’: {None: 0, ‘x’: 1, ‘y’: 2}}]</span>
    cols<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>                  <span class="token comment"># list, 要编码的列名, 如果为None则所有的string列都会被编码. ✨当提供mapping时, 优先使用mapping中的列, 而不是全部列</span>
    drop_invariant<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>       <span class="token comment"># bool, 是否丢弃方差为0的特征</span>
    return_df<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>             <span class="token comment"># bool, 为True时, 返回DataFrame; 为False时, 返回numpy ndarray </span>
    handle_unknown<span class="token operator">=</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span>     <span class="token comment"># str, 将mapping中的未知分类编码成&#39;value&#39;, 编码为-1</span>
    handle_missing<span class="token operator">=</span><span class="token string">&#39;value&#39;</span>      <span class="token comment"># str, 将缺失值编码成&#39;value\`,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">import</span> category_encoders <span class="token keyword">as</span> ce
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;Grade&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;High&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span><span class="token string">&#39;Medium&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;other&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&#39;haha&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

ce<span class="token punctuation">.</span>OrdinalEncoder<span class="token punctuation">(</span>
    <span class="token comment"># cols=[&#39;Grade&#39;], </span>
    mapping<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;col&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;Grade&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;mapping&#39;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">&#39;Low&#39;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;Medium&#39;</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;High&#39;</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    handle_missing <span class="token operator">=</span> <span class="token string">&#39;return_nan&#39;</span>
<span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>df<span class="token punctuation">)</span>

<span class="token comment">#    Grade haha</span>
<span class="token comment"># 0    2.0    a</span>
<span class="token comment"># 1   -1.0    b</span>
<span class="token comment"># 2    1.0    c</span>
<span class="token comment"># 3    0.0    d</span>
<span class="token comment"># 4   -1.0    e</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>✨handle_missing参数没有起作用</li><li>✨在mapping参数存在的情况下, 不需要传入cols</li></ol><p>✨功能上是一致的, 区别在于:</p><ol><li>label encoder是给目标类别编码的, 所以输入的数据形状是一维的, (n_samples,)</li><li>ordinal encoder是给特征类别编码的, 所以输入的数据形状是多维的, (n_samples, n_features)</li></ol><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ol><li>https://datascience.stackexchange.com/questions/39317/difference-between-ordinalencoder-and-labelencoder</li><li>https://www.cnblogs.com/dangui/p/15836197.html</li><li>https://datascience.stackexchange.com/questions/72343/encoding-with-ordinalencoder-how-to-give-levels-as-user-input</li></ol>`,7);function v(g,b){const e=p("ExternalLinkIcon");return o(),c("div",null,[u,n("h2",r,[d,s(),n("a",k,[s("category_encoders"),i(e)])]),m])}const y=t(l,[["render",v],["__file","3_1_3特征编码_Ordinal.html.vue"]]);export{y as default};
