import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as a,e as c}from"./app-XqA98pG8.js";const d={},o=c(`<h1 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> math</h1><h2 id="下载-更新-上传" tabindex="-1"><a class="header-anchor" href="#下载-更新-上传" aria-hidden="true">#</a> 下载/更新/上传</h2><h3 id="git-clone" tabindex="-1"><a class="header-anchor" href="#git-clone" aria-hidden="true">#</a> git clone</h3><ol><li>概述</li></ol><p>git clone做了两件事:</p><ol><li>把远程的所有分支复制下来, 使用<code>git branch -r</code>查看</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>remotes/origin/HEAD -<span class="token operator">&gt;</span> origin/master
remotes/origin/dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在本地新建<code>master</code>分支与<code>origin/master</code>分支对应, 使用<code>git branch -a</code>可以查看本地和远程素有分支.</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>* master
remotes/origin/HEAD -<span class="token operator">&gt;</span> origin/master
remotes/origin/dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想在本地创建<code>dev</code>分支与<code>origin/dev</code>对应, 使用<code>git checkout -b dev origin/dev</code></p><p>常用命令:</p><p><code>git clone [-b BRANCH] [-o ORIGIN] REMOTE_URL [LOCAL_DIR]</code></p><ul><li>REMOTE_URL: 支持多种协议</li><li>LOCAL_DIR: 默认与远程仓库同名</li><li>BRANCH: 指定要clone分支, 默认把整个仓库clone下来(但只会在本地创建一个master分支,<code>git branch -a</code>查看)</li><li>ORIGIN: 指定remote名称, 默认origin</li></ul><ol start="2"><li>应用</li></ol><ul><li>在实际开发中很少直接clone所有分支, 只需clone需要修改的分支即可, 这是git会在本地自动创建该分支的同名分支 使用<code>git clone -b REMOTE_URL</code></li><li>如果clone的分支是<code>protected</code>, 既不能直接<code>push</code>. 则: <ol><li>先创建一个分支 <code>git branch mydev</code></li><li>跳到该分支上<code>git switch mydev</code></li><li>修改完成, 推送到远程分支<code>git push</code>, 这时远程会多一个<code>origin/mydev</code>分支</li><li>在远程进行<code>merge request</code>, 并选择merge后删除这个分支</li></ol></li></ul><h3 id="git-fetch" tabindex="-1"><a class="header-anchor" href="#git-fetch" aria-hidden="true">#</a> git fetch</h3><ol><li>概述</li></ol><p>更新远程分支(origin/*)</p><p><code>get fetch [ORIGIN] [R-BRANCH] [L-BRANCH]</code></p><ul><li><code>git fetch</code> 不带参数则是默认拉取远程ORIGIN仓库, 所有分支(origin/*)</li><li><code>ORIGIN</code> 拉取远程仓库的名称, 默认origin</li><li><code>R-BREANCH</code> 拉取远程仓库的分支名, 在本地的名称为(origin/R-BRANCH)</li><li><code>L-BRANCH</code> 来取远程残酷的分支,并更新本地对应的分支</li></ul><h3 id="git-push" tabindex="-1"><a class="header-anchor" href="#git-push" aria-hidden="true">#</a> git push</h3><ol><li>概述</li></ol><p><code>git push [ORIGIN] [L-BRANCH] [R-BRANCH]</code></p><ul><li><code>git push</code> 推送当前branch到origin远程仓库</li><li><code>ORIGIN</code> 推送的远程仓库的名称, 默认origin</li><li><code>L-BRANCH</code> 推送的 本地branch名称, 默认为当前分支</li><li><code>R-BRANCH</code> 推送的 远程branch名称, 默认和本地branch</li></ul><h2 id="提交" tabindex="-1"><a class="header-anchor" href="#提交" aria-hidden="true">#</a> 提交</h2><h3 id="git-commit" tabindex="-1"><a class="header-anchor" href="#git-commit" aria-hidden="true">#</a> git commit</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;the commit message&quot;</span> <span class="token comment"># 提交暂存区的文件</span>
<span class="token function">git</span> commit –amend <span class="token comment">#重新进行当前的提交</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="git-revert" tabindex="-1"><a class="header-anchor" href="#git-revert" aria-hidden="true">#</a> git revert</h3><p><code>git revert commitHash</code> 提交<code>commitHash</code>之前的一次<code>commitHash</code></p><h3 id="git-cherry-pick" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick" aria-hidden="true">#</a> git cherry-pick</h3><p>将指定的<code>commit</code>提交到当前分支上 <code>git cherry-pick &lt;commitHash&gt;</code></p><ol><li><code>git checkout master</code> 切换到Master分支</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>a - b - c  Master *
   <span class="token punctuation">\\</span>
   d - e - f Feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>git cherry-pick e</code> 将Feature分支上的<code>commit e</code> 提交到Master分支上</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>a - b - c - e Master *
   <span class="token punctuation">\\</span>
   d - e - f Feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工作区-暂存区-索引区-add-checkout-reset" tabindex="-1"><a class="header-anchor" href="#工作区-暂存区-索引区-add-checkout-reset" aria-hidden="true">#</a> 工作区/暂存区/索引区(add, checkout, reset)</h2><p>索引区index 暂存区stage 工作区workspace(local)</p><p><code>git add</code> 将修改添加到stage <code>git commit</code> 将stage提交为一个commit,且本次stage和本次commit保持一致</p><p>撤销修改: 1.只在local修改(没有add操作) <code>git checkout ./</code>即可 2.local修改后,add到stage,且没有进一步修改(刚add没有继续修改) 1)<code>git reset HEAD --mix</code>(HEAD --mix可省略),撤销stage的修改(此时checkout 没用,因为stage和local一致) 2)<code>git checkout ./</code>撤销local的修改(checkout作用是用stage覆盖local,此时local和commit已经一致)</p><p>3.local修改后,add到stage,并进行进一步修改 1)<code>git checkout ./</code> 撤销local的改动(既进一步的修改内容) 2)<code>git reset HEAD --mix</code>(HEAD --mix可省略),撤销stage的修改(此时checkout 没用,因为stage和local一致) 3)<code>git checkout ./</code>撤销local的修改(checkout作用是用stage覆盖local,此时local和commit已经一致)</p><p>这三步可以合成一步<code>git reset HEAD --hard</code></p><h2 id="合并" tabindex="-1"><a class="header-anchor" href="#合并" aria-hidden="true">#</a> 合并</h2><h2 id="git-switch" tabindex="-1"><a class="header-anchor" href="#git-switch" aria-hidden="true">#</a> git switch</h2><p>代替<code>git checkout &lt;BRANCH&gt;</code></p><h3 id="git-merge" tabindex="-1"><a class="header-anchor" href="#git-merge" aria-hidden="true">#</a> git merge</h3><p>git merge执行了两个操作:</p><ol><li>将两个分支的代码合并, 既把目标的<code>commit</code>合并到当前分支的<code>commit</code></li><li><ul><li>如果没有冲突, 则直接提交新的<code>commit</code></li><li>如果有冲突, 则先解决冲突, 然后手动<code>commit</code></li></ul></li></ol><p>解决冲突:</p><ol><li><p>merge合并之后，中会提示有冲突的文件(既同一文件，同一行做了不同的修改) 也可通过<code>git status</code>来进行查看</p></li><li><p>找到有冲突的文件进行处理</p></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;&lt;&lt;&lt;&lt; HEAD
1
======
2
&gt;&gt;&gt;&gt;&gt;&gt; branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>HEAD</code>到<code>======</code>是当前的分支，该文件的内容，<code>branch</code>到<code>=====</code>是合并目标分支的内容，<code>merge</code>不知道用哪个，所以需要我们自己决定。加入我们想要其他分支的内容，则只需要将<code>&lt;&lt;&lt;&lt;&lt; HEAD 1 =====</code>和<code>&gt;&gt;&gt;&gt; branch</code>删除即可。</p><ol start="3"><li><p>解决完冲突后，需要重新add和commit</p></li><li><p>如果发现冲突不想解决，则可以使用下面的命令取消。 <code>git merge --abort</code></p></li></ol><h2 id="git-rebase" tabindex="-1"><a class="header-anchor" href="#git-rebase" aria-hidden="true">#</a> git rebase</h2><p><code>base</code>是根的意思, 所谓的根就是两个branch交叉点, 交叉点以下是两个branch共有的, (有个误区是,交叉点以下的部分只属于某一个branch)</p><ol><li><p>git rebase -i upstream [branch] upstream就是要移植到的base,可以是branch,也可以是commit id. branch是要要移植的branch,默认是HEAD所在branch</p></li><li><p>git reabse --continue --abort 在使用-i交互模式时,处理conflict会中断,要使用--continue来恢复交互模式</p></li></ol><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="git-tag" tabindex="-1"><a class="header-anchor" href="#git-tag" aria-hidden="true">#</a> git tag</h3><ul><li>在当前<code>commit</code>上打标签 <code>git tag &lt;TAGNAME&gt;</code></li><li>在指定<code>commit</code>上打标签 <code>git tag &lt;TAGNAME&gt; &lt;COMMITHASH&gt;</code></li></ul><h3 id="git-log" tabindex="-1"><a class="header-anchor" href="#git-log" aria-hidden="true">#</a> git log</h3><p><code>git log --oneline --decorate --graph --all</code></p>`,60),t=[o];function l(r,n){return i(),a("div",null,t)}const g=e(d,[["render",l],["__file","git.html.vue"]]);export{g as default};
