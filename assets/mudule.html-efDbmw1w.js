import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c,a as s,b as n,d as e,e as t}from"./app-qxiCM96p.js";const i={},d=t(`<h1 id="mudule" tabindex="-1"><a class="header-anchor" href="#mudule" aria-hidden="true">#</a> mudule</h1><h2 id="javascript模块" tabindex="-1"><a class="header-anchor" href="#javascript模块" aria-hidden="true">#</a> javascript模块</h2><p>早期,JS没有模块化的概念(Python中有module,Java中有Package).是直接引入整个JS代码.<code>&lt;script type=&quot;text/javascript&quot; src=&quot;index.js&quot;&gt;&lt;/script&gt;</code>. 缺点:</p><ul><li>污染全局变量, 相当于将所有JS文本拼贴到一起</li><li>加载有顺序: <ul><li>使用getElement等方法会报错, 因为html文件还没加载</li><li>如果JS文件有依赖关系, 则需要把被依赖的JS文件放前面, 先加载</li></ul></li></ul><p>语法如下:</p><ul><li>内嵌在<code>&lt;script&gt;</code>标签内</li><li>在<code>&lt;script src=&quot;&quot;&gt;</code>中引入</li><li>在标签内部, 与具体时间绑定</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 1.内嵌式的js --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">// alert(&#39;沙漠骆驼&#39;);</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 2. 外部js script 双标签 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 3. 行内式的js 直接写到元素的内部 --&gt;</span>
    <span class="token comment">&lt;!-- &lt;input type=&quot;button&quot; value=&quot;hello&quot; onclick=&quot;alert(&#39;world&#39;)&quot;&gt; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="es6规范" tabindex="-1"><a class="header-anchor" href="#es6规范" aria-hidden="true">#</a> ES6规范</h2><p>ES6规范了整个JS的语法, 而不仅仅是模块化部分. 各个浏览器和Node.js都几乎原生支持该规范. CommonJS都会被取代. 以后ES6会成为前后端的通用规范.</p><h3 id="按需导入方法和对象" tabindex="-1"><a class="header-anchor" href="#按需导入方法和对象" aria-hidden="true">#</a> 按需导入方法和对象</h3><p>通过<code>export</code>关键字, 指定具体变量和方法名, 在导入的时候也要使用<code>特定</code>的变量和方法名接收</p><ul><li>导出</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//demo1.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导入</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//demo2.js</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> str<span class="token punctuation">,</span> f <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;demo1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导出整个模块" tabindex="-1"><a class="header-anchor" href="#导出整个模块" aria-hidden="true">#</a> 导出整个模块</h3><p>使用<code>export default</code>关键字, 将其后的<code>{}</code>所有内容作为<code>一个对象整体</code>导出, 接收者在导入时可以自定义名称</p><ul><li>导出</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//demo1.js</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;world&#39;</span>      
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>导入</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//demo2.js</span>
<span class="token keyword">import</span> obj <span class="token keyword">from</span> <span class="token string">&#39;demo1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commonjs规范" tabindex="-1"><a class="header-anchor" href="#commonjs规范" aria-hidden="true">#</a> CommonJS规范</h2><p>由Node.js推广使用, 通过<code>requeire</code>来引入模块, 通过<code>module.exports</code>来导出模块.</p><ul><li>引入模块例子</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//add.js</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">add</span><span class="token operator">:</span> add <span class="token comment">// key可以被其他模块获得</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>加载模块例子</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./add.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点:</p><ul><li>由于是服务端的规范(Node.js), 所以无法应用在浏览器, 可以通过Babel来转换为ES</li><li>同步, 可能会产生阻塞</li></ul><h2 id="将es6语法转换为commonjs" tabindex="-1"><a class="header-anchor" href="#将es6语法转换为commonjs" aria-hidden="true">#</a> 将ES6语法转换为CommonJS</h2><h3 id="查看node-js对es6的支持情况" tabindex="-1"><a class="header-anchor" href="#查看node-js对es6的支持情况" aria-hidden="true">#</a> 查看Node.js对ES6的支持情况</h3><p>通过<code>npm install -g es-checker</code>,运行<code>es-checker</code>可以查看Node.js现在对ES6的支持率.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">...</span>

Class
  √ Class
  √ <span class="token keyword">super</span> allowed <span class="token keyword">in</span> object methods
  √ <span class="token keyword">class</span> <span class="token class-name">ABC</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

Module
  × Module <span class="token keyword">export</span> command
  × Module <span class="token keyword">import</span> command
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>node环境中的模块导入导出是CommonJS规范实现的, 现在还不支持写<code>import</code>和<code>export</code>.</p><h3 id="使用babel-将es6语法转换为commonjs" tabindex="-1"><a class="header-anchor" href="#使用babel-将es6语法转换为commonjs" aria-hidden="true">#</a> 使用babel, 将ES6语法转换为CommonJS</h3>`,35),u={href:"https://www.jb51.net/article/184136.htm",target:"_blank",rel:"noopener noreferrer"},r=t('<ol><li>安装 <code>npm install --save-dev babel-cli babel-preset-es2015 babel-preset-es2017</code><code>babel-cli</code>如同<code>webpack-cli</code>, 可以让我们使用命令行 <code>babel-preset-es*</code>, 就是转换规则<code>2015</code>对应<code>ES6</code>(ES后面的数字比年份大一)</li><li>使用<code>babel index.js</code>进行转化</li></ol><h3 id="webpack中的es6和commonjs" tabindex="-1"><a class="header-anchor" href="#webpack中的es6和commonjs" aria-hidden="true">#</a> webpack中的ES6和CommonJS</h3>',2),k={href:"https://webpack.docschina.org/api/module-methods/",target:"_blank",rel:"noopener noreferrer"},m=s("p",null,[n("webpack 2 支持原生的 ES6 模块语法，意味着你无须额外引入 babel这样的工具，就可以使用"),s("code",null,"import"),n("和"),s("code",null,"export"),n("。但是注意，如果使用其他的 ES6+ 特性，仍然需要引入 babel。")],-1),v=s("p",null,[n("另外,"),s("code",null,"webpack.config.js"),n("中只能用CommonJS的语法, "),s("code",null,"module.exports"),n("和"),s("code",null,"require()"),n(", 因为是由Node.js运行的.")],-1);function b(g,h){const a=o("ExternalLinkIcon");return l(),c("div",null,[d,s("p",null,[s("a",u,[n("详细参考"),e(a)])]),r,s("p",null,[s("a",k,[n("详细参考"),e(a)])]),m,v])}const y=p(i,[["render",b],["__file","mudule.html.vue"]]);export{y as default};
