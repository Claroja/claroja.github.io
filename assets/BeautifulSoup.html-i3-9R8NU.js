import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as e,o as t,c as i,d as l,w as o,e as n,b as p}from"./app-jdLxCr9I.js";const c={},u=n(`<h2 id="引入beautifulsoup" tabindex="-1"><a class="header-anchor" href="#引入beautifulsoup" aria-hidden="true">#</a> 引入BeautifulSoup</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="搜索文档树" tabindex="-1"><a class="header-anchor" href="#搜索文档树" aria-hidden="true">#</a> 搜索文档树</h2><h3 id="find-all" tabindex="-1"><a class="header-anchor" href="#find-all" aria-hidden="true">#</a> find_all()</h3><p><code>find_all( name , attrs , recursive , string , **kwargs )</code> find_all() 方法搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件.这里有几个例子:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 获得所有name为a的标签</span>

<span class="token comment">## [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span>
<span class="token comment">##  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span>
<span class="token comment">##  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span>

soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> class_<span class="token operator">=</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 获取所有\`class\`为\`title\`的\`p\`标签</span>
<span class="token comment">## [&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;]</span>
soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;primaryconsumers&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># .通用属性获取方法\`attrs\`</span>

soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;link2&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 获取所有\`id\`=\`link2\`的标签, 因为id是唯一的所以不需要指定标签名name</span>
<span class="token comment">## [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span>

<span class="token keyword">import</span> re
soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;elsie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 获得\`href\`包含\`elsie\`的元素</span>
<span class="token comment">## [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]</span>


soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>string<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;sisters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 内容包含sisters的</span>
<span class="token comment">## u&#39;Once upon a time there were three little sisters; and their names were\\n&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="name-参数" tabindex="-1"><a class="header-anchor" href="#name-参数" aria-hidden="true">#</a> name 参数</h4><p>name 参数可以查找所有名字为 name 的tag,字符串对象会被自动忽略掉.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## [&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="keyword-参数" tabindex="-1"><a class="header-anchor" href="#keyword-参数" aria-hidden="true">#</a> keyword 参数</h4><p>如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字tag的属性来搜索,如果包含一个名字为 id 的参数,Beautiful Soup会搜索每个tag的”id”属性.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;link2&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果传入 href 参数,Beautiful Soup会搜索每个tag的”href”属性:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;elsie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用多个指定名字的参数可以同时过滤tag的多个属性:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>href<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;elsie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&#39;link1&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;three&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按css搜索" tabindex="-1"><a class="header-anchor" href="#按css搜索" aria-hidden="true">#</a> 按CSS搜索</h4><p>按照CSS类名搜索tag的功能非常实用,但标识CSS类名的关键字 class 在Python中是保留字,使用 class 做参数会导致语法错误.从Beautiful Soup的4.1.1版本开始,可以通过 class_ 参数搜索有指定CSS类名的tag:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">&quot;sister&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span>
<span class="token comment">##  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span>
<span class="token comment">##  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-参数" tabindex="-1"><a class="header-anchor" href="#string-参数" aria-hidden="true">#</a> string 参数</h4><p>通过 string 参数可以搜搜文档中的字符串内容.与 name 参数的可选值一样, string 参数接受 字符串 , 正则表达式 , 列表, True . 看例子:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>string<span class="token operator">=</span><span class="token string">&quot;Elsie&quot;</span><span class="token punctuation">)</span>
<span class="token comment">## [u&#39;Elsie&#39;]</span>

soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>string<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;Tillie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Elsie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lacie&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## [u&#39;Elsie&#39;, u&#39;Lacie&#39;, u&#39;Tillie&#39;]</span>

soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>string<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">&quot;Dormouse&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">u&quot;The Dormouse&#39;s story&quot;</span><span class="token punctuation">,</span> <span class="token string">u&quot;The Dormouse&#39;s story&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">is_the_only_string_within_a_tag</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">&quot;&quot;</span>Return <span class="token boolean">True</span> <span class="token keyword">if</span> this string <span class="token keyword">is</span> the only child of its parent tag<span class="token punctuation">.</span><span class="token string">&quot;&quot;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> s<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>string<span class="token punctuation">)</span>

soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>string<span class="token operator">=</span>is_the_only_string_within_a_tag<span class="token punctuation">)</span>
<span class="token comment">## [u&quot;The Dormouse&#39;s story&quot;, u&quot;The Dormouse&#39;s story&quot;, u&#39;Elsie&#39;, u&#39;Lacie&#39;, u&#39;Tillie&#39;, u&#39;...&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="limit-参数" tabindex="-1"><a class="header-anchor" href="#limit-参数" aria-hidden="true">#</a> limit 参数</h4><p>find_all() 方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用 limit 参数限制返回结果的数量.效果与SQL中的limit关键字类似,当搜索到的结果数量达到 limit 的限制时,就停止搜索返回结果.</p><h4 id="recursive-参数" tabindex="-1"><a class="header-anchor" href="#recursive-参数" aria-hidden="true">#</a> recursive 参数</h4><p>调用tag的 find_all() 方法时,Beautiful Soup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数 recursive=False .</p><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find()</h3><p>使用 find_all 方法并设置 limit=1 参数不如直接使用 find() 方法.</p><h3 id="find-parents-和-find-parent" tabindex="-1"><a class="header-anchor" href="#find-parents-和-find-parent" aria-hidden="true">#</a> find_parents() 和 find_parent()</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>find_parents<span class="token punctuation">(</span> name <span class="token punctuation">,</span> attrs <span class="token punctuation">,</span> recursive <span class="token punctuation">,</span> string <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs <span class="token punctuation">)</span>
find_parent<span class="token punctuation">(</span> name <span class="token punctuation">,</span> attrs <span class="token punctuation">,</span> recursive <span class="token punctuation">,</span> string <span class="token punctuation">,</span> <span class="token operator">**</span>kwargs <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经用了很大篇幅来介绍 find_all() 和 find() 方法,Beautiful Soup中还有10个用于搜索的API.它们中的五个用的是与 find_all() 相同的搜索参数,另外5个与 find() 方法的搜索参数类似.区别仅是它们搜索文档的不同部分.</p><p>记住: find_all() 和 find() 只搜索当前节点的所有子节点,孙子节点等. find_parents() 和 find_parent() 用来搜索当前节点的父辈节点,搜索方法与普通tag的搜索方法相同,搜索文档搜索文档包含的内容. 我们从一个文档中的一个叶子节点开始:</p><h3 id="find-next-siblings-合-find-next-sibling" tabindex="-1"><a class="header-anchor" href="#find-next-siblings-合-find-next-sibling" aria-hidden="true">#</a> find_next_siblings() 合 find_next_sibling()</h3><p>find_next_siblings( name , attrs , recursive , string , **kwargs )</p><p>find_next_sibling( name , attrs , recursive , string , **kwargs )</p><p>这2个方法通过 .next_siblings 属性对当tag的所有后面解析 [5] 的兄弟tag节点进行迭代, find_next_siblings() 方法返回所有符合条件的后面的兄弟节点, find_next_sibling() 只返回符合条件的后面的第一个tag节点.</p><p>##find_previous_siblings() 和 find_previous_sibling() find_previous_siblings( name , attrs , recursive , string , **kwargs )</p><p>find_previous_sibling( name , attrs , recursive , string , **kwargs )</p><p>这2个方法通过 .previous_siblings 属性对当前tag的前面解析 [5] 的兄弟tag节点进行迭代, find_previous_siblings() 方法返回所有符合条件的前面的兄弟节点, find_previous_sibling() 方法返回第一个符合条件的前面的兄弟节点:</p><h3 id="find-all-next-和-find-next" tabindex="-1"><a class="header-anchor" href="#find-all-next-和-find-next" aria-hidden="true">#</a> find_all_next() 和 find_next()</h3><p>find_all_next( name , attrs , recursive , string , **kwargs )</p><p>find_next( name , attrs , recursive , string , **kwargs )</p><p>这2个方法通过 .next_elements 属性对当前tag的之后的 [5] tag和字符串进行迭代, find_all_next() 方法返回所有符合条件的节点, find_next() 方法返回第一个符合条件的节点:</p><h3 id="find-all-previous-和-find-previous" tabindex="-1"><a class="header-anchor" href="#find-all-previous-和-find-previous" aria-hidden="true">#</a> find_all_previous() 和 find_previous()</h3><p>find_all_previous( name , attrs , recursive , string , **kwargs )</p><p>find_previous( name , attrs , recursive , string , **kwargs )</p><p>这2个方法通过 .previous_elements 属性对当前节点前面 [5] 的tag和字符串进行迭代, find_all_previous() 方法返回所有符合条件的节点, find_previous() 方法返回第一个符合条件的节点.</p><h2 id="get-text" tabindex="-1"><a class="header-anchor" href="#get-text" aria-hidden="true">#</a> get_text()</h2><p>如果只想得到tag中包含的文本内容,那么可以嗲用 get_text() 方法,这个方法获取到tag中包含的所有文版内容包括子孙tag中的内容,并将结果作为Unicode字符串返回:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>markup = &#39;&lt;a href=&quot;http://example.com/&quot;&gt;\\nI linked to &lt;i&gt;example.com&lt;/i&gt;\\n&lt;/a&gt;&#39;
soup = BeautifulSoup(markup)

soup.get_text()
u&#39;\\nI linked to example.com\\n&#39;
soup.i.get_text()
u&#39;example.com&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="遍历文档树" tabindex="-1"><a class="header-anchor" href="#遍历文档树" aria-hidden="true">#</a> 遍历文档树</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;
    &lt;body&gt;
&lt;p class=&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were
&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,
&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and
&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;
and they lived at the bottom of a well.&lt;/p&gt;

&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;
&quot;&quot;&quot;</span>
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">&#39;html.parser&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="子节点获取" tabindex="-1"><a class="header-anchor" href="#子节点获取" aria-hidden="true">#</a> 子节点获取</h3><h4 id="获得特定标签的内容" tabindex="-1"><a class="header-anchor" href="#获得特定标签的内容" aria-hidden="true">#</a> 获得特定标签的内容</h4>`,54),d=n(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>head
<span class="token comment">## &lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;</span>

soup<span class="token punctuation">.</span>title
<span class="token comment">## &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>

soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>b
<span class="token comment">## &lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过<code>find_all()</code>方法来获得所有标签</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## [&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;,</span>
<span class="token comment">##  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;,</span>
<span class="token comment">##  &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="contents-和-children" tabindex="-1"><a class="header-anchor" href="#contents-和-children" aria-hidden="true">#</a> <code>.contents</code> 和 <code>.children</code></h4><p>tag的 <code>.contents</code> 属性可以将tag的子节点以列表的方式输出:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>head_tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>head
head_tag
<span class="token comment">## &lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;</span>

head_tag<span class="token punctuation">.</span>contents
<span class="token comment">## [&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;]#获得下一级标签和内容</span>

title_tag <span class="token operator">=</span> head_tag<span class="token punctuation">.</span>contents<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
title_tag
<span class="token comment">## &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>
title_tag<span class="token punctuation">.</span>contents
<span class="token comment">## [u&#39;The Dormouse&#39;s story&#39;] #获得内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过tag的<code>.children</code>生成器,可以对tag的子节点进行循环:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>for child in title_tag.children:
    print(child)
    # The Dormouse&#39;s story
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="descendants" tabindex="-1"><a class="header-anchor" href="#descendants" aria-hidden="true">#</a> .descendants</h4><p><code>.descendants</code> 属性可以对所有tag的子孙节点进行递归循环 [5] :</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> child <span class="token keyword">in</span> head_tag<span class="token punctuation">.</span>descendants<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
    <span class="token comment"># &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>
    <span class="token comment"># The Dormouse&#39;s story</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中, <code>&lt;head&gt;</code>标签只有一个子节点,但是有2个子孙节点:<code>&lt;head&gt;</code>节点和<code>&lt;head&gt;</code>的子节点, BeautifulSoup 有一个直接子节点(<code>&lt;html&gt;</code>节点),却有很多子孙节点:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## 1</span>
<span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>descendants<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> .string</h4><p>如果tag只有一个 NavigableString 类型子节点,那么这个tag可以使用 .string 得到子节点:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>title_tag<span class="token punctuation">.</span>string
<span class="token comment">## u&#39;The Dormouse&#39;s story&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个tag仅有一个子节点,那么这个tag也可以使用 .string 方法,输出结果与当前唯一子节点的 .string 结果相同:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>head_tag<span class="token punctuation">.</span>contents
<span class="token comment">## [&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;]</span>

head_tag<span class="token punctuation">.</span>string
<span class="token comment">## u&#39;The Dormouse&#39;s story&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="strings-和-stripped-strings" tabindex="-1"><a class="header-anchor" href="#strings-和-stripped-strings" aria-hidden="true">#</a> .strings 和 stripped_strings</h4><p>如果tag中包含多个字符串 [2] ,可以使用 .strings 来循环获取:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> string <span class="token keyword">in</span> soup<span class="token punctuation">.</span>strings<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># u&quot;The Dormouse&#39;s story&quot;</span>
    <span class="token comment"># u&#39;\\n\\n&#39;</span>
    <span class="token comment"># u&quot;The Dormouse&#39;s story&quot;</span>
    <span class="token comment"># u&#39;\\n\\n&#39;</span>
    <span class="token comment"># u&#39;Once upon a time there were three little sisters; and their names were\\n&#39;</span>
    <span class="token comment"># u&#39;Elsie&#39;</span>
    <span class="token comment"># u&#39;,\\n&#39;</span>
    <span class="token comment"># u&#39;Lacie&#39;</span>
    <span class="token comment"># u&#39; and\\n&#39;</span>
    <span class="token comment"># u&#39;Tillie&#39;</span>
    <span class="token comment"># u&#39;;\\nand they lived at the bottom of a well.&#39;</span>
    <span class="token comment"># u&#39;\\n\\n&#39;</span>
    <span class="token comment"># u&#39;...&#39;</span>
    <span class="token comment"># u&#39;\\n&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="父节点" tabindex="-1"><a class="header-anchor" href="#父节点" aria-hidden="true">#</a> 父节点</h3><h4 id="parent" tabindex="-1"><a class="header-anchor" href="#parent" aria-hidden="true">#</a> .parent.</h4><p>通过 .parent 属性来获取某个元素的父节点.在例子“爱丽丝”的文档中,<code>&lt;head&gt;</code>标签是<code>&lt;title&gt;</code>标签的父节点:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>title_tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>title
title_tag
<span class="token comment">## &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>
title_tag<span class="token punctuation">.</span>parent
<span class="token comment">## &lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文档title的字符串也有父节点:<code>&lt;title&gt;</code>标签</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>title_tag<span class="token punctuation">.</span>string<span class="token punctuation">.</span>parent
<span class="token comment">## &lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="parents" tabindex="-1"><a class="header-anchor" href="#parents" aria-hidden="true">#</a> .parents</h4><p>通过元素的 .parents 属性可以递归得到元素的所有父辈节点,下面的例子使用了 .parents 方法遍历了<code>&lt;a&gt;</code>标签到根节点的所有节点.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>link <span class="token operator">=</span> soup<span class="token punctuation">.</span>a
link
<span class="token comment">## &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span>
<span class="token keyword">for</span> parent <span class="token keyword">in</span> link<span class="token punctuation">.</span>parents<span class="token punctuation">:</span>
    <span class="token keyword">if</span> parent <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
<span class="token comment">## p</span>
<span class="token comment">## body</span>
<span class="token comment">## html</span>
<span class="token comment">## [document]</span>
<span class="token comment">## None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="兄弟节点" tabindex="-1"><a class="header-anchor" href="#兄弟节点" aria-hidden="true">#</a> 兄弟节点</h3><h4 id="next-sibling-和-previous-sibling" tabindex="-1"><a class="header-anchor" href="#next-sibling-和-previous-sibling" aria-hidden="true">#</a> .next_sibling 和 .previous_sibling</h4><p>在文档树中,使用 .next_sibling 和 .previous_sibling 属性来查询兄弟节点:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sibling_soup<span class="token punctuation">.</span>b<span class="token punctuation">.</span>next_sibling
<span class="token comment">## &lt;c&gt;text2&lt;/c&gt;</span>

sibling_soup<span class="token punctuation">.</span>c<span class="token punctuation">.</span>previous_sibling
<span class="token comment">## &lt;b&gt;text1&lt;/b&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="next-siblings-和-previous-siblings" tabindex="-1"><a class="header-anchor" href="#next-siblings-和-previous-siblings" aria-hidden="true">#</a> .next_siblings 和 .previous_siblings</h4><p>通过 .next_siblings 和 .previous_siblings 属性可以对当前节点的兄弟节点迭代输出:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> sibling <span class="token keyword">in</span> soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>next_siblings<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>sibling<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># u&#39;,\\n&#39;</span>
    <span class="token comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span>
    <span class="token comment"># u&#39; and\\n&#39;</span>
    <span class="token comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span>
    <span class="token comment"># u&#39;; and they lived at the bottom of a well.&#39;</span>
    <span class="token comment"># None</span>

<span class="token keyword">for</span> sibling <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;link3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>previous_siblings<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>sibling<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># &#39; and\\n&#39;</span>
    <span class="token comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span>
    <span class="token comment"># u&#39;,\\n&#39;</span>
    <span class="token comment"># &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span>
    <span class="token comment"># u&#39;Once upon a time there were three little sisters; and their names were\\n&#39;</span>
    <span class="token comment"># None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回退和前进" tabindex="-1"><a class="header-anchor" href="#回退和前进" aria-hidden="true">#</a> 回退和前进</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>The Dormouse&#39;s story<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;title&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>b<span class="token operator">&gt;</span>The Dormouse&#39;s story<span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>HTML解析器把这段字符串转换成一连串的事件: “打开html标签”,”打开一个head标签”,”打开一个title标签”,”添加一段字符串”,”关闭title标签”,”打开p标签”,等等.Beautiful Soup提供了重现解析器初始化过程的方法.</p><h4 id="next-element-和-previous-element" tabindex="-1"><a class="header-anchor" href="#next-element-和-previous-element" aria-hidden="true">#</a> .next_element 和 .previous_element</h4><p>.next_element 属性指向解析过程中下一个被解析的对象(字符串或tag),结果可能与 .next_sibling 相同,但通常是不一样的. 这是“爱丽丝”文档中最后一个a标签,它的 .next_sibling 结果是一个字符串,因为当前的解析过程 [2] 因为当前的解析过程因为遇到了a标签而中断了:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>last_a_tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">&quot;link3&quot;</span><span class="token punctuation">)</span>
last_a_tag
<span class="token comment">## &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span>

last_a_tag<span class="token punctuation">.</span>next_sibling
<span class="token comment">## &#39;; and they lived at the bottom of a well.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="next-elements-和-previous-elements" tabindex="-1"><a class="header-anchor" href="#next-elements-和-previous-elements" aria-hidden="true">#</a> .next_elements 和 .previous_elements</h4><p>通过 .next_elements 和 .previous_elements 的迭代器就可以向前或向后访问文档的解析内容,就好像文档正在被解析一样:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> element <span class="token keyword">in</span> last_a_tag<span class="token punctuation">.</span>next_elements<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## u&#39;Tillie&#39;</span>
<span class="token comment">## u&#39;;\\nand they lived at the bottom of a well.&#39;</span>
<span class="token comment">## u&#39;\\n\\n&#39;</span>
<span class="token comment">## &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span>
<span class="token comment">## u&#39;...&#39;</span>
<span class="token comment">## u&#39;\\n&#39;</span>
<span class="token comment">## None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="beautifulsoup中的类" tabindex="-1"><a class="header-anchor" href="#beautifulsoup中的类" aria-hidden="true">#</a> BeautifulSoup中的类</h2><h3 id="beautifulsoup类" tabindex="-1"><a class="header-anchor" href="#beautifulsoup类" aria-hidden="true">#</a> BeautifulSoup类</h3><h4 id="构建beautifulsoup对象" tabindex="-1"><a class="header-anchor" href="#构建beautifulsoup对象" aria-hidden="true">#</a> 构建BeautifulSoup对象</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">&quot;&lt;html&gt;data&lt;/html&gt;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h4><p>可以吧BeautifulSoup对象当成一个Tag对象, 对应了整个<code>DOM</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup<span class="token punctuation">.</span>name
<span class="token comment">## u&#39;[document]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tag类" tabindex="-1"><a class="header-anchor" href="#tag类" aria-hidden="true">#</a> Tag类</h3><h4 id="构建tag对象" tabindex="-1"><a class="header-anchor" href="#构建tag对象" aria-hidden="true">#</a> 构建Tag对象</h4><p>在<code>DOM</code>中获得子标签</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">&#39;&lt;b class=&quot;boldest&quot;&gt;Extremely bold&lt;/b&gt;&#39;</span><span class="token punctuation">)</span>
tag <span class="token operator">=</span> soup<span class="token punctuation">.</span>b
<span class="token builtin">type</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
<span class="token comment">## &lt;class &#39;bs4.element.Tag&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="tag属性" tabindex="-1"><a class="header-anchor" href="#tag属性" aria-hidden="true">#</a> Tag属性</h4><h5 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> Name</h5><p>其实就是标签的名字</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tag<span class="token punctuation">.</span>name
<span class="token comment">## u&#39;b&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="attributes" tabindex="-1"><a class="header-anchor" href="#attributes" aria-hidden="true">#</a> Attributes</h5><p>这里可以获得属性的值，在获得href类似标签的时候特别有用 一个tag可能有很多个属性. tag <code>&lt;b class=&quot;boldest&quot;&gt;</code> 有一个 “class” 的属性,值为 “boldest”.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tag<span class="token punctuation">.</span>attrs
<span class="token comment">## {u&#39;class&#39;: u&#39;boldest&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以获得指定的属性值:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tag<span class="token punctuation">[</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">]</span>
<span class="token comment">## u&#39;boldest&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可能属性值是多个,则返回列表</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>css_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">&#39;&lt;p class=&quot;body strikeout&quot;&gt;&lt;/p&gt;&#39;</span><span class="token punctuation">)</span>
css_soup<span class="token punctuation">.</span>p<span class="token punctuation">[</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">]</span>
<span class="token comment">## [&quot;body&quot;, &quot;strikeout&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="navigablestring-类" tabindex="-1"><a class="header-anchor" href="#navigablestring-类" aria-hidden="true">#</a> NavigableString 类</h3><p>NavigableString 对象支持 遍历文档树 和 搜索文档树 中定义的大部分属性, 并非全部.尤其是,一个字符串不能包含其它内容(tag能够包含字符串或是其它tag),字符串不支持 .contents 或 .string 属性或 find() 方法.</p><h4 id="构建navigablestring对象" tabindex="-1"><a class="header-anchor" href="#构建navigablestring对象" aria-hidden="true">#</a> 构建NavigableString对象</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tag<span class="token punctuation">.</span>string
<span class="token comment">## u&#39;Extremely bold&#39;</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
<span class="token comment">## &lt;class &#39;bs4.element.NavigableString&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NavigableString不可以直接编辑,可以通过replace_with来替换</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tag<span class="token punctuation">.</span>string<span class="token punctuation">.</span>replace_with<span class="token punctuation">(</span><span class="token string">&quot;No longer bold&quot;</span><span class="token punctuation">)</span>
tag
<span class="token comment">## &lt;blockquote&gt;No longer bold&lt;/blockquote&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以将NavigableString转换为unicode字符串</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>unicode_string <span class="token operator">=</span> <span class="token builtin">unicode</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>string<span class="token punctuation">)</span>
unicode_string
<span class="token comment">## u&#39;Extremely bold&#39;</span>
<span class="token builtin">type</span><span class="token punctuation">(</span>unicode_string<span class="token punctuation">)</span>
<span class="token comment">## &lt;type &#39;unicode&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="comment" tabindex="-1"><a class="header-anchor" href="#comment" aria-hidden="true">#</a> Comment</h4><p>Comment 对象是一个特殊类型的 NavigableString 对象:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>markup <span class="token operator">=</span> <span class="token string">&quot;&lt;b&gt;&lt;!--Hey, buddy. Want to buy a used parser&lt;/b&gt;&quot;</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>markup<span class="token punctuation">)</span>
comment <span class="token operator">=</span> soup<span class="token punctuation">.</span>b<span class="token punctuation">.</span>string
<span class="token builtin">type</span><span class="token punctuation">(</span>comment<span class="token punctuation">)</span>
<span class="token comment">## &lt;class &#39;bs4.element.Comment&#39;&gt;</span>
comment
<span class="token comment">## u&#39;Hey, buddy. Want to buy a used parser&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CData , ProcessingInstruction , Declaration , Doctype .与 Comment 对象类似,这些类都是 NavigableString 的子类,只是添加了一些额外的方法的字符串独享.</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="css选择器" tabindex="-1"><a class="header-anchor" href="#css选择器" aria-hidden="true">#</a> CSS选择器</h3><p>在 Tag 或 BeautifulSoup 对象的 .select() 方法中传入字符串参数, 即可使用CSS选择器的语法找到tag:</p><p>参考文献: http://beautifulsoup.readthedocs.io/zh_CN/latest/</p>`,84);function r(m,v){const s=e("font");return t(),i("div",null,[u,l(s,{style:{background:"hotpink"}},{default:o(()=>[p("这样只能获取当前tag的第一个tag")]),_:1}),d])}const h=a(c,[["render",r],["__file","BeautifulSoup.html.vue"]]);export{h as default};
