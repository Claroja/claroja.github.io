import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as t}from"./app-nD1Z-e8V.js";const e={},p=t(`<h1 id="setbuf" tabindex="-1"><a class="header-anchor" href="#setbuf" aria-hidden="true">#</a> setbuf</h1><p><code>void setbuf ( FILE * stream, char * buffer );</code> Set stream buffer</p><ol><li>设置文件描述符的缓冲区大小</li><li>stream buffer是一个 block of data,在i/o操作和 physical file(文件) 之间</li><li>output buffers,写出:数据会放在buffer区,直到填满,然后会flushed(发送给 物理文件并清空buffer区)</li><li>input buffers,也是如此</li><li>Stream buffers can be explicitly flushed by calling <code>fflush</code>, <code>fclose</code> and <code>freopen</code>或者程序terminates normally(正常终止)会自动调用<code>fllush</code></li><li>所有打开的文件都默认带有<code>buffer</code></li><li>stdin and stdout are fully buffered by default if they are known to not refer to an interactive . Otherwise, they may either be line buffered or unbuffered by default</li><li>通过setvbuf 改变缓冲方式</li></ol><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>stream</td><td>FILE object</td></tr><tr><td>buffer</td><td>存放buffer的数组</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span>BUFSIZ<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;缓冲区大小是%d字节\\n&quot;</span><span class="token punctuation">,</span> BUFSIZ<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//屏幕此时没有输出,因为存在buf数组里</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//屏幕输出</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="setvbuf" tabindex="-1"><a class="header-anchor" href="#setvbuf" aria-hidden="true">#</a> setvbuf</h1><p><code>int setvbuf ( FILE * stream, char * buffer, int mode, size_t size );</code>Change stream buffering</p><ol><li>设置缓冲方式(Full buffering,Line buffering,No buffering)</li></ol><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>stream</td><td>Pointer to a FILE object</td></tr><tr><td>buffer</td><td>User allocated buffer. Shall be at least size bytes long.如果空,会自动设置默认buffer(BUFSIZ)</td></tr><tr><td>mode</td><td>三种</td></tr><tr><td>size</td><td>Buffer size, in bytes.</td></tr></tbody></table><table><thead><tr><th>mode</th><th>描述</th></tr></thead><tbody><tr><td>_IOFBF</td><td>Full buffering,写出:buffer区间满,刷新,读入:buffer空,刷新</td></tr><tr><td>_IOLBF</td><td>Line buffering,写出:buffer区满或碰到换行符,刷新,读入:buffer空,或换行符,刷新</td></tr><tr><td>_IONBF</td><td>No buffering,没有缓冲区,buffer and size参数被忽略</td></tr></tbody></table><table><thead><tr><th>返回</th><th>描述</th></tr></thead><tbody><tr><td>成功</td><td>返回0</td></tr><tr><td>失败</td><td>非0</td></tr></tbody></table><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">warning</span><span class="token punctuation">(</span>disable<span class="token operator">:</span><span class="token number">4996</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//直接输出到屏幕,不需要刷新缓冲区</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="fflush" tabindex="-1"><a class="header-anchor" href="#fflush" aria-hidden="true">#</a> fflush</h1><p><code>int fflush ( FILE * stream );</code> Flush stream</p><ol><li>刷新缓冲区</li></ol><p>参考: http://www.gnu.org/software/libc/manual/html_node/I_002fO-on-Streams.html#I_002fO-on-Streams</p>`,16),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","2_5buffer.html.vue"]]);export{d as default};
