import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c,e as d}from"./app-A10JnHE0.js";const a={},i=d('<h1 id="合并数据集" tabindex="-1"><a class="header-anchor" href="#合并数据集" aria-hidden="true">#</a> 合并数据集</h1><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ol><li>横向合并表优先考虑使用<code>Merge</code>, 备选使用<code>join</code>和<code>concat</code></li><li>纵向合并表优先考虑使用<code>concat</code>, 备选使用<code>append</code></li></ol><h2 id="方法的解释" tabindex="-1"><a class="header-anchor" href="#方法的解释" aria-hidden="true">#</a> 方法的解释</h2><ol><li><code>Concat</code> 可以纵向(rows, axis=0), 也可以横向(columns, axis=1)</li><li><code>Append</code> 等价于concat(axis=0, join=&#39;outer&#39;), 被废弃了</li><li><code>Merge</code> 基于任何列的横向合并, 通过&#39;left_on&#39;, &#39;right_on&#39;, &#39;on&#39;控制</li><li><code>Join</code> 基于索引(indexes)的横向合并, 通过&#39;left&#39;,&#39;right&#39;,&#39;inner&#39;,&#39;couter&#39;来控制</li></ol><h2 id="方法选择" tabindex="-1"><a class="header-anchor" href="#方法选择" aria-hidden="true">#</a> 方法选择</h2><ol><li><p>在<code>merge</code>方法中, 提供了<code>how: {‘left’, ‘right’, ‘outer’, ‘inner’, ‘cross’}, default ‘inner’</code>, 涵盖了所有关联表动作</p></li><li><p>在<code>concat</code>方法中, 只提供了<code>join: {‘inner’, ‘outer’}, default ‘outer’</code>, 虽然在<code>axis=1</code>时, 可以横向连接, 但是不如<code>merge</code>全面, 因此<code>concate</code>更多用在纵向连接</p><p>✨但是concat的好处是可以同时链接3个及以上的表</p></li><li><p><code>Append</code>和<code>Join</code>是特例不使用</p></li></ol><p>参考: https://pandas.pydata.org/docs/user_guide/merging.html#concatenating-objects https://pandas.pydata.org/docs/user_guide/merging.html#database-style-dataframe-or-named-series-joining-merging</p>',8),n=[i];function t(r,l){return o(),c("div",null,n)}const p=e(a,[["render",t],["__file","合并数据集.html.vue"]]);export{p as default};
