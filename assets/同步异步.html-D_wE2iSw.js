const t=JSON.parse('{"key":"v-1902e25e","path":"/%E5%89%8D%E7%AB%AF/javaScript/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5.html","title":"同步异步","lang":"zh-CN","frontmatter":{"description":"同步异步 同步异步 JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。 为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。 同步任务: 在主线程上执行, 形成一个任务队列 异步任务: 通过回调函数实现, 形成一个任务队列 - 普通事件, 如: click, resize - 资源加载, 如: load, error - 定时器, 如: setInterval, setTimeout","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E5%89%8D%E7%AB%AF/javaScript/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"同步异步"}],["meta",{"property":"og:description","content":"同步异步 同步异步 JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。 为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。 同步任务: 在主线程上执行, 形成一个任务队列 异步任务: 通过回调函数实现, 形成一个任务队列 - 普通事件, 如: click, resize - 资源加载, 如: load, error - 定时器, 如: setInterval, setTimeout"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-27T13:17:01.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2023-11-27T13:17:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"同步异步\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-27T13:17:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":3,"title":"同步异步","slug":"同步异步-1","link":"#同步异步-1","children":[]}],"git":{"createdTime":1701091021000,"updatedTime":1701091021000,"contributors":[{"name":"claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.79,"words":236},"filePathRelative":"前端/javaScript/同步异步/同步异步.md","localizedDate":"2023年11月27日","excerpt":"<h1> 同步异步</h1>\\n<h3> 同步异步</h3>\\n<p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。</p>\\n<p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。</p>\\n<p>同步任务: 在主线程上执行, 形成一个任务队列\\n异步任务: 通过回调函数实现, 形成一个任务队列\\n- 普通事件, 如: click, resize\\n- 资源加载, 如: load, error\\n- 定时器, 如: setInterval, setTimeout</p>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
