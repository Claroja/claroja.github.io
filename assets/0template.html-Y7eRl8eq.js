import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,e as i}from"./app-A10JnHE0.js";const d={},n=i(`<h2 id="template" tabindex="-1"><a class="header-anchor" href="#template" aria-hidden="true">#</a> template</h2><p><code>&lt;template&gt;</code>中主要操作指令来进行渲染.</p><h2 id="指令的概念" tabindex="-1"><a class="header-anchor" href="#指令的概念" aria-hidden="true">#</a> 指令的概念</h2><p>指令是带有<code>v-</code>的属性. 一个指令的任务是在其表达式的值变化时响应式地更新 DOM。下例中, <code>v-if</code> 指令会基于表达式 <code>seen</code> 的值的真假来移除/插入该 <code>&lt;p&gt;</code> 元素。</p><div class="language-htm line-numbers-mode" data-ext="htm"><pre class="language-htm"><code>&lt;p v-if=&quot;seen&quot;&gt;Now you see me&lt;/p&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><h3 id="一般参数" tabindex="-1"><a class="header-anchor" href="#一般参数" aria-hidden="true">#</a> 一般参数</h3><p>一些指令会需要参数, 例如用 <code>v-bind</code> 指令来响应式地更新一个 HTML 属性. 举两个例子:</p><ol><li><p>下例中 <code>href</code> 就是一个参数，它告诉 <code>v-bind</code> 指令将表达式 <code>url</code> 的值绑定到元素的 <code>href</code> 属性上。</p><div class="language-htm line-numbers-mode" data-ext="htm"><pre class="language-htm"><code>&lt;a v-bind:href=&quot;url&quot;&gt; ... &lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>下例中的参数是要监听的事件名称：click。</p><div class="language-htm line-numbers-mode" data-ext="htm"><pre class="language-htm"><code>&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;
&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="动态参数" tabindex="-1"><a class="header-anchor" href="#动态参数" aria-hidden="true">#</a> 动态参数</h3><p>这里的 attributeName 会作为一个 JavaScript 表达式被动态执行，计算得到的值会被用作最终的参数。举例来说，如果你的组件实例有一个数据属性 attributeName，其值为 &quot;href&quot;，那么这个绑定就等价于 v-bind:href。</p><div class="language-htm line-numbers-mode" data-ext="htm"><pre class="language-htm"><code>&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;
&lt;a :[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相似地，你还可以将一个函数绑定到动态的事件名称上：</p><div class="language-htm line-numbers-mode" data-ext="htm"><pre class="language-htm"><code>&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;

&lt;!-- 简写 --&gt;
&lt;a @[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="修饰符-modifiers" tabindex="-1"><a class="header-anchor" href="#修饰符-modifiers" aria-hidden="true">#</a> 修饰符(Modifiers)</h2><p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 .prevent 修饰符会告知 v-on 指令对触发的事件调用 event.preventDefault()：</p><div class="language-htm line-numbers-mode" data-ext="htm"><pre class="language-htm"><code>&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="指令总结" tabindex="-1"><a class="header-anchor" href="#指令总结" aria-hidden="true">#</a> 指令总结</h2><figure><img src="https://cn.vuejs.org/assets/directive.DtZKvoAo.png" alt="指令" tabindex="0" loading="lazy"><figcaption>指令</figcaption></figure><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ol><li>https://cn.vuejs.org/guide/essentials/template-syntax.html</li></ol>`,21),l=[n];function r(s,o){return a(),t("div",null,l)}const h=e(d,[["render",r],["__file","0template.html.vue"]]);export{h as default};
