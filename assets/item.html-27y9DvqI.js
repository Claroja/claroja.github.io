const n=JSON.parse(`{"key":"v-33a26af0","path":"/4%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/3_2pytorch/%E5%BC%A0%E9%87%8F/item.html","title":"item","lang":"zh-CN","frontmatter":{"description":"item loss 取纯数值，会用到loss.item(), 返回的是python number类型. 此方法不需要考虑tensor是再GPU还是CPU, 也不需要考虑requires_grad=True而需要调用detach(), item()会自动处理这些. item()只适用于tensor只包含一个元素的时候(大多数时loss就只有一个值). 如果是多个值可以使用tolist() import torch x = torch.tensor([0.1], requires_grad=True, device='cuda') print(x) # tensor([-0.4717], device='cuda:0', requires_grad=True) y = x.item() print(y, type(y)) ## -0.4717346727848053 &lt;class 'float'&gt; x = torch.tensor([0.1,0.2], requires_grad=True, device='cuda') y = x.tolist() print(y, type(y))","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/3_2pytorch/%E5%BC%A0%E9%87%8F/item.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"item"}],["meta",{"property":"og:description","content":"item loss 取纯数值，会用到loss.item(), 返回的是python number类型. 此方法不需要考虑tensor是再GPU还是CPU, 也不需要考虑requires_grad=True而需要调用detach(), item()会自动处理这些. item()只适用于tensor只包含一个元素的时候(大多数时loss就只有一个值). 如果是多个值可以使用tolist() import torch x = torch.tensor([0.1], requires_grad=True, device='cuda') print(x) # tensor([-0.4717], device='cuda:0', requires_grad=True) y = x.item() print(y, type(y)) ## -0.4717346727848053 &lt;class 'float'&gt; x = torch.tensor([0.1,0.2], requires_grad=True, device='cuda') y = x.tolist() print(y, type(y))"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"item\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.46,"words":138},"filePathRelative":"4机器学习/3_2pytorch/张量/item.md","localizedDate":"2025年2月21日","excerpt":"<h1> item</h1>\\n<p>loss 取纯数值，会用到<code>loss.item()</code>, 返回的是python number类型. 此方法不需要考虑tensor是再GPU还是CPU, 也不需要考虑<code>requires_grad=True</code>而需要调用<code>detach()</code>, <code>item()</code>会自动处理这些.</p>\\n<p><code>item()</code>只适用于tensor只包含一个元素的时候(大多数时loss就只有一个值). 如果是多个值可以使用<code>tolist()</code></p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> torch\\n\\nx <span class=\\"token operator\\">=</span> torch<span class=\\"token punctuation\\">.</span>tensor<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0.1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> requires_grad<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">,</span> device<span class=\\"token operator\\">=</span><span class=\\"token string\\">'cuda'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># tensor([-0.4717], device='cuda:0', requires_grad=True)</span>\\n\\ny <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">.</span>item<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">type</span><span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">## -0.4717346727848053 &lt;class 'float'&gt;</span>\\n\\nx <span class=\\"token operator\\">=</span> torch<span class=\\"token punctuation\\">.</span>tensor<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0.1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">0.2</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> requires_grad<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">,</span> device<span class=\\"token operator\\">=</span><span class=\\"token string\\">'cuda'</span><span class=\\"token punctuation\\">)</span>\\ny <span class=\\"token operator\\">=</span> x<span class=\\"token punctuation\\">.</span>tolist<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">type</span><span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{n as data};
