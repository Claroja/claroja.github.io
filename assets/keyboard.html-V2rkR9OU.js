import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,e}from"./app-jdLxCr9I.js";const o={},t=e(`<h1 id="keyboard" tabindex="-1"><a class="header-anchor" href="#keyboard" aria-hidden="true">#</a> keyboard</h1><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><p>映射jkhl与方向键</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> keyboard
keyboard<span class="token punctuation">.</span>remap_hotkey<span class="token punctuation">(</span><span class="token string">&#39;alt+j&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;down&#39;</span><span class="token punctuation">)</span>
keyboard<span class="token punctuation">.</span>remap_hotkey<span class="token punctuation">(</span><span class="token string">&#39;alt+k&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;up&#39;</span><span class="token punctuation">)</span>
keyboard<span class="token punctuation">.</span>remap_hotkey<span class="token punctuation">(</span><span class="token string">&#39;alt+h&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">)</span>
keyboard<span class="token punctuation">.</span>remap_hotkey<span class="token punctuation">(</span><span class="token string">&#39;alt+l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;right&#39;</span><span class="token punctuation">)</span>
keyboard<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">Start-Process</span> <span class="token operator">-</span>FilePath <span class="token string">&quot;python&quot;</span> <span class="token operator">-</span>ArgumentList <span class="token string">&quot;./hotkey.py&quot;</span> <span class="token operator">-</span>NoNewWindow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="入门案例" tabindex="-1"><a class="header-anchor" href="#入门案例" aria-hidden="true">#</a> 入门案例</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> keyboard
keyboard<span class="token punctuation">.</span>press_and_release<span class="token punctuation">(</span><span class="token string">&#39;shift+s, space&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 按下并释放了组合键Shift+S，然后按下并释放了空格键。</span>
keyboard<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;The quick brown fox jumps over the lazy dog.&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 将字符串The quick brown fox jumps over the lazy dog.写入当前焦点的应用程序。相当于模拟了键盘的按键输入。</span>
keyboard<span class="token punctuation">.</span>add_hotkey<span class="token punctuation">(</span><span class="token string">&#39;ctrl+shift+a&#39;</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&#39;triggered&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hotkey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 注册了一个热键Ctrl+Shift+A，当用户按下该组合键时，回调函数print将被调用，并将参数(&#39;triggered&#39;, &#39;hotkey&#39;)传递给该回调函数</span>
keyboard<span class="token punctuation">.</span>add_hotkey<span class="token punctuation">(</span><span class="token string">&#39;page up, page down&#39;</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> keyboard<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 注册了一个热键Page Up, Page Down，当用户按下该组合键时，将调用一个匿名函数，该匿名函数会将字符串foobar写入当前焦点的应用程序。</span>
keyboard<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token string">&#39;esc&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 阻塞程序，直到用户按下Esc键为止</span>
recorded <span class="token operator">=</span> keyboard<span class="token punctuation">.</span>record<span class="token punctuation">(</span>until<span class="token operator">=</span><span class="token string">&#39;esc&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 记录键盘事件，直到用户按下Esc键为止</span>
keyboard<span class="token punctuation">.</span>play<span class="token punctuation">(</span>recorded<span class="token punctuation">,</span> speed_factor<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 录的键盘事件以三倍的速度回放</span>
keyboard<span class="token punctuation">.</span>add_abbreviation<span class="token punctuation">(</span><span class="token string">&#39;@@&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;my.long.email@example.com&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 注册了一个缩写，当用户输入@@并按下空格键时，会自动替换为my.long.email@example.com</span>
keyboard<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 将程序无限阻塞，类似于while True的效果，直到用户终止程序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><h3 id="模拟输出" tabindex="-1"><a class="header-anchor" href="#模拟输出" aria-hidden="true">#</a> 模拟输出</h3><ol><li><p><code>keyboard.send(hotkey, do_press=True, do_release=True)</code>: 发送操作系统的事件</p><ol><li><code>hotkey</code>: 可以是<code>scan code (e.g. 57 for space)</code>, <code>single key (e.g. &#39;space&#39;)</code> or <code>multi-key, multi-step hotkey (e.g. &#39;alt+F4, enter&#39;)</code></li><li><code>do_press</code>: if true then press events are sent. Defaults to True.</li><li><code>do_release</code>: if true then release events are sent. Defaults to True.</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>send<span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">)</span>
send<span class="token punctuation">(</span><span class="token string">&#39;ctrl+alt+del&#39;</span><span class="token punctuation">)</span>
send<span class="token punctuation">(</span><span class="token string">&#39;alt+F4, enter&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>keyboard.press(hotkey)</code>: 按下一个<code>hotkey</code></p></li><li><p><code>keyboard.release(hotkey)</code>: 释放一个<code>hotkey</code></p></li><li><p><code>keyboard.is_pressed(hotkey)</code>: <code>hotkey</code>是否被按下</p></li><li><p><code>keyboard.write(text, delay=0, restore_state_after=True, exact=None)</code>: 模拟键盘输入</p></li></ol><h3 id="监听输入-钩子" tabindex="-1"><a class="header-anchor" href="#监听输入-钩子" aria-hidden="true">#</a> 监听输入(钩子)</h3><h4 id="键位监听-钩子" tabindex="-1"><a class="header-anchor" href="#键位监听-钩子" aria-hidden="true">#</a> 键位监听(钩子)</h4><ol><li><p><code>keyboard.hook(callback, suppress=False, on_remove=&lt;lambda&gt;)</code>: 在全局添加一个钩子, 任何键位按下或者抬起都会触发该函数. 该函数的参数是<code>KeyboardEvent</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">hook_func</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
keyboard<span class="token punctuation">.</span>hook<span class="token punctuation">(</span>hook_func<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>keyboard.on_press(callback, suppress=False)</code>: 按下键位, 触发钩子</p></li><li><p><code>keyboard.on_release(callback, suppress=False)</code>: 抬起键位, 触发钩子</p></li><li><p><code>keyboard.hook_key(key, callback, suppress=False)</code>: 为单独的键位抬起和按下, 设置钩子</p></li><li><p><code>keyboard.on_press_key(key, callback, suppress=False)</code>:</p></li><li><p><code>keyboard.on_release_key(key, callback, suppress=False)</code>:</p></li><li><p><code>keyboard.unhook(remove)</code>: 删除指定钩子, 参数是方法名或者<code>hook</code>对象</p></li><li><p><code>keyboard.unhook_all()</code>: 删除所有钩子</p></li><li><p><code>class keyboard.KeyboardEvent</code></p><ol><li><code>KeyboardEvent.device</code></li><li><code>KeyboardEvent.event_type</code></li><li><code>KeyboardEvent.is_keypad</code></li><li><code>KeyboardEvent.modifiers</code></li><li><code>KeyboardEvent.name</code></li><li><code>KeyboardEvent.scan_code</code></li><li><code>KeyboardEvent.time</code></li><li><code>KeyboardEvent.to_json(self, ensure_ascii=False)</code></li></ol></li></ol><h4 id="字符串监听" tabindex="-1"><a class="header-anchor" href="#字符串监听" aria-hidden="true">#</a> 字符串监听</h4><p><code>keyboard.add_word_listener(word, callback, triggers=[&#39;space&#39;], match_suffix=False, timeout=2)</code>: 监听字符串输入, 触发回调 <code>keyboard.remove_word_listener(word_or_handler)</code>: 删除字符串监听</p><h3 id="快捷键" tabindex="-1"><a class="header-anchor" href="#快捷键" aria-hidden="true">#</a> 快捷键</h3><h4 id="热键" tabindex="-1"><a class="header-anchor" href="#热键" aria-hidden="true">#</a> 热键</h4><ol><li><p><code>keyboard.block_key(key)</code>: 禁用指定的键位</p></li><li><p><code>keyboard.remap_key(src, dst)</code>: 重新映射键位</p></li><li><p><code>keyboard.remap_hotkey(src, dst, suppress=True, trigger_on_release=False)</code>: <code>remap(&#39;alt+w&#39;, &#39;ctrl+up&#39;)</code>: 重新映射键位</p></li><li><p><code>keyboard.add_hotkey(hotkey, callback, args=(), suppress=False, timeout=1, trigger_on_release=False)</code>: 添加热键</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 三种键位的输入方法</span>
add_hotkey<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;space was pressed&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
add_hotkey<span class="token punctuation">(</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;space was pressed&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
add_hotkey<span class="token punctuation">(</span><span class="token string">&#39;Space&#39;</span><span class="token punctuation">,</span> <span class="token keyword">print</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;space was pressed&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 单个行为</span>
add_hotkey<span class="token punctuation">(</span><span class="token string">&#39;ctrl+q&#39;</span><span class="token punctuation">,</span> quit<span class="token punctuation">)</span>
<span class="token comment"># 多个行为</span>
add_hotkey<span class="token punctuation">(</span><span class="token string">&#39;ctrl+alt+enter, space&#39;</span><span class="token punctuation">,</span> some_callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>keyboard.remove_hotkey(hotkey_or_callback)</code>: 删除热键</p></li><li><p><code>keyboard.unhook_all_hotkeys()</code>: 删除所有的hotkey, 包含<code>abbreviations</code>, <code>word listeners</code>, <code>recorders</code> and <code>waits</code></p></li><li><p><code>keyboard.get_hotkey_name(names=None)</code>: 获得键位名</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>get_hotkey_name<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;left ctrl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># &quot;ctrl+shift+plus&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="热串" tabindex="-1"><a class="header-anchor" href="#热串" aria-hidden="true">#</a> 热串</h4><p><code>keyboard.add_abbreviation(source_text, replacement_text, match_suffix=False, timeout=2)</code>: 添加字符串缩写</p><h3 id="阻塞" tabindex="-1"><a class="header-anchor" href="#阻塞" aria-hidden="true">#</a> 阻塞</h3><ol><li><code>keyboard.wait(hotkey=None, suppress=False, trigger_on_release=False)</code>: 阻塞, 直到指定键位按下</li><li><code>keyboard.read_event(suppress=False)</code>: 阻塞, 直到有事件发生</li><li><code>keyboard.read_key(suppress=False)</code>: 阻塞, 直到有键位按下</li><li><code>keyboard.read_hotkey(suppress=True)</code>: 阻塞, 直到有热键按下</li></ol><h3 id="录制" tabindex="-1"><a class="header-anchor" href="#录制" aria-hidden="true">#</a> 录制</h3><p><code>keyboard.get_typed_strings(events, allow_backspace=True)</code>: 获得输入的字符串 <code>keyboard.start_recording(recorded_events_queue=None)</code>: 开始录制 <code>keyboard.stop_recording()</code>: 结束录制 <code>keyboard.record(until=&#39;escape&#39;, suppress=False, trigger_on_release=False)</code>: 录制, 直到指定热键按下 <code>keyboard.play(events, speed_factor=1.0)</code>: 播放事件</p><h3 id="基础信息" tabindex="-1"><a class="header-anchor" href="#基础信息" aria-hidden="true">#</a> 基础信息</h3><ol><li><code>keyboard.all_modifiers</code>: <code>{&#39;alt&#39;, &#39;alt gr&#39;, &#39;ctrl&#39;, &#39;left alt&#39;, &#39;left ctrl&#39;, &#39;left shift&#39;, &#39;left windows&#39;, &#39;right alt&#39;, &#39;right ctrl&#39;, &#39;right shift&#39;, &#39;right windows&#39;, &#39;shift&#39;, &#39;windows&#39;}</code></li><li><code>keyboard.sided_modifiers</code>: <code>{&#39;alt&#39;, &#39;ctrl&#39;, &#39;shift&#39;, &#39;windows&#39;}</code></li><li><code>keyboard.normalize_name(name)</code>: 标准化快捷键名称</li><li><code>keyboard.parse_hotkey(&quot;alt+shift+a, alt+b, c&quot;)</code>: (((56, 57400), (42, 54), (30,)), ((56, 57400), (48, 57392)), ((46, 57390),)) ((alt_codes, shift_codes, a_codes), (alt_codes, b_codes), (c_codes,))</li></ol><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p><code>keyboard.call_later(fn, args=(), delay=0.001)</code>: 新线程添加一个方法稍后调用 <code>keyboard.stash_state()</code>: 当前按下的所有<code>scan codes</code><code>keyboard.restore_state(scan_codes)</code>: 保存<code>scan codes</code><code>keyboard.restore_modifiers(scan_codes)</code>: 仅保存装饰按键</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ul><li>https://github.com/boppreh/keyboard</li><li>https://blog.csdn.net/weixin_45081575/article/details/131170164</li><li>https://blog.csdn.net/coco56/article/details/107847467</li></ul>`,30),c=[t];function p(l,i){return s(),n("div",null,c)}const u=a(o,[["render",p],["__file","keyboard.html.vue"]]);export{u as default};
