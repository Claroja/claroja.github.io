import{_ as i}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as l,e as d}from"./app-SnI5rGHA.js";const a="/assets/1-uec7PoFf.png",e="/assets/3-msanyKlZ.png",p="/assets/4-9Cjc2KSU.png",r="/assets/5-27CfEdKj.png",o="/assets/6-AMG48zvr.png",s="/assets/7-jYWtpWIH.png",h="/assets/8-OrZsmrAi.png",n="/assets/10-A1IvA_4r.png",P="/assets/11-x_W1QtIM.png",c="/assets/12-tnw9qsxG.png",g="/assets/13-qp-YgjzF.png",f="/assets/14-kDGK3TTR.png",u="/assets/15-FApb47yT.png",B="/assets/16-dgj6XV98.png",S="/assets/17-gYUfCfcx.png",C="/assets/20-HfoRCDM1.png",b={},_=d('<h1 id="操作系统知识" tabindex="-1"><a class="header-anchor" href="#操作系统知识" aria-hidden="true">#</a> 操作系统知识</h1><h2 id="操作系统概述" tabindex="-1"><a class="header-anchor" href="#操作系统概述" aria-hidden="true">#</a> 操作系统概述</h2><ol><li><p>操作系统定义：能有效地组织和管理系统中的各种软/硬件资源，合理地组织计算机系统工作流程，控制程序的执行，并且向用户提供一个良好的工作环境和友好的接口。</p></li><li><p>操作系统有两个重要的作用：第一，通过资源管理提高计算机系统的效率；第二，改善人机界面向用户提供友好的工作环境。</p></li><li><p>操作系统的4个特征是并发性、共享性、虚拟性和不确定性。</p></li><li><p>操作系统的功能：</p><ol><li>进程管理。实质上是对处理机的执行“时间”进行管理，采用多道程序等技术将CPU的时间合理地分配给每个任务，主要包括进程控制、进程同步、进程通信和进程调度。</li><li>文件管理。主要包括文件存储空间管理、目录管理、文件的读/写管理和存取控制。</li><li>存储管理。存储管理是对主存储器“空间”进行管理，主要包括存储分配与回收、存储保护、地址映射（变换）和主存扩充。</li><li>设备管理。实质是对硬件设备的管理，包括对输入/输出设备的分配、启动、完成和回收。</li><li>作业管理。包括任务、界面管理、人机交互、图形界面、语音控制和虚拟现实等。</li></ol></li><li><p>操作系统的分类：</p><ol><li>批处理操作系统：单道批处理和多道批处理（主机与外设可并行）。</li><li>分时操作系统：一个计算机系统与多个终端设备连接。将CPU的工作时间划分为许多很短的时间片，轮流为各个终端的用户服务。</li><li>实时操作系统：实时是指计算机对于外来信息能够以足够快的速度进行处理，并在被控对象允许的时间范围内做出快速反应。实时系统对交互能力要求不高，但要求可靠性有保障。</li><li>网络操作系统：是使联网计算机能方便而有效地共享网络资源，为网络用户提供各种服务的软件和有关协议的集合。三种模式：集中模式、客户端/服务器模式、对等模式。</li><li>分布式操作系统：分布式计算机系统是由多个分散的计算机经连接而成的计算机系统，系统中的计算机无主、次之分，任意两台计算机可以通过通信交换信息。</li><li>微型计算机操作系统：简称微机操作系统，常用的有Vindows、Mac OS、Linux。</li></ol></li><li><p>嵌入式操作系统主要特点：</p><ol><li>微型化。从性能和成本角度考虑，希望占用的资源和系统代码量少，如内存少、字长短、运行速度有限、能源少（用微小型电池）</li><li>可定制。从减少成本和缩短研发周期考虑，要求嵌入式操作系统能运行在不同的微处理器平台上，能针对硬件变化进行结构与功能上的配置，以满足不同应用需要。</li><li>实时性。嵌入式操作系统主要应用于过程控制、数据采集、传输通信、多媒体信息及关键要害领域需要迅速响应的场合，所以对实时性要求较高。</li><li>可靠性。系统构件、模块和体系结构必须达到应有的可靠性，对关键要害应用还要提供容错和防故障措施。</li><li>易移植性。为了提高系统的易移植性，通常采用硬件抽象层和板级支撑包的底层设计技术。</li></ol><p>嵌入式系统初始化过程按照自底向上、从硬件到软件的次序依次为：片级初始化→板级初始化→系统初始化。</p></li></ol><h2 id="进程组成和状态" tabindex="-1"><a class="header-anchor" href="#进程组成和状态" aria-hidden="true">#</a> 进程组成和状态</h2><p>进程的组成：进程控制块PCB（唯一标志）、程序（描述进程要做什么）、数据（存放进程执行时所需数据） 进程基础的状态是下左图中的三态图。需要熟练掌握左下图中的进程三态之间的转换。</p><p>PCB(Process Control Block)进程控制块, TCB(Thread Control Block)线程控制块, FCB(File Control Block)文件控制块</p><p>运行: CPU + 其他条件(比如等待硬盘数据) 就绪: 没有CPU + 只有其他条件(比如等待硬盘数据) 阻塞: 没有CPU + 没有其他条件(比如等待硬盘数据)</p><ol><li>阻塞 单向到 就绪</li><li>就绪 单向到 运行</li><li>运行 双向到 就绪或阻塞</li></ol><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在单处理机系统中，采用先来先服务调度算法。系统中有4个进程P1、P2、P3、P4(假设进程按此顺序到达），其中P1为运行状态，P2为就绪状态，P3和P4为等待状态，且P3等待打印机，P4等待扫描仪。若P1（）,则P1、P2、P3和P4的状态应分别为（） A.时间片到 B.释放了扫描仪 C.释放了打印机 D.已完成</p><p>A.等待、就绪、等待和等待 B.运行、就绪、运行和等待 C.就绪、运行、等待和等待 D.就绪、就绪、等待和运行 答案：AC 解析：P1处于运行状态，那么对应于它的操作就是时间片到，P1进入就绪状态。而此时，P3和P4都处于等待状态，都在等待除了CPU之外的其他事物，它们等待的事物并没有到，所以还是处于等待状态，或阻塞状态。P2此时是就绪状态，获得了P1释放的CPU,进入运行状态。</p><h2 id="前趋图" tabindex="-1"><a class="header-anchor" href="#前趋图" aria-hidden="true">#</a> 前趋图</h2><p>用来表示哪些任务可以并行执行，哪些任务之间有顺序关系，具体如下图：可知，ABC可以并行执行，但是必须ABC都执行完后，才能纳行D,这就确定了两点：任务间的并行、任务间的先后顶序。 ![2.png]</p><h2 id="进程资源图" tabindex="-1"><a class="header-anchor" href="#进程资源图" aria-hidden="true">#</a> 进程资源图</h2><p>用来表示进程和资源之间的分配和请求关系，如下图所示： <img src="'+e+'" alt="" loading="lazy"></p><ol><li>P代表进程，R代表资源，R方框中有几个圆球就表示有几个这种资源，在上图中，R1指向P1,表示R1有一个资源已经分配给了P1,P1指向R2,表示P1还需要请求一个R2资源才能执行。</li><li>阻塞节点：某进程所请求的资源已经全部分配完毕，无法获取所需资源，该进程被阻塞了无法继续。如上图中P2.</li><li>非阻塞节点：某进程所请求的资源还有剩余，可以分配给该进程继续运行。如上图中P1、P3.</li><li>当一个进程资源图中所有进程都是阻塞节点时，即陷入死锁状态。</li></ol><p>在如下所示的进程资源图中，（）；该进程资源图是（）。 A.P1、P2、P3都是阻塞节点 B.P1是阻塞节点、P2、P3是非阻塞节点 C.P1、P2是阻塞节点、P3是非阻塞节点 D.P1、P2是非阻塞节点、P3是阻塞节点</p><p>A.可以化简的，其化简顺序为P1→P2→P3 B.可以化简的，其化简顶序为P3→P1→P2 C.可以化简的，其化简顺序为P2→P1→P3 D.不可以化简的，因为P1、P2、P3申请的资源都不能得到满足</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>进程资源图化简的方法是：先看系统还剩下多少资源没分配，再看有那些进程是不阻塞的，接着把不阻塞的进程的所有边都去掉，形成一个孤立的点，再把系统分配给这个进程的资源回收回来这样，系统剩余的空闲资源便多了起来，接着又去看看剩下的进程有那些是不阻塞的，然后又把它们逐个变成孤立的点。最后，所有的资源和进程都变成孤立的点。图中P3是不阻塞的，故P3为化简图的开始，把P3孤立，再回收分配给他的资源，可以看到P1也变为不阻塞节点了，故P3、P1、P2是可以的。P3、P2、P1也是可以的</p><h2 id="进程同步与互斥" tabindex="-1"><a class="header-anchor" href="#进程同步与互斥" aria-hidden="true">#</a> 进程同步与互斥</h2><ol><li>临界资源：各进程间需要以互斥方式对其进行访问的资源</li><li>临界区：指进程中对临界资源实施操作的那段程序。本质是一段程序代码</li><li>互斥：某资源（即临界资源）在同一时间内只能由一个任务单独使用，使用时需要加锁，使用完后解锁才能被其他任务使用, 如打印机</li><li>同步：多个任务可以并发执行，只不过有速度上的差异，在一定情况下停下等待，不存在资源是否单独或共享的问题, 如自行车和汽车</li><li>互斥信号量：对临界资源采用互斥访问，使用互斥信号量后其他进程无法访问，<code>初值为1</code></li><li>同步信号量：对共享资源的访问控制，<code>初值一般是共享资源的数量</code></li></ol><h2 id="pv操作" tabindex="-1"><a class="header-anchor" href="#pv操作" aria-hidden="true">#</a> PV操作</h2><ol><li>P操作：申请资源，S=S-1(S指信号量, S大于0表示有多少个资源, S小于0表示有多少个进程等待资源),若S&gt;=0,则执行P操作的进程继续执行；若S&lt;0,则置该进程为阻塞状态（因为无可用资源），并将其插入阻塞队列。</li><li>V操作：释放资源，S=S+1,若S&gt;0,则执行V操作的进程继续执行：若$&lt;=0,则从阻塞状态唤醒一个进程，并将其插入就绪队列（此时因为缺少资源被P操作阻塞的进程可以继续执行），然后执行V操作的进程继续。</li></ol><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="生产者消费者问题" tabindex="-1"><a class="header-anchor" href="#生产者消费者问题" aria-hidden="true">#</a> 生产者消费者问题</h2><p>经典问题：生产者和消费者的问题 三个信号量：互斥信号量$0（仓库独立使用权），同步信号量$1（仓库空闲个数），同步信号量S2（仓库商品个数）。</p><ol><li><p>生产者流程：</p><ol><li>生产一个商品5 <ol><li>P(S0)</li><li>P(S1)</li></ol></li><li>将商品放入仓库中 <ol><li>V(s2)</li><li>V(So)</li></ol></li></ol></li><li><p>消费者流程：</p><ol><li>找寻商品 <ol><li>P(S0)</li><li>P(S2)</li></ol></li><li>取出一个商品 <ol><li>V(s1)</li><li>V(so)</li></ol></li></ol></li></ol><p>进程P1、P2、P3、P4和P5的前趋图如下图所示： <img src="'+o+'" alt="" loading="lazy"></p><p>若用PV操作控制进程P1、P2、P3、P4和P5并发执行的过程，则需要设置5个信号51、52、53、S4和s5,，且信号量s1~s5的初值都等于零。下图中a和b处应分别填(26);c和处应分别填写(27):e和处应分别填写(28).❤️ 26、 A.V(S1)P(s2)和V(3) B.P(s1)V(s2)和V(s3) C.V(s1)V(s2)和V(s3) D.P(S1)P(S2)和V(S3) 27、 A.P(S2)和P(S4) B.P(S2)和V(S4) C.V(s2)和P(s4) D.V(s2)和V(S4) 28、 A.P(S4)和V(S4)V(S5) B.V(s5)和P(S4)P(s5) C.V(S3)和V(S4)V(s5) D.P(S3)和P(S4)V(P5)</p><p>答案：CBB 解析：这种题型常考，并且也很简单。五个信号量对应前趋图上五根连线</p><p>进程P1、P2、P3、P4、P5和P6的前趋图如下所示，若用PV操作控制这6个进程的同步与互斥的程序如下，那么程序中的空①和空②处应分别为（）；空③和空④处应分别为（），空⑤和空⑥处应分别为（）。 <img src="'+s+'" alt="" loading="lazy"></p><p>A.V(S1)V(S2)和P(S2) B.P(S1)P(S2)和V(S2) C.V(S1)V(S2)和P(S1) D.P(S1)P(s2)和V(S1) A.V(s3)和V(S5)V(S6) B.P(s3)和V(s5)V(S6) C.V(S3)和P(S5)P(S6) D.P(S3)和P(S5)P(S6) A.P(S6)和P(s7)V(S8) B.V(S6)和V(s7)V(s8) C.P(S6)和P(S7)P(S8) D.V(S7)和P(S7)P(S8)</p><p>答案: CBD</p><h2 id="进程调度-哪个进程来使用cpu" tabindex="-1"><a class="header-anchor" href="#进程调度-哪个进程来使用cpu" aria-hidden="true">#</a> 进程调度(哪个进程来使用CPU)</h2><ol><li><p>进程调度方式是指当有更高优先级的进程到来时如何分配CPU。分为<code>可剥夺和不可剥夺</code>两种:</p><ol><li>可剥夺指当有更高优先级进程到来时，强行将正在运行进程的CPU分配给高优先级进程.</li><li>不可剥夺是指高优先级进程必须等待当前进程自动释放CPU.</li></ol></li><li><p>在某些操作系统中，一个作业(作业是一组进程)从提交到完成需要经历高、中、低三级调度。</p><ol><li>高级调度。高级调度又称“长调度”&quot;作业调度”或“接纳调度”，它决定处于输入池中的哪个后备作业可以调入主系统做好运行的准备，成为一个或一组就绪进程。在系统中一个作业只需经过一次高级调度。</li><li>中级调度。中级调度又称“中程调度”或“对换调度”，它决定处于交换区中的哪个就绪进程可以调入内存，以便直接参与对CPU的竞争。</li><li>低级调度。低级调度又称“短程调度”或“进程调度”，它决定处于内存中的哪个就绪进程可以占用CPU。低级调度是操作系统中最活跃、最重要的调度程序，对系统的影响很大。</li></ol></li><li><p>调度算法：</p><ul><li>先来先服务FCFS：先到达的进程优先分配CPU。用于宏观调度。</li><li>时间片轮转：分配给每个进程CPU时间片，轮流使用CPU,每个进程时间片大小相同，很公平，用于微观调度。</li><li>优先级调度：每个进程都拥有一个优先级，优先级大的先分配CPU.</li><li>多级反馈调度：时间片轮转和优先级调度结合而成，设置多个就绪队列1,2,3…n,每个队列分别赋予不同的优先级，分配不同的时间片长度：新进程先进入队列1的末尾，按FCFS原则，执行队列1的时间片；若未能执行完进程，则转入队列2的末尾，如此重复。</li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>死锁: ❤️</p></li></ol><ul><li>当一个进程在等待永远不可能发生的事件时，就会产生死锁，若系统中有多个进程处于死锁状态，就会造成系统死锁。</li><li>死锁产生的四个必要条件：<code>资源互斥</code>、<code>每个进程占有资源并等待其他资源</code>、<code>系统不能剥夺进程资源</code>、<code>进程资源图是一个环路</code>。❤️</li></ul><p>死锁产生后，解决措施是打破四大条件，有下列方法：</p><ul><li>死锁预防：采用某种策略限制并发进程对于资源的请求，破坏死锁产生的四个条件之一，使系统任何时刻都不满足死锁的条件。</li><li>死锁避免：一般采用银行家算法来避免，银行家算法，就是提前计算出一条不会死锁的资源分配方法，才分配资源，否则不分配资源，相当于借贷，考虑对方还得起才借钱，提前考虑好以后，就可以避免死锁。</li><li>死锁检测：允许死锁产生，但系统定时运行一个检测死锁的程序，若检测到系统中发生死锁，则设法加以解除。</li><li>死锁解除：即死锁发生后的解除方法，如强制剥夺资源，撤销进程等。</li><li>死锁资源计算：系统内有n个进程，每个进程都需要R个资源，那么其发生死锁的最大资源数为n*(R-1)。其不发生死锁的最小资源数为n*(R-1)+1。</li></ul><p>某系统中有3个并发进程竞争资源R,每个进程都需要5个R,那么至少有()个R,才能保证系统不会发生死锁。 A.12 B.13 C.14 D.15</p><p>假设系统中有n个进程共享3台打印机，任一进程在任一时刻最多只能使用1台打印机。若用PV操作控制个进程使用打印机，则相应信号量s的取值范围为（）；若信号量s的值为-3，则系统中有（）个进程等待使用打印机。 A.0,-1,...,-(n-1) B.3,2,1,0,-1,...,-(n-3) C.1,0,-1,...,-(n-1) D.2,1,0,-1,...,-(n-2)</p><p>A.0 B.1 C.2 D.3</p><p>银行家算法真题：假设系统中有三类互斥资源R1、R2和R3,可用资源数分别为10、5和3。在T0时刻系统中有P1、P2、P3、P4和P5五个进程，这些进程对资源的最大需求和已分配资源数如下表所示，此时系统剩余的可用资源数分别为(27)。如果进程按(28)序列执行，那么系统状态是安全的。 (27) A.1、1和0 B.1、1和1 C.2、1和0 D.2、0和1 (28) A.P1-P2-P4P5-P3 B.P5-P2-P4-P3-P1 C.P4-P2-P1-P5-P3 D.P5-P1-P4-P2-P3</p><p>![9.png]</p><p>资源总容量: R1: 10 R2: 5 R3: 3</p><p>目前已剩余容量, 总容量-各个进程占用的数量, 得到第一问答案: R1: 10 - (1+2+3+1+1) = 2 R2: 5 - (1+1+1+1+1) = 0 R3: 3 - (1+0+0+1+0) = 1</p><p>进程资源总需求量: P1: 5, 3, 1 P2: 3, 2, 0 P3: 6, 1, 1 P4: 3, 3, 2 P5: 2, 1, 1</p><p>进程剩余需求量: P1: 5-1=4, 3-1=2, 1-1=0 P2: 3-2=1, 2-1=1, 0-0=0 P3: 6-3=3, 1-1=0, 1-0=1 P4: 3-1=2, 3-1=2, 2-1=1 P5: 2-1=1, 1-1=0, 1-0=1</p><p>和各个资源剩余量比较, 只有p5(1,0,1)小于(2,0,1)不会产生死锁, 所以先执行P5. 当P5执行完后, 归还资源, 则剩余资源数变为((2,0,1)+(1,1,0)=(3,1,1)), 同理往后继续推.</p><h2 id="线程" tabindex="-1"><a class="header-anchor" href="#线程" aria-hidden="true">#</a> 线程</h2><ul><li>传统的进程有两个属性： <ul><li>可拥有资源的独立单位：</li><li>可独立调度和分配的基本单位。</li></ul></li><li>引入线程的原因是进程在创建、撤销和切换中，系统必须为之付出较大的时空开销，故在系统中设置的进程数目不宜过多，进程切换的频率不宜太高，这就限制了并发程度的提高。引入线程后，将传统进程的两个基本属性分开， <ul><li><code>线程作为调度和分配的基本单位</code></li><li><code>进程作为独立分配资源的单位</code></li></ul></li><li>线程是进程中的一个实体，是被系统独立分配和调度的基本单位。线程基本上不拥有资源，只拥有一点运行中必不可少的资源（如程序计数器、一组寄存器和栈），它可与同属一个进程的其他线程共享进程所拥有的全部资源，例如进程的公共数据、全局变量、代码、文件等资源，但不能共享线程独有的资源，如线程的栈指针等标识数据。</li></ul><h2 id="分区存储管理" tabindex="-1"><a class="header-anchor" href="#分区存储管理" aria-hidden="true">#</a> 分区存储管理</h2><ul><li>所谓分区存储组织，就是整存，将某进程运行所需的内存整体一起分配给它，然后再执行。有三种分区方式： <ul><li><p>固定分区：静态分区方法，将主存分为若干个固定的分区，将要运行的作业装配进去，由于分区固定，大小和作业需要的大小不同，会产生<code>内部碎片</code>。</p></li><li><p>可变分区：动态分区方法，主存空间的分区是在作业转入时划分，正好划分为作业需要的大小，这样就不存在内部碎片，但容易将整片主存空间切割成许多块，会产生<code>外部碎片</code>。如下图所示，根据分配前的内存情况，还需要分配9K空间，对不同算法的结果介绍如下：</p><ul><li>首次适应法：按内存地址顺序从头查找，找到第一个&gt;=9K空间的空闲块，即切割9K空间分配给进程。</li><li>最佳适应法：将内存中所有空闲内存块按从小到大排序，找到第一个&gt;=9K空间的空闲块，切割分配，这个将会找到与9K空间大小最相近的空闲块。</li><li>最差适应法：和最佳适应法相反，将内存中空闲块空间最大的，切割9K空间分配给进程，这是为了预防系统中产生过多的细小空闲块。</li><li>循环首次适应法：按内存地址顺序查找，找到第一个&gt;=9K空间的空闲块，而后若还需分配，则找下一个，不用每次都从头查找，这是与首次适应法不同的地方</li></ul><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>可重定位分区：可以解决碎片问题，移动所有已经分配好的区域，使其成为一个连续的区域，这样其他外部细小的分区碎片可以合并为大的分区，满足作业要求。只在外部作业请求空间得不到满足时进行。</p></li></ul></li></ul><h2 id="分页存储-❤️" tabindex="-1"><a class="header-anchor" href="#分页存储-❤️" aria-hidden="true">#</a> 分页存储 ❤️</h2><p>分页存储就是将本应该在外存里的数据放在硬盘里, 在需要时载入硬盘.</p><p>逻辑页分为页号和页内地址，页内地址就是物理偏移地址，而页号与物理块号并非按序对应的，需要查询页表，才能得知页号对应的物理块号，再用物理块号加上偏移地址才得出了真正运行时的物理地址。 优点：利用率高，<code>碎片小</code>(最后一页会产生碎片)，分配及管理简单。 缺点：增加了系统开销，可能产生抖动现象</p><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>页号: 4KB * 1024 * 1024 = 4GB, 所以共有1024 * 1024 = 2^10 * 2^10 = 2^20 页 业内地址: i4KB = 4 * 1024 bit = 2^12 bit</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="页面置换算法" tabindex="-1"><a class="header-anchor" href="#页面置换算法" aria-hidden="true">#</a> 页面置换算法</h3><ul><li>最优算法：OPT,理论上的算法，<code>无法实现</code>，是在进程执行完后进行的最佳效率计算，用来让其他算法比较差距。原理是选择未来最长时间内不被访问的页面置换，这样可以保证未来执行的都是马上要访问的。</li><li>先进先出算法：FIFO，先调入内存的页先被置换淘汰，<code>会产生抖动现象</code>，即分配的页数越多，缺页率可能越多（即效率越低）</li><li>最近最少使用：LRU,在最近的过去，进程执行过程中，过去最少使用的页面被置换淘汰，根据局部性原理，这种方式效率高，且<code>不会产生抖动现象</code>，使用大量计数器，但是没有LFU多。</li><li>淘汰原则：优先淘汰最近未访问的，而后淘汰最近未被修改的页面。</li></ul><h3 id="快表" tabindex="-1"><a class="header-anchor" href="#快表" aria-hidden="true">#</a> 快表</h3><ol><li>是一块小容量的相联存储器，由快速存储器组成，按内容访问，速度快，并且可以从硬件上保证按内容并行查找，一般用来存放当前访问最频繁的少数活动页面的页号。</li><li>快表是将页表存于Cachet中；慢表是将页表存于内存上。慢表需要访问两次内存才能取出页，而快表是访问一次Cache和一次内存，因此更快。</li></ol><p>某计算机系统页面大小为4K,若进程的页面变换表如下所示，逻辑地址为十六进制1D16H。该地址经过变换后，其物理地址应为十六进制0。</p><table><thead><tr><th>页号</th><th>物理块号</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>4</td></tr><tr><td>3</td><td>6</td></tr></tbody></table><p>A.1024H B.3D16H C.4DI6H D.6D16H</p><p>答案: B</p><ol><li>确定页内地址和页号分别多少位 4K = 2^12 所以有12位的页的偏移位数, 12个2进制位数对应3个16进制位数, 所以对应了<code>1D16H</code>中的<code>D16</code>. 也就是说<code>D16</code>是偏移位数, <code>1</code>是页号,</li><li>查无敌块号 根据表可查物理块号是<code>3</code></li></ol><p>某进程有4个页面，页号为03，页面变换表及状态位、访问位和修改位的含义如下图所示，若系统给该进程分配了3个存储块，当访问前页面1不在内存时，淘汰表中页号为（）的页面代价最小。</p><p><img src="'+g+'" alt="" loading="lazy"> A.0 B.1 C.2 D.3</p><p>页号是逻辑, 页帧号是物理 答案：D 解析：根据局部性原理，应该优先淘汰最近未被访问过的，而后淘汰最近未被修改过的，由页表可知，023最近都被访问过，而只有3最近未被修改过，应该淘汰3. 然而其实这种题目，就算不知道上述原理，也能做出，答案只有一个，肯定是与其他不同的，具有唯一性的一个，在023中，02的访问位和修改位一样，只有3不同，答案就是3.</p><h3 id="分段存储管理" tabindex="-1"><a class="header-anchor" href="#分段存储管理" aria-hidden="true">#</a> 分段存储管理</h3><p>将进程空间分为一个个段，每段也有段号和段内地址，与页式存储不同的是<code>每段物理大小不同</code>，分段是根据逻辑整体分段的，因此，段表也与页表的内容不同，页表中直接是逻辑页号对应物理块号，而下图所示，段表有段长和基址两个属性，才能确定一个逻辑段在物理段中的位置。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>优点：多道程序共享内存，各段程序修改互不影响。</li><li>缺点：内存利用率低，内存碎片浪费大。</li></ul><p>设某进程的段表如下所示，逻辑地址（）可以转换为对应的物理地址。 A.(0,1597)、(1,30)和(3,1390) B.(0,128)、(1,30)和(3,1390) C.(0,1597)、(2,98)和(3,1390) D.(0,128)、(2,98)和(4,1066)</p><table><thead><tr><th>段号</th><th>基地址</th><th>段长</th></tr></thead><tbody><tr><td>0</td><td>1598</td><td>600</td></tr><tr><td>1</td><td>486</td><td>50</td></tr><tr><td>2</td><td>90</td><td>100</td></tr><tr><td>3</td><td>1327</td><td>2988</td></tr><tr><td>4</td><td>1952</td><td>960</td></tr></tbody></table><p>(段号, 段偏移)</p><p>答案：B 解析：因为0段的段长只有600，而逻辑地址(0,1597)中的1597已经越界，不能转换成逻辑地址，而选项A和选项C中都包含逻辑地址(0,597)所以是错误的。又因为4段的段长只有960，而逻辑地址(4,1066)中的1066已经越界，也不能转换成逻辑地址，而选项D中包含逻辑地址(4,1066)所以是错误的。</p><h3 id="段页式存储管理" tabindex="-1"><a class="header-anchor" href="#段页式存储管理" aria-hidden="true">#</a> 段页式存储管理</h3><p>对进程空间先分段，后分页，具体原理图和优缺点如下： 优点：空间浪费小、存储共享容易、存储保护容易、能动态链接。 缺点：由于管理软件的增加，复杂性和开销也随之增加，需要的硬件以及占用的内容也有所增加，使得执行速度大大下降。</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="设备管理概述" tabindex="-1"><a class="header-anchor" href="#设备管理概述" aria-hidden="true">#</a> 设备管理概述</h2><ul><li><p>设备是计算机系统与外界交互的工具，具体负责计算机与外部的输入输出工作，所以常称为外部设备（简称外设）。在计算机系统中，将负责管理设备和输入/输出的机构称为I/O系统。因此，I/O系统由设备、控制器、通道（具有通道的计算机系统）、总线和I/O软件组成。</p></li><li><p>设备的分类：</p><ul><li>按数据组织分类：块设备、字符设备。</li><li>按照设备功能分类：输入设备、输出设备、存储设备、网络联网设备、供电设备。</li><li>资源分配角度分类：独占设备、共享设备和虚拟设备</li><li>数据传输速率分类：低速设备、中速设备、高速设备。</li></ul></li><li><p>设备管理的任务是保证在多道程序环境下，当多个进程竞争使用设备时，按一定的策略分配和管理各种设备，控制设备的各种操作，完成I/O设备与主存之间的数据交换。</p></li><li><p>设备管理的主要功能是动态地掌握并记录设备的状态、设备分配和释放、缓冲区管理、实现物理I/O设备的操作、提供设备使用的用户接口及设备的访问和控制。</p></li></ul><h2 id="i-o软件" tabindex="-1"><a class="header-anchor" href="#i-o软件" aria-hidden="true">#</a> I/O软件</h2><ul><li>I/O设备管理软件的所有层次及每一层功能如下图：</li><li>实例：当用户程序试图读一个硬盘文件时，需要通过操作系统实现这一操作与设备无关软件检查高速缓存中有无要读的数据块，若没有，则调用设备驱动程序，向/0硬件发出一个请求。然后，用户进程阻塞并等待磁盘操作的完成。当磁盘操作完成时，硬件产生一个中断，转入中断处理程序。中断处理程序检查中断的原因，认识到这时磁盘读取操作已经完成，于是唤醒用户进程取回从磁盘读取的信息，从而结束此次I/O请求。用户进程在得到了所需的硬盘文件内容之，后继续运行。</li></ul><figure><img src="'+S+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="设备管理技术" tabindex="-1"><a class="header-anchor" href="#设备管理技术" aria-hidden="true">#</a> 设备管理技术</h2><ul><li>一台独占设备，在同一时间只能由一个进程使用，其他进程只能等待，且不知道什么时候打印机空闲，此时，极大的浪费了外设的工作效率。</li><li>引入SPOOLING（外围设备联机操作）技术，就是在外设上建立两个数据缓冲区，分别称为输入井和输出井，这样，无论多少进程，都可以共用这一台打印机，只需要将打印命令发出，数据就会排队存储在缓冲区中，打印机会自动按顺序打印，实现了物理外设的共享，使得每个进程都感觉在使用一个打印机，这就是物理设备的虚拟化。如下图所示：</li></ul><p>![18.png]</p><p>以下关于1/O软件的叙述中，正确的是（） A、I/O软件开放了/O操作实现的细节，方便用户使用I/O设备 B、I/O软件隐藏了I/O操作实现的细节，向用户提供物理接口 C、I/O软件隐藏了1/O操作实现的细节，方便用户使用I/o设备 D、I/O软件开放了/O操作实现的细节，用户可以使用逻辑地址访问I/o设备 答案：C 解析：I/O软件隐藏了底层复杂的实现细节，只提供接口供用户方便的使用。</p><h2 id="文件管理概述" tabindex="-1"><a class="header-anchor" href="#文件管理概述" aria-hidden="true">#</a> 文件管理概述</h2><ul><li><p>文件是具有符号名的、在逻辑上具有完整意义的一组相关信息项的集合。</p></li><li><p>信息项是构成文件内容的基本单位，可以是一个字符，也可以是一个记录，记录可以等长，也可以不等长。一个文件包括文件体和文件说明。文件体是文件真实的内容。文件说明是操作系统为了管理文件所用到的信息，包括文件名、文件内部标识、文件的类型、文件存储地址、文件的长度、访问权限、建立时间和访问时间等。</p></li><li><p>文件管理系统，就是操作系统中实现文件统一管理的一组软件和相关数据的集合，专门负责管理和存取文件信息的软件机构，简称文件系统。文件系统的功能包括按名存取；统一的用户接口；并发访问和控制；安全性控制；优化性能；差错恢复。</p></li><li><p>文件的类型：</p><ol><li>按文件性质和用途可将文件分为系统文件、库文件和用户文件。</li><li>按信息保存期限分类可将文件分为临时文件、档案文件和永久文件。</li><li>按文件的保护方式分类可将文件分为只读文件、读/写文件、可执行文件和不保护文件。</li><li>UNIX系统将文件分为普通文件、目录文件和设备文件（特殊文件）</li></ol></li><li><p>文件的逻辑结构可分为两大类：有结构的记录式文件；无结构的流式文件。</p></li><li><p>文件的物理结构是指文件在物理存储设备上的存放方法，包括：</p><ol><li>连续结构。连续结构也称顺序结构，它将逻辑上连续的文件信息（如记录）依次存放在连续编号的物理块上。</li><li>链接结构。链接结构也称串联结构，它是将逻辑上连续的文件信息（如记录）存放在不连续的物理块上，每个物理块设有一个指针指向下一个物理块。</li><li>索引结构。将逻辑上连续的文件信息（如记录）存放在不连续的物理块中，系统为每个文件建立一张索引表。索引表记录了文件信息所在的逻辑块号对应的物理块号，并将索引表的起始地址放在与文件对应的文件目录项中。❤️</li><li>多个物理块的索引表。索引表是在文件创建时由系统自动建立的，并与文件一起存放在同一文件卷上。根据一个文件大小的不同，其索引表占用物理块的个数不等，一般占一个或几个物理块。</li></ol></li></ul><h2 id="索引文件结构" tabindex="-1"><a class="header-anchor" href="#索引文件结构" aria-hidden="true">#</a> 索引文件结构</h2><ul><li>如图所示，系统中有13个索引节点，0-9为直接索引，即每个索引节点存放的是内容，假设每个物理盘大小为4KB,共可存4KB*10=40KB数据；</li><li>10号索引节点为一级间接索引节点，大小为4KB,存放的并非直接数据，而是链接到直接物理盘块的地址，假设每个地址占4B,则共有1024个地址，对应1024个物理盘，可存1024*4KB=4096KB数据。</li><li>二级索引节点类似，直接盘存放一级地址，一级地址再存放物理盘快地址，而后链接到存放数据的物理盘块，容量又扩大了一个数量级，为1024<em>1024</em>4KB数据。</li></ul><p>![19.png]</p><p>设文件索引节点中有8个地址项，每个地址项大小为4字节，其中5个地址项为直接地址索引，2个地址项是一级间接地址索引，1个地址项是二级间接地址索引，磁盘索引块和磁盘数据块大小均为1KB,若要访问文件的逻辑块号分别为5和518，则系统应分别采用(27)，而且可表示的单个文件最大长度是(28)KB. (27) A.直接地址索引和一级间接地址索 B.直接地址索引和二级间接地址索 C.一级间接地址索引和二级间接地址索引 D.一级间接地址索引和一级间接地址索引 (28) A.517 B.1029 C.16513 D.66053</p><p>答案：CD 解析：依题意，有5个地址项为直接地址索引，所以直接地址索引涉及到的逻辑块号为：0-4.2个地址项为一级间接索引，每个一级间接索引结点对应的逻辑块个数为：1KB/4B=256个。所以一级间接索引涉及到的逻辑块号为：5-516。二级间接索引所对应的逻辑块号即为：517以上。可表示的单个文件长度，首先计算直接地址索引，就是5个数据块，为5KB,而后一级间接地址索引，可表示256个数据块，即256KB,二级间接地址索引可存储1KB/4B=256个一级间接地址索引，每个一级间接地址索引又可存储256KB,因此是256<em>256KB,全部加起来共5+256</em>2+256*256=66053。</p><h2 id="文件目录" tabindex="-1"><a class="header-anchor" href="#文件目录" aria-hidden="true">#</a> 文件目录</h2><ul><li><p>文件控制块中包含以下三类信息：基本信息类、存取控制信息类和使用信息类。</p><ul><li>基本信息类。例如文件名、文件的物理地址、文件长度和文件块数等。</li><li>存取控制信息类。文件的存取权限，像UNIX用户分成文件主、同组用户和一般用户三类，这三类用户的读/写执行RWX权限。</li><li>使用信息类。文件建立日期、最后一次修改日期、最后一次访问的日期、当前使用的信息（如打开文件的进程数、在文件上的等待队列）等。</li></ul></li><li><p>文件控制块的有序集合称为文件目录。</p></li><li><p>相对路径：是从当前路径开始的路径。</p></li><li><p>绝对路径：是从根目录开始的路径。</p></li><li><p>全文件名=绝对路径+文件名。要注意，绝对路径和相对路径是不加最后的文件名的，只是单纯的路径序列。</p></li></ul><p>若某文件系统的目录结构如下图所示，假设用户要访问文件Fault..swf,且当前工作目录为swshare,则该文件的全文件名为（），相对路径和绝对路径分别为() A.fault.swf B.flash\\fault.swf C.swshare\\flash\\fault.swf D.\\swshare\\flash\\fault.swf</p><p>A.swshare\\flash\\和\\flash<br> B.flash 和\\swshare\\flash<br> C.\\swshare\\flash\\ 和 flash<br> D.\\flash\\和\\swshare\\flash\\</p><p>答案：DB</p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="文件存储空间管理" tabindex="-1"><a class="header-anchor" href="#文件存储空间管理" aria-hidden="true">#</a> 文件存储空间管理</h2><ul><li><p>文件的存取方法是指读/写文件存储器上的一个物理块的方法。通常有顺序存取和随机存取两种方法。顺序存取方法是指对文件中的信息按顺序依次进行读/写；随机存取方法是指对文件中的信息可以按任意的次序随机地读/写。</p></li><li><p>文件存储空间的管理：</p><ul><li><p>空闲区表。将外存空间上的一个连续的未分配区域称为“空闲区”。操作系统为磁盘外存上的所有空闲区建立一张空闲表，每个表项对应一个空闲区，适用于连续文件结构。</p><table><thead><tr><th>序号</th><th>第一个空闲块号</th><th>空闲块数</th><th>状态</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>18</td><td>5</td><td>可用</td><td>18-22都可用</td></tr><tr><td>2</td><td>29</td><td>8</td><td>可用</td><td>29-36都可用</td></tr><tr><td>3</td><td>105</td><td>19</td><td>可用</td><td>105-23都可用</td></tr><tr><td>4</td><td>-</td><td>-</td><td>未用</td><td></td></tr></tbody></table></li><li><p>位示图。这种方法是在外存上建立一张位示图(Bitmap),记录文件存储器的使用情况。每一位对应文件存储器上的一个物理块，取值0和1分别表示空闲和占用❤️</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>第0字节</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>…</td><td>0</td><td>1</td></tr><tr><td>第1字节</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>…</td><td>1</td><td>1</td></tr><tr><td>第2字节</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>…</td><td>1</td><td>0</td></tr><tr><td>第3字节</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>…</td><td>0</td><td>1</td></tr><tr><td>第n-1字节</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>…</td><td>1</td><td>1</td></tr></tbody></table></li><li><p>空闲块链。每个空闲物理块中有指向下一个空闲物理块的指针，所有空闲物理块构成一个链表，链表的头指针放在文件存储器的特定位置上（如管理块中），不需要磁盘分配表，节省空间。</p></li><li><p>成组链接法。例如，在实现时系统将空闲块分成若干组，每100个空闲块为一组，每组的第一个空闲块登记了下一组空闲块的物理盘块号和空闲块总数。假如某个组的第一个空闲块号等于0，意味着该组是最后一组，无下一组空闲块。</p></li></ul></li></ul><p>某文件管理系统采用位示图(bitmap)记录磁盘的使用情况。如果系统的字长为32位，磁盘物理块的大小为4MB,物理块依次编号为：0、1、2、..., 位示图字依次编号为：0、1、2、..., 那么16385号物理块的使用情况在位示图中的第(25)个字中描述：如果磁盘的容量为1000GB,那么位示图需要(26)个字来表示。 (25) A.-128 B.256 C.512 D.1024 (26) A.1200 B.3200 C.6400 D.8000 答案：CD 解析：在位示图中，一个物理块占1个字中的1位，第16385占到16386位(从0编号)，16386/32=512余数2，可知，其在513个字中描述，但因为从0开始编号，是第512个字；磁盘容量1000GB,共1000GB/4MB=250<em>1024个物理块，需要250Kb表示，即250</em>1024bit/32bit=8000个字。</p>',108),m=[_];function V(x,D){return t(),l("div",null,m)}const y=i(b,[["render",V],["__file","4操作系统知识.html.vue"]]);export{y as default};
