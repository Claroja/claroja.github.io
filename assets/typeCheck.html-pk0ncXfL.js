const n=JSON.parse('{"key":"v-3c9b2311","path":"/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/typeCheck.html","title":"typeCheck","lang":"zh-CN","frontmatter":{"description":"typeCheck 通常, python解释器会灵活(flexible)隐式(implicit)的来处理变量的类型, 而最新版本的python可以让我们显式(explicit)指定变量的类型. 动态类型(dynamic typing) python是动态类型语言, python解释器在运行之前不会编译(比如检查变量的类型), 而且在运行时可以随意更改变量的类型 运行前不会检查编译 ## 1. `if False`不会执行, 所以即使1/0会报错 if False: 1/0 else: 1 + 2 # 3 ## 2. 直接执行1/0, 报错 1/0 # ZeroDivisionError: division by zero","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/typeCheck.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"typeCheck"}],["meta",{"property":"og:description","content":"typeCheck 通常, python解释器会灵活(flexible)隐式(implicit)的来处理变量的类型, 而最新版本的python可以让我们显式(explicit)指定变量的类型. 动态类型(dynamic typing) python是动态类型语言, python解释器在运行之前不会编译(比如检查变量的类型), 而且在运行时可以随意更改变量的类型 运行前不会检查编译 ## 1. `if False`不会执行, 所以即使1/0会报错 if False: 1/0 else: 1 + 2 # 3 ## 2. 直接执行1/0, 报错 1/0 # ZeroDivisionError: division by zero"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-27T13:17:01.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2023-11-27T13:17:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"typeCheck\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-27T13:17:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":3,"title":"动态类型(dynamic typing)","slug":"动态类型-dynamic-typing","link":"#动态类型-dynamic-typing","children":[]},{"level":3,"title":"静态类型(static typing)","slug":"静态类型-static-typing","link":"#静态类型-static-typing","children":[]},{"level":3,"title":"鸭子类型(Duck Typing)","slug":"鸭子类型-duck-typing","link":"#鸭子类型-duck-typing","children":[]},{"level":2,"title":"Hello Types","slug":"hello-types","link":"#hello-types","children":[]},{"level":2,"title":"annotations","slug":"annotations","link":"#annotations","children":[{"level":3,"title":"Function Annotations","slug":"function-annotations","link":"#function-annotations","children":[]},{"level":3,"title":"Variable Annotations","slug":"variable-annotations","link":"#variable-annotations","children":[]}]}],"git":{"createdTime":1701091021000,"updatedTime":1701091021000,"contributors":[{"name":"claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":2.5,"words":749},"filePathRelative":"编程语言/python/基本类型/typeCheck.md","localizedDate":"2023年11月27日","excerpt":"<h1> typeCheck</h1>\\n<p>通常, python解释器会灵活(flexible)隐式(implicit)的来处理变量的类型, 而最新版本的python可以让我们显式(explicit)指定变量的类型.</p>\\n<h3> 动态类型(dynamic typing)</h3>\\n<p>python是动态类型语言, python解释器在运行之前不会编译(比如检查变量的类型), 而且在运行时可以随意更改变量的类型</p>\\n<ol>\\n<li>运行前不会检查编译</li>\\n</ol>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token comment\\">## 1. `if False`不会执行, 所以即使1/0会报错</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token number\\">1</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">0</span> \\n<span class=\\"token keyword\\">else</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token number\\">1</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">2</span> <span class=\\"token comment\\"># 3</span>\\n\\n\\n<span class=\\"token comment\\">## 2. 直接执行1/0, 报错</span>\\n<span class=\\"token number\\">1</span><span class=\\"token operator\\">/</span><span class=\\"token number\\">0</span>  <span class=\\"token comment\\"># ZeroDivisionError: division by zero</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}');export{n as data};
