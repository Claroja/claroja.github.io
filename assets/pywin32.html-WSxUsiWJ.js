import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as e,c as i,b as n,d as o,e as c,a as s}from"./app-7knaTE3M.js";const l={},u=s(`<h1 id="pywin32" tabindex="-1"><a class="header-anchor" href="#pywin32" aria-hidden="true">#</a> pywin32</h1><p>pywin32 是一个第三方模块库, 直接包装了几乎所有的 Windows API.</p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><h3 id="句柄" tabindex="-1"><a class="header-anchor" href="#句柄" aria-hidden="true">#</a> 句柄</h3><p>Windows程序中，有各种各样的资源，系统在创建这些资源的时候，都会为他们分配内存，并返回标识这些资源的标识号，这个标识号就是句柄. 在 win32 编程的世界里，包括 &quot;窗口、文本框 等所有控件&quot; 都是 窗体，所有的窗体都有独立的句柄。要操作任意一个窗体，你都需要找到这个窗体的句柄 。</p><h3 id="消息" tabindex="-1"><a class="header-anchor" href="#消息" aria-hidden="true">#</a> 消息</h3><p>消息是用来告诉窗体 &quot;发生了什么&quot;，比如 给一个按钮发送BN_CLICKED 这么个消息，按钮就知道 &quot;哦，我被点了&quot;. 在 Windows 中消息是由一个数值表示的, 并且将这些数值定义为WM_XXX 宏的形式. 例如，鼠标左键按下的消息--WM_LBUTTONDOWN，键盘按下消息--WM_KEYDOWN，字符消息--WM_CHAR，等等。</p><h3 id="wparam和lparam" tabindex="-1"><a class="header-anchor" href="#wparam和lparam" aria-hidden="true">#</a> wParam和lParam</h3><p>wParam 和 lParam：用于指定消息的附加信息。例如，当我们收到一个键盘按下消息的时候，message 成员变量的值就是 WM_KEYDOWN，但是用户到底按下的是哪一个按键，我们就得拜托这二位，由他们来告知我们具体的信息。</p><h3 id="time和pt" tabindex="-1"><a class="header-anchor" href="#time和pt" aria-hidden="true">#</a> time和pt</h3><p>time 和 pt：这俩个变量分别被用来表示消息投递到消息队列中的时间和鼠标当前的位置，一般情况下不怎么使用（但不代表没用）</p><h2 id="pywin32结构" tabindex="-1"><a class="header-anchor" href="#pywin32结构" aria-hidden="true">#</a> pywin32结构</h2><p>pywin32 把 Windows API 按照功能分了一些大类，每一个大类作为一个模块。以下是所有的模块, 如果不清楚要使用的 API 在哪个模块中，到 帮助文件 里搜索一下就可以得到答案(在 Lib\\site-packages 下有一个 PyWin32.CHM 帮助文件)</p><ul><li>mmapfile：提供对内存映射文件 API 的访问</li><li>odbc：odb 数据库 api</li><li>perfmon：包装性能监视器功能的模块。</li><li>pywintypes：支持常见 Windows 类型的模块。</li><li>servicemanager：与 Windows 服务控制管理器交互的模块。</li><li>timer：包装 Win32 Timer 函数的扩展</li><li>win2kras：将 Windows 2000 扩展封装到远程访问服务 (RAS) API 的模块。</li><li><code>win32api</code>：提供了常用的用户API</li><li>win32clipboard：提供了有关粘贴板的API</li><li><code>win32con</code>：有关的常量。提供了消息常量的操作API。(con是const常量)</li><li>win32console：控制台</li><li>win32cred：凭证管理功能的接口。此模块中的功能仅适用于 Windows XP 及更高版本。</li><li>win32crypt：win32 Cryptography API 的接口</li><li>win32event：提供 win32 事件/等待API接口</li><li>win32evtlog：封装了 Windows Win32 事件日志 API。</li><li>win32file：提供了有关文件操作的API</li><li><code>win32gui</code>：提供了有关 windows 用户界面图形操作的API</li><li>win32help：Win32 API 的帮助</li><li>win32inet：Windows internet (wininet) API 接口</li><li>win32job：win32 进程和线程 API 的接口，在 Windows 2000 及更高版本中可用。</li><li>win32lz：封装 Windows LZ 压缩例程的模块</li><li>win32net：Windows 网络API的模块</li><li>win32pdh：封装 Windows 性能数据帮助 API 模块</li><li>win32pipe：管道 api</li><li>win32print：Windows 打印 API 的模块</li><li>win32process：进程 api</li><li>win32profile：包装用于处理用户配置文件的函数</li><li>win32ras：封装 Windows Remote Access Service (RAS) API</li><li>win32security：win32 安全 API 接口</li><li>win32service：服务</li><li>win32trace</li><li>win32transaction：内核事务管理器函数 模块，用于事务NTFS和事务注册表函数。</li><li>win32ts：此模块中的所有函数都接受关键字参数</li><li>win32wnet：公开 Windows Networking API 的模块。</li><li>winxpgui：xp 图像用户界面 API</li></ul><h2 id="win32clipboard" tabindex="-1"><a class="header-anchor" href="#win32clipboard" aria-hidden="true">#</a> win32clipboard</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> win32con
<span class="token keyword">import</span> win32clipboard <span class="token keyword">as</span> cp

cp<span class="token punctuation">.</span>OpenClipboard<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 打开剪切板</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
SetClipboardData方法向剪贴板写入数据，后面两个参数，第一个表示数据类型，
建议使用win32con.CF_UNICODETEXT，这样基本可以原样输出我们传入的数据
如果使用win32con.CF_TEXT:输出的是字节码~很别扭
注意！！！如果需要同时写入再获取内容，数据类型这个参数一定是使用一样的
&quot;&quot;&quot;</span>
cp<span class="token punctuation">.</span>SetClipboardData<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>CF_UNICODETEXT<span class="token punctuation">,</span> <span class="token string">&quot;132465&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 向剪贴板中写入数据</span>
cp<span class="token punctuation">.</span>GetClipboardData<span class="token punctuation">(</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> cp<span class="token punctuation">.</span>GetClipboardData<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>CF_UNICODETEXT<span class="token punctuation">)</span>  <span class="token comment"># 输出：132465</span>
result1 <span class="token operator">=</span> cp<span class="token punctuation">.</span>GetClipboardData<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>CF_TEXT<span class="token punctuation">)</span>  <span class="token comment"># 输出：b&#39;\`O}Y\\x00&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> result1<span class="token punctuation">)</span>

cp<span class="token punctuation">.</span>CloseClipboard<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭剪贴板</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="win32process" tabindex="-1"><a class="header-anchor" href="#win32process" aria-hidden="true">#</a> win32process</h2>`,17),d={href:"https://www.cnblogs.com/LyShark/p/12538209.html",target:"_blank",rel:"noopener noreferrer"},r=s(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> win32process
<span class="token keyword">import</span> win32event

<span class="token comment">## 打开记事本程序，获得其句柄</span>
handle <span class="token operator">=</span> win32process<span class="token punctuation">.</span>CreateProcess<span class="token punctuation">(</span><span class="token string">&#39;c:\\\\windows\\\\notepad.exe&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span>win32process<span class="token punctuation">.</span>CREATE_NO_WINDOW <span class="token punctuation">,</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> <span class="token boolean">None</span> <span class="token punctuation">,</span> win32process<span class="token punctuation">.</span>STARTUPINFO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## 等待进程结束</span>
win32event<span class="token punctuation">.</span>WaitForSingleObject<span class="token punctuation">(</span>handle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">## 使用TerminateProcess函数终止记事本程序</span>
win32process<span class="token punctuation">.</span>TerminateProcess<span class="token punctuation">(</span>handle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>win32process.CreateProcess()</code> 参数:</p><ul><li>appName：可执行的文件名。</li><li>commandLine：命令行参数。</li><li>processAttributes：进程安全属性，如果为None，则为默认的安全属性。</li><li>threadAttributes：线程安全属性，如果为None，则为默认的安全属性。</li><li>bInheritHandles：继承标志。</li><li>dwCreationFlags：创建标志。</li><li>newEnvironment：创建进程的环境变量。</li><li>currentDirectory：进程的当前目录。</li><li>startupinfo ：创建进程的属性。</li></ul><p><code>WaitForSingleObject(handle, milisecond)</code> 参数:</p><ul><li>handle: 要操作的进程句柄</li><li>milisecond: 等待的时间,如果为-1,则一直等待.</li></ul><h2 id="win32process-1" tabindex="-1"><a class="header-anchor" href="#win32process-1" aria-hidden="true">#</a> win32process</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>thread<span class="token punctuation">,</span> processId <span class="token operator">=</span> win32process<span class="token punctuation">.</span>GetWindowThreadProcessId<span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>thread_id<span class="token punctuation">,</span> process_id <span class="token operator">=</span> win32process<span class="token punctuation">.</span>GetWindowThreadProcessId<span class="token punctuation">(</span>k<span class="token punctuation">)</span>
p_handle <span class="token operator">=</span> win32api<span class="token punctuation">.</span>OpenProcess<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>PROCESS_ALL_ACCESS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> process_id<span class="token punctuation">)</span>
win32api<span class="token punctuation">.</span>TerminateProcess<span class="token punctuation">(</span>p_handle<span class="token punctuation">,</span> process_id<span class="token punctuation">)</span>
win32api<span class="token punctuation">.</span>CloseHandle<span class="token punctuation">(</span>p_handle<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="综合" tabindex="-1"><a class="header-anchor" href="#综合" aria-hidden="true">#</a> 综合</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## -*- coding:utf-8 -*-</span>
 
<span class="token keyword">import</span> time
<span class="token keyword">import</span> win32gui
<span class="token keyword">import</span> win32con
<span class="token keyword">import</span> win32api
 
<span class="token comment">## 从顶层窗口向下搜索主窗口，无法搜索子窗口</span>
<span class="token comment">## FindWindow(lpClassName=None, lpWindowName=None)  窗口类名 窗口标题名</span>
handle <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>FindWindow<span class="token punctuation">(</span><span class="token string">&quot;Notepad&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
 
<span class="token comment">## 获取窗口位置</span>
left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>GetWindowRect<span class="token punctuation">(</span>handle<span class="token punctuation">)</span>
<span class="token comment">## 获取某个句柄的类名和标题</span>
title <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>GetWindowText<span class="token punctuation">(</span>handle<span class="token punctuation">)</span>
cls_name <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>GetClassName<span class="token punctuation">(</span>handle<span class="token punctuation">)</span>
 
<span class="token comment">## 打印句柄</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cls_name<span class="token punctuation">)</span>
 
<span class="token comment">## 搜索子窗口</span>
<span class="token comment">## 枚举子窗口</span>
hwndChildList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
win32gui<span class="token punctuation">.</span>EnumChildWindows<span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token keyword">lambda</span> hwnd<span class="token punctuation">,</span> param<span class="token punctuation">:</span> param<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span><span class="token punctuation">,</span> hwndChildList<span class="token punctuation">)</span>
 
<span class="token comment">## 父窗口句柄 若不为0，则按照z-index的顺序从hwndChildAfter向后开始搜索子窗体，否则从第一个子窗体开始搜索。 子窗口类名 子窗口标题</span>
<span class="token comment">## FindWindowEx(hwndParent=0, hwndChildAfter=0, lpszClass=None, lpszWindow=None)</span>
subHandle <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>FindWindowEx<span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;EDIT&quot;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
 
<span class="token comment">## 获得窗口的菜单句柄</span>
menuHandle <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>GetMenu<span class="token punctuation">(</span>subHandle<span class="token punctuation">)</span>
<span class="token comment">## 获得子菜单或下拉菜单句柄</span>
<span class="token comment">## 参数：菜单句柄 子菜单索引号</span>
subMenuHandle <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>GetSubMenu<span class="token punctuation">(</span>menuHandle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">## 获得菜单项中的的标志符，注意，分隔符是被编入索引的</span>
<span class="token comment">## 参数：子菜单句柄 项目索引号</span>
menuItemHandle <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>GetMenuItemID<span class="token punctuation">(</span>subMenuHandle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">## 发送消息，加入消息队列，无返回</span>
<span class="token comment">## 参数：句柄 消息类型 WParam IParam</span>
win32gui<span class="token punctuation">.</span>postMessage<span class="token punctuation">(</span>subHandle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_COMMAND<span class="token punctuation">,</span> menuItemHandle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
 
<span class="token comment">## wParam的定义是32位整型，high word就是他的31至16位，low word是它的15至0位。</span>
<span class="token comment">## 当参数超过两个，wParam和lParam不够用时，可以将wParam就给拆成两个int16来使用。</span>
<span class="token comment">## 这种时候在python里记得用把HIWORD的常数向左移16位，再加LOWORD，即wParam = HIWORD&lt;&lt;16+LOWORD。</span>
 
<span class="token comment">## 下选框内容更改</span>
<span class="token comment">## 参数：下选框句柄； 消息内容； 参数下选框的哪一个item，以0起始的待选选项的索引；如果该值为-1，将从组合框列表中删除当前选项，并使当前选项为空； 参数</span>
<span class="token comment">## CB_Handle为下选框句柄，PCB_handle下选框父窗口句柄</span>
<span class="token keyword">if</span> win32api<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>CB_handle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>CB_SETCURSEL<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token comment"># 下选框的父窗口命令</span>
    <span class="token comment"># 参数：父窗口句柄； 命令； 参数：WParam：高位表示类型，低位表示内容；参数IParam，下选框句柄</span>
    <span class="token comment"># CBN_SELENDOK当用户选择了有效的列表项时发送，提示父窗体处理用户的选择。 LOWORD为组合框的ID. HIWORD为CBN_SELENDOK的值。</span>
    win32api<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>PCB_handle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_COMMAND<span class="token punctuation">,</span> <span class="token number">0x90000</span><span class="token punctuation">,</span> CB_handle<span class="token punctuation">)</span>
    <span class="token comment"># CBN_SELCHANGE当用户更改了列表项的选择时发送，不论用户是通过鼠标选择或是通过方向键选择都会发送此通知。LOWORD为组合框的ID. HIWORD为CBN_SELCHANGE的值。</span>
    win32api<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>PCB_handle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_COMMAND<span class="token punctuation">,</span> <span class="token number">0x10000</span><span class="token punctuation">,</span> CB_handle<span class="token punctuation">)</span>
 
<span class="token comment">## 设置文本框内容，等窗口处理完毕后返回true。中文需编码成gbk</span>
<span class="token comment">## 参数：句柄；消息类型；参数WParam，无需使用； 参数IParam，要设置的内容，字符串</span>
win32api<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>handle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_SETTEXT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>fgFilePath<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">&#39;gbk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 
<span class="token comment">## 控件点击确定,处理消息后返回0</span>
<span class="token comment">## 参数:窗口句柄; 消息类型; 参数WParam HIWORD为0（未使用），LOWORD为控件的ID; 参数IParam  0（未使用）,确定控件的句柄</span>
win32api<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>Mhandle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_COMMAND<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> confirmBTN_handle<span class="token punctuation">)</span>
 
<span class="token comment">## 获取窗口文本不含截尾空字符的长度</span>
<span class="token comment">## 参数：窗口句柄； 消息类型； 参数WParam； 参数IParam</span>
bufSize <span class="token operator">=</span> win32api<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>subHandle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_GETTEXTLENGTH<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token comment">## 利用api生成Buffer</span>
strBuf <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>PyMakeBuffer<span class="token punctuation">(</span>bufSize<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>strBuf<span class="token punctuation">)</span>
<span class="token comment">## 发送消息获取文本内容</span>
<span class="token comment">## 参数：窗口句柄； 消息类型；文本大小； 存储位置</span>
length <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>subHandle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_GETTEXT<span class="token punctuation">,</span> bufSize<span class="token punctuation">,</span> strBuf<span class="token punctuation">)</span>
<span class="token comment">## 反向内容，转为字符串</span>
<span class="token comment">## text = str(strBuf[:-1])</span>
 
address<span class="token punctuation">,</span> length <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>PyGetBufferAddressAndLen<span class="token punctuation">(</span>strBuf<span class="token punctuation">)</span>
text <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>PyGetString<span class="token punctuation">(</span>address<span class="token punctuation">,</span> length<span class="token punctuation">)</span>
<span class="token comment">## print(&#39;text: &#39;, text)</span>
 
<span class="token comment">## 鼠标单击事件</span>
<span class="token comment">## 鼠标定位到(30,50)</span>
win32api<span class="token punctuation">.</span>SetCursorPos<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## 执行左单键击，若需要双击则延时几毫秒再点击一次即可</span>
win32api<span class="token punctuation">.</span>mouse_event<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>MOUSEEVENTF_LEFTUP <span class="token operator">|</span> win32con<span class="token punctuation">.</span>MOUSEEVENTF_LEFTDOWN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">## 右键单击</span>
win32api<span class="token punctuation">.</span>mouse_event<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>MOUSEEVENTF_RIGHTUP <span class="token operator">|</span> win32con<span class="token punctuation">.</span>MOUSEEVENTF_RIGHTDOWN<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
 
 
<span class="token keyword">def</span> <span class="token function">click1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 第一种</span>
    win32api<span class="token punctuation">.</span>SetCursorPos<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>
    win32api<span class="token punctuation">.</span>mouse_event<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>MOUSEEVENTF_LEFTDOWN<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    win32api<span class="token punctuation">.</span>mouse_event<span class="token punctuation">(</span>win32con<span class="token punctuation">.</span>MOUSEEVENTF_LEFTUP<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
 
 
<span class="token keyword">def</span> <span class="token function">click2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 第二种</span>
    ctypes<span class="token punctuation">.</span>windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>SetCursorPos<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    ctypes<span class="token punctuation">.</span>windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>mouse_event<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    ctypes<span class="token punctuation">.</span>windll<span class="token punctuation">.</span>user32<span class="token punctuation">.</span>mouse_event<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
 
 
<span class="token keyword">def</span> <span class="token function">click_it</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 第三种</span>
    handle <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>WindowFromPoint<span class="token punctuation">(</span>pos<span class="token punctuation">)</span>
    client_pos <span class="token operator">=</span> win32gui<span class="token punctuation">.</span>ScreenToClient<span class="token punctuation">(</span>handle<span class="token punctuation">,</span> pos<span class="token punctuation">)</span>
    tmp <span class="token operator">=</span> win32api<span class="token punctuation">.</span>MAKELONG<span class="token punctuation">(</span>client_pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> client_pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    win32gui<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>handle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_ACTIVATE<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WA_ACTIVE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    win32gui<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>handle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_LBUTTONDOWN<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>MK_LBUTTON<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>
    win32gui<span class="token punctuation">.</span>SendMessage<span class="token punctuation">(</span>handle<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_LBUTTONUP<span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>MK_LBUTTON<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span>
 
 
<span class="token comment">## 发送回车</span>
win32api<span class="token punctuation">.</span>keybd_event<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
win32api<span class="token punctuation">.</span>keybd_event<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>KEYEVENTF_KEYUP<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
 
<span class="token comment">## 关闭窗口</span>
win32gui<span class="token punctuation">.</span>PostMessage<span class="token punctuation">(</span>win32lib<span class="token punctuation">.</span>findWindow<span class="token punctuation">(</span>classname<span class="token punctuation">,</span> titlename<span class="token punctuation">)</span><span class="token punctuation">,</span> win32con<span class="token punctuation">.</span>WM_CLOSE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
 
<span class="token comment">## 检查窗口是否最小化，如果是最大化</span>
<span class="token keyword">if</span> win32gui<span class="token punctuation">.</span>IsIconic<span class="token punctuation">(</span>hwnd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># win32gui.ShowWindow(hwnd, win32con.SW_SHOWNORMAL)</span>
    win32gui<span class="token punctuation">.</span>ShowWindow<span class="token punctuation">(</span>hwnd<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
 
<span class="token comment">## SW_HIDE：隐藏窗口并激活其他窗口。nCmdShow=0。</span>
<span class="token comment">## SW_MAXIMIZE：最大化指定的窗口。nCmdShow=3。</span>
<span class="token comment">## SW_MINIMIZE：最小化指定的窗口并且激活在Z序中的下一个顶层窗口。nCmdShow=6。</span>
<span class="token comment">## SW_RESTORE：激活并显示窗口。如果窗口最小化或最大化，则系统将窗口恢复到原来的尺寸和位置。在恢复最小化窗口时，应用程序应该指定这个标志。nCmdShow=9。</span>
<span class="token comment">## SW_SHOW：在窗口原来的位置以原来的尺寸激活和显示窗口。nCmdShow=5。</span>
<span class="token comment">## SW_SHOWDEFAULT：依据在STARTUPINFO结构中指定的SW_FLAG标志设定显示状态，STARTUPINFO 结构是由启动应用程序的程序传递给CreateProcess函数的。nCmdShow=10。</span>
<span class="token comment">## SW_SHOWMAXIMIZED：激活窗口并将其最大化。nCmdShow=3。</span>
<span class="token comment">## SW_SHOWMINIMIZED：激活窗口并将其最小化。nCmdShow=2。</span>
<span class="token comment">## SW_SHOWMINNOACTIVE：窗口最小化，激活窗口仍然维持激活状态。nCmdShow=7。</span>
<span class="token comment">## SW_SHOWNA：以窗口原来的状态显示窗口。激活窗口仍然维持激活状态。nCmdShow=8。</span>
<span class="token comment">## SW_SHOWNOACTIVATE：以窗口最近一次的大小和状态显示窗口。激活窗口仍然维持激活状态。nCmdShow=4。</span>
<span class="token comment">## SW_SHOWNORMAL：激活并显示一个窗口。如果窗口被最小化或最大化，系统将其恢复到原来的尺寸和大小。应用程序在第一次显示窗口的时候应该指定此标志。nCmdShow=1。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://blog.csdn.net/freeking101/article/details/88231952 https://blog.csdn.net/liulianglin/article/details/14449577 https://www.cnblogs.com/LyShark/p/12538209.html https://blog.csdn.net/weixin_46192930/article/details/106887785</p><p>Microsoft Component Object Model (COM), 定义了每个程序的接口, 但并不提供具体的实现.</p><p>比如<code>IDispatch</code>接口, 可以用来打开程序:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> win32com<span class="token punctuation">.</span>client
xl <span class="token operator">=</span> win32com<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Dispatch<span class="token punctuation">(</span><span class="token string">&quot;Excel.Application&quot;</span><span class="token punctuation">)</span>
wd <span class="token operator">=</span> win32com<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Dispatch<span class="token punctuation">(</span><span class="token string">&quot;Word.Application&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个程序有不同的方法, 需要阅读对应的文档. 比如Excel和Word都有Visible属性, 用来控制界面是否显示:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>xl<span class="token punctuation">.</span>Visible
xl<span class="token punctuation">.</span>Visible <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Python会自动管理COM的声明周期, 如果<code>xl</code>变量不再使用, 则Excel会自动关闭(实际使用中并没有关闭).</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>xl <span class="token operator">=</span> <span class="token boolean">None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>自定义一个COM对象:</p>`,19);function k(m,v){const a=t("ExternalLinkIcon");return e(),i("div",null,[u,n("p",null,[n("a",d,[o("参考"),c(a)])]),r])}const h=p(l,[["render",k],["__file","pywin32.html.vue"]]);export{h as default};
