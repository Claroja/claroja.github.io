const t=JSON.parse('{"key":"v-3a196a69","path":"/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4java/Synchronized/JavaJUC.html","title":"支付结算法律制度","lang":"zh-CN","frontmatter":{"description":"支付结算法律制度 AQS AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架 用state属性来表示资源的状态（分独占模式和共享模式）），子类需要定义如何维护这个状态，控制如何获取锁和释放锁 getState - 获取 state 状态 setState - 设置 state 状态 compareAndSetState - cas 机制设置 state 状态 独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源 提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList 条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet 子类主要实现这样一些方法（默认抛出 UnsupportedOperationException） tryAcquire tryRelease tryAcquireShared tryReleaseShared isHeldExclusively","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4java/Synchronized/JavaJUC.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"支付结算法律制度"}],["meta",{"property":"og:description","content":"支付结算法律制度 AQS AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架 用state属性来表示资源的状态（分独占模式和共享模式）），子类需要定义如何维护这个状态，控制如何获取锁和释放锁 getState - 获取 state 状态 setState - 设置 state 状态 compareAndSetState - cas 机制设置 state 状态 独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源 提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList 条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet 子类主要实现这样一些方法（默认抛出 UnsupportedOperationException） tryAcquire tryRelease tryAcquireShared tryReleaseShared isHeldExclusively"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"支付结算法律制度\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"AQS","slug":"aqs","link":"#aqs","children":[]}],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.65,"words":195},"filePathRelative":"2编程语言/4java/Synchronized/JavaJUC.md","localizedDate":"2025年2月21日","excerpt":"<h1> 支付结算法律制度</h1>\\n<h2> AQS</h2>\\n<p>AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架</p>\\n<ul>\\n<li>用state属性来表示资源的状态（分独占模式和共享模式）），子类需要定义如何维护这个状态，控制如何获取锁和释放锁\\n<ul>\\n<li>getState - 获取 state 状态</li>\\n<li>setState - 设置 state 状态</li>\\n<li>compareAndSetState - cas 机制设置 state 状态</li>\\n<li>独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源</li>\\n</ul>\\n</li>\\n<li>提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList</li>\\n<li>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet\\n子类主要实现这样一些方法（默认抛出 UnsupportedOperationException）</li>\\n<li>tryAcquire</li>\\n<li>tryRelease</li>\\n<li>tryAcquireShared</li>\\n<li>tryReleaseShared</li>\\n<li>isHeldExclusively</li>\\n</ul>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
