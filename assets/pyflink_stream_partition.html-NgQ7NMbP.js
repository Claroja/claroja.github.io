const t=JSON.parse('{"key":"v-b4cda038","path":"/%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B/flink/operator/pyflink_stream_partition.html","title":"stream_partition","lang":"zh-CN","frontmatter":{"description":"stream_partition shuffle 通过调用 DataStream 的.shuffle()方法，将数据随机地分配到下游算子的并行任务中去。随机分区服从均匀分布（uniform distribution），所以可以把流中的数据随机打乱，均匀地传递到下游任务分区 经过随机分区之后，得到的依然是一个 DataStream。 rebalance 按照先后顺序将数据做依次分发,通过调用 DataStream 的.rebalance()方法，就可以实现轮询重分区。rebalance 使用的是 Round-Robin 负载均衡算法，可以将输入流数据平均分配到下游的并行任务中去。 注：Round-Robin 算法用在了很多地方，例如 Kafka 和 Nginx。","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B/flink/operator/pyflink_stream_partition.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"stream_partition"}],["meta",{"property":"og:description","content":"stream_partition shuffle 通过调用 DataStream 的.shuffle()方法，将数据随机地分配到下游算子的并行任务中去。随机分区服从均匀分布（uniform distribution），所以可以把流中的数据随机打乱，均匀地传递到下游任务分区 经过随机分区之后，得到的依然是一个 DataStream。 rebalance 按照先后顺序将数据做依次分发,通过调用 DataStream 的.rebalance()方法，就可以实现轮询重分区。rebalance 使用的是 Round-Robin 负载均衡算法，可以将输入流数据平均分配到下游的并行任务中去。 注：Round-Robin 算法用在了很多地方，例如 Kafka 和 Nginx。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://claroja.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-25T13:46:58.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"stream_partition"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2023-11-25T13:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"stream_partition\\",\\"image\\":[\\"https://claroja.github.io/\\"],\\"dateModified\\":\\"2023-11-25T13:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"shuffle","slug":"shuffle","link":"#shuffle","children":[]},{"level":2,"title":"rebalance","slug":"rebalance","link":"#rebalance","children":[]},{"level":2,"title":"rescale","slug":"rescale","link":"#rescale","children":[]},{"level":2,"title":"broadcast","slug":"broadcast","link":"#broadcast","children":[]},{"level":2,"title":"partition_custom","slug":"partition-custom","link":"#partition-custom","children":[]}],"git":{"createdTime":1700920018000,"updatedTime":1700920018000,"contributors":[{"name":"claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.64,"words":493},"filePathRelative":"数据工程/flink/operator/pyflink_stream_partition.md","localizedDate":"2023年11月25日","excerpt":"<h1> stream_partition</h1>\\n<h2> shuffle</h2>\\n<p>通过调用 DataStream 的.shuffle()方法，将数据随机地分配到下游算子的并行任务中去。随机分区服从均匀分布（uniform distribution），所以可以把流中的数据随机打乱，均匀地传递到下游任务分区\\n经过随机分区之后，得到的依然是一个 DataStream。</p>\\n<figure><figcaption></figcaption></figure>\\n<h2> rebalance</h2>\\n<p>按照先后顺序将数据做依次分发,通过调用 DataStream 的.rebalance()方法，就可以实现轮询重分区。rebalance\\n使用的是 Round-Robin 负载均衡算法，可以将输入流数据平均分配到下游的并行任务中去。\\n注：Round-Robin 算法用在了很多地方，例如 Kafka 和 Nginx。</p>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
