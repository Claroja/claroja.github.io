const n=JSON.parse(`{"key":"v-ebfdc20e","path":"/4%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/6%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/pandas/%E5%88%86%E7%BB%84groupby.html","title":"分组groupby","lang":"zh-CN","frontmatter":{"description":"分组groupby filter, 以分组为对象, 过滤整个分组对象 agg, 以每个分组为对象, 结果是将分组所有数据所有数据聚合的结果赋值给分组索引, 一组对应一个值 transform, 将分组计算的结果, 结果是将分组所有数据聚合的结果赋值给每一条记录, 一条记录对应一个值 apply, 可以完成filter, agg, transform的所有操作, 他们无法做成的, 可以使用 使用如下数据集进行说明: import pandas as pd df = pd.DataFrame({ \\"name\\": [\\"wang\\",\\"wei\\",\\"zhao\\",\\"li\\",\\"wu\\"], \\"gender\\": [\\"boy\\",\\"girl\\",\\"girl\\",\\"boy\\",\\"girl\\"], \\"score\\": [56,67,47,87,None] }) 使用apply实现agg操作 df.groupby('gender').apply(lambda x: x.sum()).reset_index(drop=True) df.groupby('gender').sum().reset_index(drop=True) 使用apply实现transform操作 def trans(dfgroup): dfgroup['trans'] = dfgroup['score'].sum() return dfgroup df.groupby('gender').apply(trans).reset_index(drop=True) df.groupby('gender').transform(sum).reset_index(drop=True) 使用apply实现filter操作 def filter(dfgroup): if dfgroup['score'].sum()&lt;= 115: dfgroup=None return dfgroup df.groupby('gender').apply(filter).reset_index(drop=True) df.groupby('gender').filter(lambda x: x['score'].sum() &gt; 115).reset_index(drop=True)","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/6%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/pandas/%E5%88%86%E7%BB%84groupby.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"分组groupby"}],["meta",{"property":"og:description","content":"分组groupby filter, 以分组为对象, 过滤整个分组对象 agg, 以每个分组为对象, 结果是将分组所有数据所有数据聚合的结果赋值给分组索引, 一组对应一个值 transform, 将分组计算的结果, 结果是将分组所有数据聚合的结果赋值给每一条记录, 一条记录对应一个值 apply, 可以完成filter, agg, transform的所有操作, 他们无法做成的, 可以使用 使用如下数据集进行说明: import pandas as pd df = pd.DataFrame({ \\"name\\": [\\"wang\\",\\"wei\\",\\"zhao\\",\\"li\\",\\"wu\\"], \\"gender\\": [\\"boy\\",\\"girl\\",\\"girl\\",\\"boy\\",\\"girl\\"], \\"score\\": [56,67,47,87,None] }) 使用apply实现agg操作 df.groupby('gender').apply(lambda x: x.sum()).reset_index(drop=True) df.groupby('gender').sum().reset_index(drop=True) 使用apply实现transform操作 def trans(dfgroup): dfgroup['trans'] = dfgroup['score'].sum() return dfgroup df.groupby('gender').apply(trans).reset_index(drop=True) df.groupby('gender').transform(sum).reset_index(drop=True) 使用apply实现filter操作 def filter(dfgroup): if dfgroup['score'].sum()&lt;= 115: dfgroup=None return dfgroup df.groupby('gender').apply(filter).reset_index(drop=True) df.groupby('gender').filter(lambda x: x['score'].sum() &gt; 115).reset_index(drop=True)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分组groupby\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]},{"level":2,"title":"数据准备","slug":"数据准备","link":"#数据准备","children":[]},{"level":2,"title":"聚合","slug":"聚合","link":"#聚合","children":[]},{"level":2,"title":"DataFrameGroupBy与SeriesGroupBy对象","slug":"dataframegroupby与seriesgroupby对象","link":"#dataframegroupby与seriesgroupby对象","children":[]},{"level":2,"title":"定制聚合结果","slug":"定制聚合结果","link":"#定制聚合结果","children":[]},{"level":2,"title":"过滤(having)","slug":"过滤-having","link":"#过滤-having","children":[]}],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":2.96,"words":887},"filePathRelative":"4机器学习/6分析工具/pandas/分组groupby.md","localizedDate":"2025年2月21日","excerpt":"<h1> 分组groupby</h1>\\n<ol>\\n<li>\\n<p>filter, 以分组为对象, 过滤整个分组对象</p>\\n</li>\\n<li>\\n<p>agg, 以每个分组为对象, 结果是将分组所有数据所有数据聚合的结果赋值给分组索引, 一组对应一个值</p>\\n</li>\\n<li>\\n<p>transform, 将分组计算的结果, 结果是将分组所有数据聚合的结果赋值给每一条记录, 一条记录对应一个值</p>\\n</li>\\n<li>\\n<p>apply, 可以完成filter, agg, transform的所有操作, 他们无法做成的, 可以使用</p>\\n<p>使用如下数据集进行说明:</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> pandas <span class=\\"token keyword\\">as</span> pd\\ndf <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token string\\">\\"name\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"wang\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"wei\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"zhao\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"li\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"wu\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token string\\">\\"gender\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">\\"boy\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"girl\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"girl\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"boy\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"girl\\"</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token string\\">\\"score\\"</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">56</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">67</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">47</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">87</span><span class=\\"token punctuation\\">,</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">]</span>\\n                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><ol>\\n<li>\\n<p>使用apply实现agg操作</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code>df<span class=\\"token punctuation\\">.</span>groupby<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gender'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> x<span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>reset_index<span class=\\"token punctuation\\">(</span>drop<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">)</span>\\ndf<span class=\\"token punctuation\\">.</span>groupby<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gender'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>reset_index<span class=\\"token punctuation\\">(</span>drop<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>使用apply实现transform操作</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">def</span> <span class=\\"token function\\">trans</span><span class=\\"token punctuation\\">(</span>dfgroup<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    dfgroup<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'trans'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> dfgroup<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'score'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> dfgroup\\n\\n\\ndf<span class=\\"token punctuation\\">.</span>groupby<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gender'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">apply</span><span class=\\"token punctuation\\">(</span>trans<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>reset_index<span class=\\"token punctuation\\">(</span>drop<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">)</span>\\ndf<span class=\\"token punctuation\\">.</span>groupby<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gender'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>transform<span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">sum</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>reset_index<span class=\\"token punctuation\\">(</span>drop<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>使用apply实现filter操作</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">def</span> <span class=\\"token function\\">filter</span><span class=\\"token punctuation\\">(</span>dfgroup<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span>\\n    <span class=\\"token keyword\\">if</span> dfgroup<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'score'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">115</span><span class=\\"token punctuation\\">:</span>\\n        dfgroup<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span>\\n        \\n    <span class=\\"token keyword\\">return</span> dfgroup\\n\\ndf<span class=\\"token punctuation\\">.</span>groupby<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gender'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token builtin\\">filter</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>reset_index<span class=\\"token punctuation\\">(</span>drop<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">)</span>\\ndf<span class=\\"token punctuation\\">.</span>groupby<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gender'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">filter</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> x<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'score'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">sum</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">115</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>reset_index<span class=\\"token punctuation\\">(</span>drop<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>\\n</li>\\n</ol>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{n as data};
