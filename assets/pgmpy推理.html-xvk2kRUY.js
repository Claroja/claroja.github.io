import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as e,c as o,b as n,d as s,e as c,a as i}from"./app-9tftCahk.js";const l={},u=n("h1",{id:"array",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#array","aria-hidden":"true"},"#"),s(" array")],-1),r=n("h2",{id:"inference",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#inference","aria-hidden":"true"},"#"),s(" Inference")],-1),k={href:"http://www.bnlearn.com/bnrepository/#asia",target:"_blank",rel:"noopener noreferrer"},d=i(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## Fetch the asia model from the bnlearn repository</span>
<span class="token keyword">from</span> pgmpy<span class="token punctuation">.</span>utils <span class="token keyword">import</span> get_example_model
asia_model <span class="token operator">=</span> get_example_model<span class="token punctuation">(</span><span class="token string">&#39;asia&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Nodes: &quot;</span><span class="token punctuation">,</span> asia_model<span class="token punctuation">.</span>nodes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Edges: &quot;</span><span class="token punctuation">,</span> asia_model<span class="token punctuation">.</span>edges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
Nodes:  [&#39;asia&#39;, &#39;tub&#39;, &#39;smoke&#39;, &#39;lung&#39;, &#39;bronc&#39;, &#39;either&#39;, &#39;xray&#39;, &#39;dysp&#39;]
Edges:  [(&#39;asia&#39;, &#39;tub&#39;), (&#39;tub&#39;, &#39;either&#39;), (&#39;smoke&#39;, &#39;lung&#39;), (&#39;smoke&#39;, &#39;bronc&#39;), (&#39;lung&#39;, &#39;either&#39;), (&#39;bronc&#39;, &#39;dysp&#39;), (&#39;either&#39;, &#39;xray&#39;), (&#39;either&#39;, &#39;dysp&#39;)]
&#39;&#39;&#39;</span>

<span class="token comment">## Initializing the VariableElimination class</span>
<span class="token keyword">from</span> pgmpy<span class="token punctuation">.</span>inference <span class="token keyword">import</span> VariableElimination
asia_infer <span class="token operator">=</span> VariableElimination<span class="token punctuation">(</span>asia_model<span class="token punctuation">)</span>
<span class="token comment">## Computing the probability of bronc given smoke=no.</span>
q <span class="token operator">=</span> asia_infer<span class="token punctuation">.</span>query<span class="token punctuation">(</span>variables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;bronc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> evidence<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;smoke&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;no&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
<span class="token comment">## Computing the joint probability of bronc and asia given smoke=yes</span>
q <span class="token operator">=</span> asia_infer<span class="token punctuation">.</span>query<span class="token punctuation">(</span>variables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;bronc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;asia&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> evidence<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;smoke&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;yes&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
<span class="token comment">## Computing the probabilities (not joint) of bronc and asia given smoke=no</span>
q <span class="token operator">=</span> asia_infer<span class="token punctuation">.</span>query<span class="token punctuation">(</span>variables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;bronc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;asia&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> evidence<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;smoke&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;no&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> joint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> factor <span class="token keyword">in</span> q<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>factor<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
+------------+--------------+
| bronc      |   phi(bronc) |
+============+==============+
| bronc(yes) |       0.3000 |
+------------+--------------+
| bronc(no)  |       0.7000 |
+------------+--------------+
+------------+-----------+-------------------+
| bronc      | asia      |   phi(bronc,asia) |
+============+===========+===================+
| bronc(yes) | asia(yes) |            0.0060 |
+------------+-----------+-------------------+
| bronc(yes) | asia(no)  |            0.5940 |
+------------+-----------+-------------------+
| bronc(no)  | asia(yes) |            0.0040 |
+------------+-----------+-------------------+
| bronc(no)  | asia(no)  |            0.3960 |
+------------+-----------+-------------------+
+------------+--------------+
| bronc      |   phi(bronc) |
+============+==============+
| bronc(yes) |       0.3000 |
+------------+--------------+
| bronc(no)  |       0.7000 |
+------------+--------------+
+-----------+-------------+
| asia      |   phi(asia) |
+===========+=============+
| asia(yes) |      0.0100 |
+-----------+-------------+
| asia(no)  |      0.9900 |
+-----------+-------------+
&#39;&#39;&#39;</span>

<span class="token comment">## Computing the MAP of bronc given smoke=no.</span>
q <span class="token operator">=</span> asia_infer<span class="token punctuation">.</span>map_query<span class="token punctuation">(</span>variables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;bronc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> evidence<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;smoke&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;no&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
<span class="token comment">## Computing the MAP of bronc and asia given smoke=yes</span>
q <span class="token operator">=</span> asia_infer<span class="token punctuation">.</span>map_query<span class="token punctuation">(</span>variables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;bronc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;asia&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> evidence<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;smoke&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;yes&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
{&#39;bronc&#39;: &#39;no&#39;}
{&#39;bronc&#39;: &#39;yes&#39;, &#39;asia&#39;: &#39;no&#39;}
&#39;&#39;&#39;</span>

lung_virt_evidence <span class="token operator">=</span> TabularCPD<span class="token punctuation">(</span>variable<span class="token operator">=</span><span class="token string">&#39;lung&#39;</span><span class="token punctuation">,</span> variable_card<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">## Query with hard evidence smoke = no and virtual evidence lung = [0.4, 0.6]</span>
q <span class="token operator">=</span> asia_infer<span class="token punctuation">.</span>query<span class="token punctuation">(</span>variables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;bronc&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> evidence<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;smoke&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;no&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> virtual_evidence<span class="token operator">=</span><span class="token punctuation">[</span>lung_virt_evidence<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
+------------+--------------+
| bronc      |   phi(bronc) |
+============+==============+
| bronc(yes) |       0.3000 |
+------------+--------------+
| bronc(no)  |       0.7000 |
+------------+--------------+
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://pgmpy.org/examples/Inference%20in%20Discrete%20Bayesian%20Networks.html</p><h2 id="causal-inference" tabindex="-1"><a class="header-anchor" href="#causal-inference" aria-hidden="true">#</a> Causal Inference</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pgmpy<span class="token punctuation">.</span>models <span class="token keyword">import</span> BayesianNetwork
<span class="token keyword">from</span> pgmpy<span class="token punctuation">.</span>inference <span class="token keyword">import</span> VariableElimination
<span class="token keyword">from</span> pgmpy<span class="token punctuation">.</span>factors<span class="token punctuation">.</span>discrete <span class="token keyword">import</span> TabularCPD
<span class="token keyword">from</span> pgmpy<span class="token punctuation">.</span>inference <span class="token keyword">import</span> CausalInference

simp_model <span class="token operator">=</span> BayesianNetwork<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
simp_model<span class="token punctuation">.</span>to_daft<span class="token punctuation">(</span>node_pos<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;S&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>

cpd_s <span class="token operator">=</span> TabularCPD<span class="token punctuation">(</span>variable<span class="token operator">=</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">,</span>
                   variable_card<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>
                   values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                           <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   state_names<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;m&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
cpd_t <span class="token operator">=</span> TabularCPD<span class="token punctuation">(</span>variable<span class="token operator">=</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">,</span>
                   variable_card<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>
                   values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                           <span class="token punctuation">[</span><span class="token number">0.75</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   evidence<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   evidence_card<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   state_names<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&#39;m&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
cpd_c <span class="token operator">=</span> TabularCPD<span class="token punctuation">(</span>variable<span class="token operator">=</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span>
                   variable_card<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>
                   values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                           <span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   evidence<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   evidence_card<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                   state_names<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;S&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;m&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

simp_model<span class="token punctuation">.</span>add_cpds<span class="token punctuation">(</span>cpd_s<span class="token punctuation">,</span> cpd_t<span class="token punctuation">,</span> cpd_c<span class="token punctuation">)</span>


<span class="token comment">## Non adjusted inference</span>
infer_non_adjust <span class="token operator">=</span> VariableElimination<span class="token punctuation">(</span>simp_model<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>infer_non_adjust<span class="token punctuation">.</span>query<span class="token punctuation">(</span>variables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> evidence<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>infer_non_adjust<span class="token punctuation">.</span>query<span class="token punctuation">(</span>variables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> evidence<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token triple-quoted-string string">&#39;&#39;&#39;
+------+----------+
| C    |   phi(C) |
+======+==========+
| C(0) |   0.5000 |
+------+----------+
| C(1) |   0.5000 |
+------+----------+
+------+----------+
| C    |   phi(C) |
+======+==========+
| C(0) |   0.6000 |
+------+----------+
| C(1) |   0.4000 |
+------+----------+
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://pgmpy.org/examples/Causal%20Inference.html</p>`,5);function v(m,b){const a=t("ExternalLinkIcon");return e(),o("div",null,[u,r,n("p",null,[s("使用"),n("a",k,[s("Asia network"),c(a)]),s(", 来进行推理(Inference)")]),d])}const _=p(l,[["render",v],["__file","pgmpy推理.html.vue"]]);export{_ as default};
