import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as p,c as i,a as n,b as e,d as a,e as o}from"./app-SnI5rGHA.js";const c={},r=n("h1",{id:"markdown",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#markdown","aria-hidden":"true"},"#"),e(" markdown")],-1),d={href:"https://plugin-md-enhance.vuejs.press/zh/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/vuepress-theme-hope/vuepress-theme-hope",target:"_blank",rel:"noopener noreferrer"},k=o(`<p>写python脚本, 完成:</p><ol><li>将标题加1级</li><li>将文件路径前一级加上文章名称路径</li></ol><p>个性化配置:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token key atrule">pageInfo</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> // 关闭文章信息
  <span class="token key atrule">breadcrumb</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">,</span> // 关闭面包屑导航
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="博客文档组织形式" tabindex="-1"><a class="header-anchor" href="#博客文档组织形式" aria-hidden="true">#</a> 博客文档组织形式</h1><ol><li>将所有文件和文件夹, 放在根目录下. 然后在导航中自定义路径.</li><li>按目录结构将文章存放在距离目录下.</li></ol><p>第一种方法, 更符合编程习惯, 如果仅需要更新导航栏, 则每次写完文章后只需要更新导航栏配置即可. 但是如果想在首页自动生成链接, 则无法进行模块排序和划分. 这一点显然第二种方法更好.</p><p>最终头导航栏和侧边导航栏功能设计为:</p><ul><li>头导航栏: 设一级和二级标题, 自动链接到首页的位置</li><li>侧导航栏: 设三级和更高级标题, 链接到具体文章.</li></ul><h1 id="目录结构最佳实践" tabindex="-1"><a class="header-anchor" href="#目录结构最佳实践" aria-hidden="true">#</a> 目录结构最佳实践</h1><p>同级目录下不能即出现下一级目录(但可以出现文章的资源目录), 又出现文章.</p><p>建议:</p><ul><li>苹果 <ul><li>介绍 <ul><li>苹果发源</li><li>苹果构成</li></ul></li><li>种类1苹果</li><li>种类2苹果</li></ul></li></ul><p>禁止:</p><ul><li>苹果 <ul><li>苹果发源</li><li>苹果构成</li><li>种类1苹果</li><li>种类2苹果</li></ul></li></ul><h1 id="导航分类" tabindex="-1"><a class="header-anchor" href="#导航分类" aria-hidden="true">#</a> 导航分类</h1><p>文档结构 一级标题(目录): 综合, 比如法学, 是由民法, 民诉, 刑法, 刑诉等构成; 又如数学, 是由线代, 微积分, 代数构成; 编程语言, 由汇编, C, java, python构成 二级标题(目录): 就是综合下面的具体学科, 详细见一级标题. 三级标题(目录): 是学科的张章节, 如民法, 包含总则, 所有权, 继承等章节</p><blockquote><p>有些学科会出现册, 比如上册下册, 或者编, 比如总则编, 物权编等. 可以作为三级标题, 章节作为四级标题</p></blockquote><p>四级标题(目录): 章节的具体内容</p><p>文章中, 只出现一级标题和二级标题, 剩余的文章结构(三级, 四级, 五级)均使用列表表示. 当然, 也可以从二级标题开始使用列表表示.</p><h1 id="文章排序" tabindex="-1"><a class="header-anchor" href="#文章排序" aria-hidden="true">#</a> 文章排序</h1><p>文章分为有序文章和无序文章.</p><ul><li><p>有序文章是指阅读有先后次序, 常见情况是后面的文章依赖于前面的文章. vuepress的实现方法有两种:</p><ul><li>在<code>sidebar.ts</code>中设置<code>sidebar: &quot;structure&quot;</code>, <code>sidebarSorter: &quot;filename&quot;</code>, 即按文件名称排序, 然后根据需要写文件名, 比如在文件名前加<code>1</code>,<code>2</code>,<code>3</code>来调整顺序. 然后在文章内部, 在<code>title</code>处将序号省去.</li><li>在<code>sidebar.ts</code>中设置<code>sidebar: sidebar</code>, 然后使用<code>genIndex.py</code>自动生成<code>sidebar.ts</code>文件</li></ul><blockquote><p>🔴:使用<code>第1章</code>,<code>第2章</code>的表述, 而不应该使用<code>第一章</code>,<code>第二章</code>, 因为拼音排序无法区分<code>一</code>,<code>二</code>.</p></blockquote></li><li><p>无需文章是指阅读没有先后次序, 无论是<code>sidebar: &quot;structure&quot;</code>还是通过<code>genIndex.py</code>自动生成<code>sidebar.ts</code>文件, 都是默认按照拼音字母排序</p></li></ul><h1 id="自定组件" tabindex="-1"><a class="header-anchor" href="#自定组件" aria-hidden="true">#</a> 自定组件</h1>`,24),h={href:"https://v2.vuepress.vuejs.org/zh/reference/plugin/register-components.html#register-components",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[n("p",null,"配置插件目录")],-1),v=o(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// .vuepress/config.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> registerComponentsPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vuepress/plugin-register-components&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> getDirname<span class="token punctuation">,</span> path <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@vuepress/utils&#39;</span>

<span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">getDirname</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">registerComponentsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      componentsDir<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./components&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建<code>.vuepress/components</code>, 里面的<code>*.vue</code>文件既可以被直接调用</li></ol>`,2),b={href:"https://blog.csdn.net/sinat_31213021/article/details/119385175",target:"_blank",rel:"noopener noreferrer"};function _(g,f){const s=l("ExternalLinkIcon");return p(),i("div",null,[r,n("p",null,[e("安装MD增强"),n("a",d,[e("vuepress-plugin-md-enhance"),a(s)])]),n("p",null,[e("安装主题"),n("a",u,[e("vuepress-theme-hope"),a(s)])]),k,n("ol",null,[n("li",null,[n("p",null,[e("参考官网步骤"),n("a",h,[e("register-components"),a(s)])])]),m]),v,n("p",null,[e("参考"),n("a",b,[e("Vuepress2.x Markdown 中使用 Vue 组件"),a(s)])])])}const w=t(c,[["render",_],["__file","markdown.html.vue"]]);export{w as default};
