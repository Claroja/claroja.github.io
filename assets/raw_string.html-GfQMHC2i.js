import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,d as t}from"./app-j3zK2x6_.js";const e={},o=t(`<h1 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> string</h1><h2 id="转义" tabindex="-1"><a class="header-anchor" href="#转义" aria-hidden="true">#</a> 转义</h2><p>转义字符<code>\\</code>有两个作用:</p><ol><li>将特殊的字符变成普通字符, 比如表字符串的单引号<code>&#39;</code>和双引号<code>&quot;</code>, 以及转义字符<code>\\</code>本身</li><li>给字符赋予特殊含义</li></ol><h3 id="转换为普通字符" tabindex="-1"><a class="header-anchor" href="#转换为普通字符" aria-hidden="true">#</a> 转换为普通字符</h3><p>一些字符是python解释器当成的特殊的字符, 比如单引号<code>&#39;</code>, 如果在字符串里直接使用会报错.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;This string contains a single quote (&#39;</span><span class="token punctuation">)</span> character<span class="token punctuation">.</span>&#39;<span class="token punctuation">)</span>
<span class="token comment">## SyntaxError: invalid syntax</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时, 可以使用<code>\\</code>来讲特殊字符变为普通字符, <code>\\</code>被称为转义(escape)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;This string contains a single quote (\\&#39;) character.&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>escape</th><th>描述</th></tr></thead><tbody><tr><td><code>\\&#39;</code></td><td>将字符串单引号变成普通字符, <code>print(&#39;\\&#39;&#39;) # &#39;</code></td></tr><tr><td><code>\\&quot;</code></td><td>将字符串双引号变成普通字符, <code>print(&quot;\\&quot;&quot;) # &quot;</code></td></tr><tr><td><code>\\&lt;newline&gt;</code></td><td>python编辑器中多行输入</td></tr><tr><td><code>\\\\</code></td><td>将转义字符变成普通字符, <code>print(&quot;\\\\&quot;) # \\</code></td></tr></tbody></table><p><strong>注意</strong><code>\\&lt;newline&gt;</code>的一个坑</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span>\\
        <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span>  <span class="token comment"># [&quot;ab&quot;] 没有加逗号会自动合并成一个字符串</span>
list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> \\
        <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span>  <span class="token comment"># [&quot;a&quot;,&quot;b&quot;]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子:</p><ol><li><code>\\&lt;newline&gt;</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>&#39;a\\
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> b\\
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> c&#39;<span class="token punctuation">)</span>
<span class="token comment">## abc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="赋予特殊含义" tabindex="-1"><a class="header-anchor" href="#赋予特殊含义" aria-hidden="true">#</a> 赋予特殊含义</h3><table><thead><tr><th>Escape Sequence</th><th>“Escaped” Interpretation</th></tr></thead><tbody><tr><td><code>\\a</code></td><td>ASCII Bell (BEL) character, <code>print(&quot;\\a&quot;)</code></td></tr><tr><td><code>\\b</code></td><td>ASCII Backspace (BS) character, <code>print(&quot;Hello \\b World!&quot;) # Hello \b World!</code></td></tr><tr><td><code>\\f</code></td><td>ASCII Formfeed (FF) character, <code>print(&quot;Hello \\f World!&quot;) # Hello World!</code></td></tr><tr><td><code>\\n</code></td><td>ASCII Linefeed (LF) character, <code>print(&quot;Hello \\n World!&quot;)</code></td></tr><tr><td><code>\\N{&lt;name&gt;</code>}</td><td>Character from Unicode database with given <code>&lt;name&gt;</code></td></tr><tr><td><code>\\r</code></td><td>ASCII Carriage Return (CR) character, <code>print(&quot;Hello \\r World!&quot;)</code></td></tr><tr><td><code>\\t</code></td><td>ASCII Horizontal Tab (TAB) character, <code>print(&quot;Hello \\t World!&quot;) # Hello World!</code></td></tr><tr><td><code>\\uxxxx</code></td><td>Unicode character with 16-bit hex value xxxx</td></tr><tr><td><code>\\Uxxxxxxxx</code></td><td>Unicode character with 32-bit hex value xxxxxxxx</td></tr><tr><td><code>\\v</code></td><td>ASCII Vertical Tab (VT) character, <code>print(&quot;Hello \\v World!&quot;) # Hello \v World!</code></td></tr><tr><td><code>\\ooo</code></td><td>Character with octal value ooo, <code>print(&quot;\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41&quot;) # Hello World!</code></td></tr><tr><td><code>\\xhh</code></td><td>Character with hex value hh, <code>print(&quot;\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21&quot;) # Hello World!</code></td></tr></tbody></table><p>例子:</p><ol><li><code>\\ooo</code>八进制ascii码表示 也就是说, 每位小于8的组合, 加上转义字符都有特殊含义: 八进制ascii|十六进制ascii|十进制ascii|ascii --|--|--|-- <code>&#39;\\0&#39;</code>|<code>&#39;\\x00&#39;</code>|<code>0</code>|<code>null</code><code>&#39;\\1&#39;</code>|<code>&#39;\\x01&#39;</code>|<code>1</code>|<code>soh</code><code>&#39;\\11&#39;</code>|<code>&#39;\\x09&#39;</code>|<code>9</code>|<code>&#39;\\t&#39;</code><code>&#39;\\111&#39;</code>|<code>&#39;\\x49&#39;</code>|<code>73</code>|<code>&#39;I&#39;</code> 注意超过八进制的计数范围的数字不会进行转码</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\97&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># \\97</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\79&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 9 # \`\\7\`被当成八进制进行了转码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意, 可以在python console中直接观察输入字符串后, 解释器的处理行为:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;\\1&#39;</span>  <span class="token comment"># &#39;\\x01&#39; 直接转换成字节</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 空, 因为\`\\x01\`没有办法显示</span>
<span class="token string">&quot;\\\\1&quot;</span>  <span class="token comment"># &#39;\\\\1&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># \\1</span>
<span class="token string">&quot;\\t&quot;</span> <span class="token comment"># &#39;\\t&#39; 转换成字节, 并用ascii码表示</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 制表符</span>
<span class="token string">&quot;\\d&quot;</span>  <span class="token comment"># &#39;\\\\d&#39; 转换成字节码, 由于\`\\d\`不是特殊含义字符, 所以字节码中先用\`\\\\\`表示一个\`\\\`, 然后ascii码表示字节</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\d&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># \\d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="raw-string" tabindex="-1"><a class="header-anchor" href="#raw-string" aria-hidden="true">#</a> raw string</h2><p>字符串前以<code>r</code>或<code>R</code>开头表示该字符串内的<code>\\</code>不进行解释.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## foo</span>
<span class="token comment">## bar</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## foo\\nbar</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\\\bar&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## foo\\bar</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">R&#39;foo\\\\bar&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## foo\\\\bar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3><p>在正则表达式中, 定义了一些可以赋予特殊含义的转义字符如:</p><ol><li><code>\\w</code>表示字符</li><li><code>\\s</code>表示空白</li><li><code>\\d</code>表示数字</li><li><code>\\b</code>表示单词的开始和结束</li><li><code>\\1</code>表示分组</li></ol><p>其中1,2,3使用普通字符串就可以表示, 但是4,5中的<code>\\b</code>和<code>\\1</code>在字符串中有特殊含义, 会先被python解释器转义.这时就需要使用到<code>raw string</code>或者给<code>\\</code>前加<code>\\</code>进行转义, 既<code>\\\\b</code>和<code>\\\\1</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment"># a</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment"># a</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a b&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 空</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a b&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 空</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\bfoo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None \`\\b\`被转义成了&#39;\\x08&#39;所以无法正常匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bfoo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foo , 另一种解法\`re.search(&#39;\\\\bfoo\\\\b&#39;,&#39;bar.foo&#39;)\`</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(a)\\1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None \`\\1\`被转义成了\`\\x01\`所以正则无法匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;(a)\\1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span> <span class="token comment"># aa, 另一种解法\`re.search(r&#39;(a)\\\\1&#39;,&#39;aa&#39;)\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>建议在regex中如果遇到了<code>\\</code>就使用raw string, 或者无脑对所有字符串都使用raw string, 因为不转义的string和raw string也是一样的.</strong></p><p>一个小问题, 看是不是能真正理解字符串的转义:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\167&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment"># a 等价re.search(&#39;\\w&#39;, &#39;abc&#39;), 因为\`\\\\\`被python解释器转义为\`\\\`, 而\`\\167\`是ascii码\`w\`八进制表示, 下面的同理:</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\163&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a b&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 空</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\144&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\142foo\\\\\\142&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(a)\\\\\\61&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span> <span class="token comment"># aa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://realpython.com/python-data-types/#strings</p>`,34),c=[o];function p(i,d){return s(),a("div",null,c)}const u=n(e,[["render",p],["__file","raw_string.html.vue"]]);export{u as default};
