const t=JSON.parse('{"key":"v-1594505a","path":"/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/6typescript/%E5%9F%BA%E7%A1%80.html","title":"基础","lang":"zh-CN","frontmatter":{"description":"基础 TypeScript是JavaScript的超集。对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。 TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。 相较于JS而言， TS拥有了静态类型，更加严格的语法，更强大的功能； TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率 TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题； 同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/6typescript/%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"基础 TypeScript是JavaScript的超集。对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。 TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。 相较于JS而言， TS拥有了静态类型，更加严格的语法，更强大的功能； TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率 TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题； 同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"组合类型(Composing Types)","slug":"组合类型-composing-types","link":"#组合类型-composing-types","children":[]},{"level":2,"title":"Structural Type System","slug":"structural-type-system","link":"#structural-type-system","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.72,"words":515},"filePathRelative":"4编程语言/6typescript/基础.md","localizedDate":"2025年2月24日","excerpt":"<h1> 基础</h1>\\n<ol>\\n<li>TypeScript是JavaScript的超集。对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li>\\n<li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li>\\n<li>相较于JS而言，\\n<ul>\\n<li>TS拥有了静态类型，更加严格的语法，更强大的功能；</li>\\n<li>TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率</li>\\n<li>TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；</li>\\n<li>同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li>\\n</ul>\\n</li>\\n</ol>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
