const n=JSON.parse(`{"key":"v-1741e948","path":"/1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/3%E6%A0%91%E6%A8%A1%E5%9E%8B/7LightGBM/7LightGBM%E5%AE%9E%E8%B7%B5_%E4%BA%8C%E5%88%86%E7%B1%BB.html","title":"","lang":"zh-CN","frontmatter":{"description":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.model_selection import GridSearchCV from lightgbm import LGBMClassifier data_all = pd.read_csv( './data/train.csv', usecols=['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']) data_all = data_all.dropna() data_all['Sex'] = data_all['Sex'].map({'male':0,'female':1}).astype('category') data_all['Embarked'] = data_all['Embarked'].map({'S':0,'C':1,'Q':3 }).astype('category') df_train = data_all.groupby('Survived', group_keys=False).apply(lambda x: x.sample(frac=0.8)) df_test = data_all.drop(df_train.index, axis=0) params = { 'n_estimators': range(1,100), # 'max_depth': [None, 2, 4, 6, 8, 10], # 'criterion': ['gini', 'entropy'], # 'max_features': [None, 'sqrt', 'log2', 0.2, 0.4, 0.6, 0.8], } clf_grid = GridSearchCV( estimator=LGBMClassifier(objective='binary', random_state=10), param_grid=params, cv=5, n_jobs=5, verbose=1, ) clf_grid.fit(df_train.loc[:, df_train.columns != 'Survived'], df_train['Survived']) print(accuracy_score(df_test['Survived'], clf_grid.predict(df_test.loc[:, df_test.columns != 'Survived']))) # 0.7921348314606742 clf_grid.best_params_","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/3%E6%A0%91%E6%A8%A1%E5%9E%8B/7LightGBM/7LightGBM%E5%AE%9E%E8%B7%B5_%E4%BA%8C%E5%88%86%E7%B1%BB.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:description","content":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.model_selection import GridSearchCV from lightgbm import LGBMClassifier data_all = pd.read_csv( './data/train.csv', usecols=['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']) data_all = data_all.dropna() data_all['Sex'] = data_all['Sex'].map({'male':0,'female':1}).astype('category') data_all['Embarked'] = data_all['Embarked'].map({'S':0,'C':1,'Q':3 }).astype('category') df_train = data_all.groupby('Survived', group_keys=False).apply(lambda x: x.sample(frac=0.8)) df_test = data_all.drop(df_train.index, axis=0) params = { 'n_estimators': range(1,100), # 'max_depth': [None, 2, 4, 6, 8, 10], # 'criterion': ['gini', 'entropy'], # 'max_features': [None, 'sqrt', 'log2', 0.2, 0.4, 0.6, 0.8], } clf_grid = GridSearchCV( estimator=LGBMClassifier(objective='binary', random_state=10), param_grid=params, cv=5, n_jobs=5, verbose=1, ) clf_grid.fit(df_train.loc[:, df_train.columns != 'Survived'], df_train['Survived']) print(accuracy_score(df_test['Survived'], clf_grid.predict(df_test.loc[:, df_test.columns != 'Survived']))) # 0.7921348314606742 clf_grid.best_params_"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-25T10:13:52.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-25T10:13:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-25T10:13:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740478432000,"updatedTime":1740478432000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.43,"words":130},"filePathRelative":"1机器学习/1算法原理/3树模型/7LightGBM/7LightGBM实践_二分类.md","localizedDate":"2025年2月25日","excerpt":"<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token keyword\\">import</span> pandas <span class=\\"token keyword\\">as</span> pd\\n<span class=\\"token keyword\\">from</span> sklearn<span class=\\"token punctuation\\">.</span>model_selection <span class=\\"token keyword\\">import</span> train_test_split\\n<span class=\\"token keyword\\">from</span> sklearn<span class=\\"token punctuation\\">.</span>metrics <span class=\\"token keyword\\">import</span> accuracy_score\\n<span class=\\"token keyword\\">from</span> sklearn<span class=\\"token punctuation\\">.</span>model_selection <span class=\\"token keyword\\">import</span> GridSearchCV\\n<span class=\\"token keyword\\">from</span> lightgbm <span class=\\"token keyword\\">import</span> LGBMClassifier\\n\\n\\ndata_all <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>read_csv<span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token string\\">'./data/train.csv'</span><span class=\\"token punctuation\\">,</span> \\n    usecols<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'Survived'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Pclass'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Sex'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Age'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'SibSp'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Parch'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'Fare'</span><span class=\\"token punctuation\\">,</span>  <span class=\\"token string\\">'Embarked'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n\\ndata_all <span class=\\"token operator\\">=</span> data_all<span class=\\"token punctuation\\">.</span>dropna<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\ndata_all<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'Sex'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> data_all<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'Sex'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">'male'</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'female'</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>astype<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'category'</span><span class=\\"token punctuation\\">)</span>\\ndata_all<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'Embarked'</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> data_all<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'Embarked'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">map</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">'S'</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'C'</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'Q'</span><span class=\\"token punctuation\\">:</span><span class=\\"token number\\">3</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>astype<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'category'</span><span class=\\"token punctuation\\">)</span>\\n\\ndf_train <span class=\\"token operator\\">=</span> data_all<span class=\\"token punctuation\\">.</span>groupby<span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Survived'</span><span class=\\"token punctuation\\">,</span> group_keys<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token builtin\\">apply</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">lambda</span> x<span class=\\"token punctuation\\">:</span> x<span class=\\"token punctuation\\">.</span>sample<span class=\\"token punctuation\\">(</span>frac<span class=\\"token operator\\">=</span><span class=\\"token number\\">0.8</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\ndf_test <span class=\\"token operator\\">=</span> data_all<span class=\\"token punctuation\\">.</span>drop<span class=\\"token punctuation\\">(</span>df_train<span class=\\"token punctuation\\">.</span>index<span class=\\"token punctuation\\">,</span> axis<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n\\nparams <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token string\\">'n_estimators'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token builtin\\">range</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token comment\\"># 'max_depth':  [None, 2, 4, 6, 8, 10],</span>\\n    <span class=\\"token comment\\"># 'criterion':  ['gini', 'entropy'],</span>\\n    <span class=\\"token comment\\"># 'max_features': [None, 'sqrt', 'log2', 0.2, 0.4, 0.6, 0.8],</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\nclf_grid <span class=\\"token operator\\">=</span> GridSearchCV<span class=\\"token punctuation\\">(</span>\\n    estimator<span class=\\"token operator\\">=</span>LGBMClassifier<span class=\\"token punctuation\\">(</span>objective<span class=\\"token operator\\">=</span><span class=\\"token string\\">'binary'</span><span class=\\"token punctuation\\">,</span> random_state<span class=\\"token operator\\">=</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    param_grid<span class=\\"token operator\\">=</span>params<span class=\\"token punctuation\\">,</span>\\n    cv<span class=\\"token operator\\">=</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span>\\n    n_jobs<span class=\\"token operator\\">=</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span>\\n    verbose<span class=\\"token operator\\">=</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\nclf_grid<span class=\\"token punctuation\\">.</span>fit<span class=\\"token punctuation\\">(</span>df_train<span class=\\"token punctuation\\">.</span>loc<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">:</span><span class=\\"token punctuation\\">,</span> df_train<span class=\\"token punctuation\\">.</span>columns <span class=\\"token operator\\">!=</span> <span class=\\"token string\\">'Survived'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> df_train<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'Survived'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>accuracy_score<span class=\\"token punctuation\\">(</span>df_test<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'Survived'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> clf_grid<span class=\\"token punctuation\\">.</span>predict<span class=\\"token punctuation\\">(</span>df_test<span class=\\"token punctuation\\">.</span>loc<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">:</span><span class=\\"token punctuation\\">,</span> df_test<span class=\\"token punctuation\\">.</span>columns <span class=\\"token operator\\">!=</span> <span class=\\"token string\\">'Survived'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># 0.7921348314606742</span>\\nclf_grid<span class=\\"token punctuation\\">.</span>best_params_ \\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{n as data};
