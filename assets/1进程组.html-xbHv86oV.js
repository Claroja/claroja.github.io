const t=JSON.parse('{"key":"v-c205060e","path":"/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c%E8%AF%AD%E8%A8%80/8%E8%BF%9B%E7%A8%8B/1%E8%BF%9B%E7%A8%8B%E7%BB%84.html","title":"","lang":"zh-CN","frontmatter":{"description":"1.进程组(Process Group),每个进程都属于一个进程组 2.进程组领导进程(Process Group Leader)既为该进程组的ID(Process Group ID,PGID) 3.父进程创建子进程(fork,exec),此父进程就会成为该进程组的领导进程(父和子孙构成了进程组) 4.将信号发给一个进程组,进程组中的所有进程都会收到该信号 5.只要进程组中有一个进程存在，进程组就存在，与组长进程是否终止无关。 6.一个进程可以为自己或子进程设置进程组ID 函数 描述 返回 pid_t getpgrp(void); 进程的进程组ID pid_t getpgid(pid_t pid); 获取指定进程的进程组ID 成功：0；失败：-1，设置errno int setpgid(pid_t pid, pid_t pgid); 将参1对应的进程，加入参2对应的进程组中。 成功：0；失败：-1，设置errno","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c%E8%AF%AD%E8%A8%80/8%E8%BF%9B%E7%A8%8B/1%E8%BF%9B%E7%A8%8B%E7%BB%84.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:description","content":"1.进程组(Process Group),每个进程都属于一个进程组 2.进程组领导进程(Process Group Leader)既为该进程组的ID(Process Group ID,PGID) 3.父进程创建子进程(fork,exec),此父进程就会成为该进程组的领导进程(父和子孙构成了进程组) 4.将信号发给一个进程组,进程组中的所有进程都会收到该信号 5.只要进程组中有一个进程存在，进程组就存在，与组长进程是否终止无关。 6.一个进程可以为自己或子进程设置进程组ID 函数 描述 返回 pid_t getpgrp(void); 进程的进程组ID pid_t getpgid(pid_t pid); 获取指定进程的进程组ID 成功：0；失败：-1，设置errno int setpgid(pid_t pid, pid_t pgid); 将参1对应的进程，加入参2对应的进程组中。 成功：0；失败：-1，设置errno"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.78,"words":235},"filePathRelative":"4编程语言/2c语言/8进程/1进程组.md","localizedDate":"2025年2月24日","excerpt":"<p>1.进程组(Process Group),每个进程都属于一个进程组\\n2.进程组领导进程(Process Group Leader)既为该进程组的ID(Process Group ID,PGID)\\n3.父进程创建子进程(fork,exec),此父进程就会成为该进程组的领导进程(父和子孙构成了进程组)\\n4.将信号发给一个进程组,进程组中的所有进程都会收到该信号\\n5.只要进程组中有一个进程存在，进程组就存在，与组长进程是否终止无关。\\n6.一个进程可以为自己或子进程设置进程组ID</p>\\n<table>\\n<thead>\\n<tr>\\n<th>函数</th>\\n<th>描述</th>\\n<th>返回</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>pid_t getpgrp(void);</td>\\n<td>进程的进程组ID</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>pid_t getpgid(pid_t pid);</td>\\n<td>获取指定进程的进程组ID</td>\\n<td>成功：0；失败：-1，设置errno</td>\\n</tr>\\n<tr>\\n<td>int setpgid(pid_t pid, pid_t pgid);</td>\\n<td>将参1对应的进程，加入参2对应的进程组中。</td>\\n<td>成功：0；失败：-1，设置errno</td>\\n</tr>\\n</tbody>\\n</table>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
