const t=JSON.parse('{"key":"v-a6ec5f8a","path":"/7%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2spring/Spring/AOP.html","title":"color","lang":"zh-CN","frontmatter":{"description":"color 面向切面编程（方面）,不通过修改源代码方式，在主干功能里面添加新功能 类似于Python的装饰器 Spring 框架一般都是基于AspectJ实现AOP操作, AspectJ不是Spring组成部分，独立AOP框架，一般把AspectJ和Spirng框架一起使用，进行AOP操作 底层原理 有接口情况，使用 JDK 动态代理, 参考设计模式 没有接口情况，使用 CGLIB 动态代理 AOP术语 连接点 可以被代理的方法 切入点 被代理的方法 通知 额外添加的功能 前置通知 方法执行前执行 后置通知 方法执行后执行 环绕通知 方法执行前后执行 异常通知 方法抛出异常执行 最终通知 无论如何都执行","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/7%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/2spring/Spring/AOP.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"color"}],["meta",{"property":"og:description","content":"color 面向切面编程（方面）,不通过修改源代码方式，在主干功能里面添加新功能 类似于Python的装饰器 Spring 框架一般都是基于AspectJ实现AOP操作, AspectJ不是Spring组成部分，独立AOP框架，一般把AspectJ和Spirng框架一起使用，进行AOP操作 底层原理 有接口情况，使用 JDK 动态代理, 参考设计模式 没有接口情况，使用 CGLIB 动态代理 AOP术语 连接点 可以被代理的方法 切入点 被代理的方法 通知 额外添加的功能 前置通知 方法执行前执行 后置通知 方法执行后执行 环绕通知 方法执行前后执行 异常通知 方法抛出异常执行 最终通知 无论如何都执行"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"color\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":3,"title":"底层原理","slug":"底层原理","link":"#底层原理","children":[]},{"level":3,"title":"AOP术语","slug":"aop术语","link":"#aop术语","children":[]},{"level":3,"title":"切入点表达式","slug":"切入点表达式","link":"#切入点表达式","children":[]},{"level":3,"title":"操作步骤","slug":"操作步骤","link":"#操作步骤","children":[]}],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.01,"words":304},"filePathRelative":"7后端开发/2spring/Spring/AOP.md","localizedDate":"2025年2月24日","excerpt":"<h1> color</h1>\\n<p>面向切面编程（方面）,不通过修改源代码方式，在主干功能里面添加新功能\\n类似于Python的装饰器\\nSpring 框架一般都是基于AspectJ实现AOP操作, AspectJ不是Spring组成部分，独立AOP框架，一般把AspectJ和Spirng框架一起使用，进行AOP操作</p>\\n<h3> 底层原理</h3>\\n<ul>\\n<li>有接口情况，使用 JDK 动态代理, 参考设计模式</li>\\n<li>没有接口情况，使用 CGLIB 动态代理</li>\\n</ul>\\n<h3> AOP术语</h3>\\n<ul>\\n<li>连接点 可以被代理的方法</li>\\n<li>切入点 被代理的方法</li>\\n<li>通知 额外添加的功能\\n<ul>\\n<li>前置通知 方法执行前执行</li>\\n<li>后置通知 方法执行后执行</li>\\n<li>环绕通知 方法执行前后执行</li>\\n<li>异常通知 方法抛出异常执行</li>\\n<li>最终通知 无论如何都执行</li>\\n</ul>\\n</li>\\n</ul>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
