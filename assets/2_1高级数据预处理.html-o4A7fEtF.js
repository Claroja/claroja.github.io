import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as a,e}from"./app-jdLxCr9I.js";const d="/assets/数据过滤-8v3vsz7I.png",r="/assets/过滤方法1_训练数据分群-_HmoVDN1.png",o="/assets/过滤方法1_测试数据分群-uzPUiFft.png",l="/assets/过滤方法1_模型分群-CBWfbvQ_.png",n="/assets/过滤方法2_测试数据分群-j_2Vq4so.png",p="/assets/过滤方法2_直接预测-QsBo2ZyS.png",s="/assets/分群众数填补-IRbPCLWZ.png",c="/assets/分类模型填补-bNBPGQeM.png",g="/assets/连续模型填补-ZoyOrTmF.png",h="/assets/类别一般化概率转换-6d3maQXt.png",f="/assets/类别一般化粗化转换-VtWpUOII.png",_="/assets/数据离散化的原因-E1JVvUWc.png",u="/assets/数据离散化的效果-rp9UYsVs.png",b="/assets/数据离散化易于解释-PaND0fWB.png",m="/assets/数据离散化易于解释2-MpbPro4k.png",y="/assets/数据离散化易于解释的方法-a7Jtj7rQ.png",x="/assets/数据离散化易于解释的方法2-YGTxO00q.png",z="/assets/数据离散化易于解释的方法3-B8boKAzs.png",B={},v=e('<h1 id="高级数据预处理" tabindex="-1"><a class="header-anchor" href="#高级数据预处理" aria-hidden="true">#</a> 高级数据预处理</h1><h2 id="数据处理技术" tabindex="-1"><a class="header-anchor" href="#数据处理技术" aria-hidden="true">#</a> 数据处理技术</h2><ol><li><p>数据过滤(data filter)</p></li><li><p>缺失值的高级填补技术</p><ol><li>KNN 填补、随机森林填补、XGBcost 填补</li></ol></li><li><p>初级数据转换技术</p><ol><li>类别型字段的编码, 顺序型字段的编码</li></ol></li><li><p>高级数据转换技术</p><ol><li>类别型字段一般化(Generalization)</li><li>数值型字段趋势离散化(Trend Discretization)</li></ol></li></ol><h2 id="数据过滤-data-filter" tabindex="-1"><a class="header-anchor" href="#数据过滤-data-filter" aria-hidden="true">#</a> 数据过滤(data filter)</h2><p>一些属性虽对整体客群有鉴别力，但不一定对特定客群亦具有鉴别力.</p><p>比如, 对坏件率评分而言，<code>年龄</code>对整体有一定程度的鉴别力。但若将样本依收入区分成<code>高收入分群</code>与<code>低收入分群</code>, 可看出坏件率在高收入分群中，各年龄区间的差异并不显着.</p><figure><img src="'+d+'" alt="数据过滤" tabindex="0" loading="lazy"><figcaption>数据过滤</figcaption></figure><p>因此，若能建立<code>区隔化模型</code>，替每个客群找出适合它的变量与模型可进而大幅提升整体模型的鉴别力.</p><p>以信用卡行为评分模型为例</p><ol><li><p>往来期间不足5个月者予以排除，因无足够期间的帐户历史数据做为自变量来源</p></li><li><p>延滞客群适用催收评分模型，不予纳入</p></li><li><p>目前没有延滞的客户则是我们主要的目标客群</p></li><li><p>以业务与统计实证皆指出全清户(Transactor)与循环使用户(Revolver)在风险程度与风险型态上均有显着差异，故选择以客户「是否使用循环」做为主要分群方式</p></li><li><p>过滤方法1</p><figure><img src="'+r+'" alt="过滤方法1_区隔化模型" tabindex="0" loading="lazy"><figcaption>过滤方法1_区隔化模型</figcaption></figure><figure><img src="'+o+'" alt="过滤方法1_测试数据分群" tabindex="0" loading="lazy"><figcaption>过滤方法1_测试数据分群</figcaption></figure><figure><img src="'+l+'" alt="过滤方法1_模型分群" tabindex="0" loading="lazy"><figcaption>过滤方法1_模型分群</figcaption></figure></li><li><p>过滤方法2</p><p><img src="'+n+'" alt="过滤方法2_测试数据分群" loading="lazy"><img src="'+p+'" alt="过滤方法2_直接预测" loading="lazy"></p></li></ol><h2 id="数据缺失处理方法" tabindex="-1"><a class="header-anchor" href="#数据缺失处理方法" aria-hidden="true">#</a> 数据缺失处理方法</h2><h3 id="直接忽略法" tabindex="-1"><a class="header-anchor" href="#直接忽略法" aria-hidden="true">#</a> 直接忽略法</h3><ol><li><p>记录删除</p><ol><li>缺失数据只占一小部分时，便可直接删除。数据缺失比例比较大时，会造成大量数据流失。</li><li>若数据的分类标记 (Class Label) 为空值，可直接删除, 因无法被正确分类</li></ol></li><li><p>字段删除或转换</p><ol><li>缺失数据占整个字段所有数据的比例过大时 (&gt;50%)，便可直接删除。</li><li>当字段有缺失值时，则将整个字段转换成指示变量 (Indicator Variable)，处理数据缺失的特殊方法，缺失数据占整个字段所有数据的比例过大时 (&gt;50%)，便可使用此法. 使用此法的理论基础为空值也是行为的另一种呈现。</li></ol></li></ol><h3 id="人工填补法" tabindex="-1"><a class="header-anchor" href="#人工填补法" aria-hidden="true">#</a> 人工填补法</h3><ol><li>当某会员数据的生日字段有缺失，可打电话询问该会员，以取得其生日并加以填补</li><li>采用适当的值填补. 如别可用身分证字号来补</li></ol><h3 id="自动填补法" tabindex="-1"><a class="header-anchor" href="#自动填补法" aria-hidden="true">#</a> 自动填补法</h3><ol><li><p>类别型字段</p><ol><li><p>填入一个通用的常数值: 如, 在婚姻状况字段, 1代表结婚, 2代表未婚, 另外还出现了0和3, 就可以将0和3融合成新类别未知, 用0或3表示.</p></li><li><p>填入该字段的众数(Mode): 可用分群的方式，分群求众数. 如credit字段和risk字段关联度高, 用green先分群, 然后用其众数low填补</p><figure><img src="'+s+'" alt="分群众数填补" tabindex="0" loading="lazy"><figcaption>分群众数填补</figcaption></figure></li><li><p>利用模型求出较可能的值来填入: 把填补缺失值的问题当作是分类的问题, KNN、随机森林、XGBoosting是常用的选择, 因为可以接受空值作为输入, 而且同时适用分类和回归模型.</p><figure><img src="'+c+'" alt="分类模型填补" tabindex="0" loading="lazy"><figcaption>分类模型填补</figcaption></figure><p>✨输入字段不包含标签字段</p></li></ol></li><li><p>数值型字段</p><ol><li><p>填入一个通用的常数</p></li><li><p>填入该字段的整体平均值(Mean): 可用分群的方式，分群求平均值</p></li><li><p>利用模型求出较可能的值来填入, 把填补缺失值的问题当作是数字预测的问题, KNN、随机森林、XGBoosting是常用的选择, 因为可以接受空值作为输入, 而且同时适用分类和回归模型.</p><figure><img src="'+g+'" alt="连续模型填补" tabindex="0" loading="lazy"><figcaption>连续模型填补</figcaption></figure></li></ol></li></ol><h2 id="初级数据转换技术" tabindex="-1"><a class="header-anchor" href="#初级数据转换技术" aria-hidden="true">#</a> 初级数据转换技术</h2><h3 id="类别字段编码" tabindex="-1"><a class="header-anchor" href="#类别字段编码" aria-hidden="true">#</a> 类别字段编码</h3><p>有如下数据:</p><table><thead><tr><th>水果</th></tr></thead><tbody><tr><td>苹果</td></tr><tr><td>香蕉</td></tr><tr><td>桔子</td></tr></tbody></table><p>进行<code>one-hot</code>(或称<code>dummying</code>)编码:</p><table><thead><tr><th>苹果</th><th>香蕉</th><th>桔子</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>1</td></tr></tbody></table><p>✨one-hot encoding是机器学习领域的叫法, dummying是统计学领域的叫法</p><p>✨小心虚拟变量陷阱(DummyVariableTrap): 变量间会有多重共线性或高度相关的情形发生. 例如，性别字段，若我们产生Male及Female两个虚拟变量的话，那就陷入了虚拟变量陷阱，因为我们可以直接由Female字段中Female=0就知道他是男性</p><h3 id="顺序型字段编码" tabindex="-1"><a class="header-anchor" href="#顺序型字段编码" aria-hidden="true">#</a> 顺序型字段编码</h3><p>有如下数据:</p><table><thead><tr><th>排名</th></tr></thead><tbody><tr><td>低</td></tr><tr><td>中</td></tr><tr><td>中偏上</td></tr><tr><td>高</td></tr></tbody></table><p>进行编码</p><table><thead><tr><th>排名</th><th>编码后的排名</th></tr></thead><tbody><tr><td>低</td><td>1</td></tr><tr><td>中</td><td>2</td></tr><tr><td>中偏上</td><td>3</td></tr><tr><td>高</td><td>4</td></tr></tbody></table><p>更建议为</p><table><thead><tr><th>排名</th><th>编码后的排名</th></tr></thead><tbody><tr><td>低</td><td>1</td></tr><tr><td>中</td><td>2</td></tr><tr><td>中偏上</td><td>2.5</td></tr><tr><td>高</td><td>3</td></tr></tbody></table><h2 id="高级数据转换技术" tabindex="-1"><a class="header-anchor" href="#高级数据转换技术" aria-hidden="true">#</a> 高级数据转换技术</h2><h3 id="数据一般化转换-data-generalization" tabindex="-1"><a class="header-anchor" href="#数据一般化转换-data-generalization" aria-hidden="true">#</a> 数据一般化转换(Data Generalization)</h3><figure><img src="'+h+'" alt="类别一般化概率转换" tabindex="0" loading="lazy"><figcaption>类别一般化概率转换</figcaption></figure><figure><img src="'+f+'" alt="类别一般化概率转换" tabindex="0" loading="lazy"><figcaption>类别一般化概率转换</figcaption></figure><h3 id="数据离散化-data-discretization" tabindex="-1"><a class="header-anchor" href="#数据离散化-data-discretization" aria-hidden="true">#</a> 数据离散化(Data Discretization)</h3><p>数值型字段常常是模型不稳定的影响因素之一. 常常我们会发现分类模型在训练数据集的预测准确度很高，但在测试数据集中的准确度却大幅度下滑. 其中一个相当大的原因就是，许多的输入字段(尤其是数值型输入字段)，在目标字段值上的分布，训练数据集与测试数据集的差异很大</p><p>下图是某数据集中，输入字段年龄(Age)，在目标字段(是否逾期)上的概率分布. 可以看出，在训练及测试数据集上，年龄(Age)在目标字段(是否逾期)上的概率分布是相当不一致的. 例如，在25岁上，训练数据集中的逾期概率只有10%，但在测试数据中却是100%.</p><p>若去计算这两个概率分布的皮尔森相关系数(Pearson Correlations)，则会得到-0.103的结果，代表这两个概率分布其实是呈现负相关的情形</p><p>若年龄是建模中的一个重要输入字段，则可想见模型在训练数据集及测试数据集中的准确度，必然大不相同. 因此，数值型字段离散化(Discretization)是有其必要性</p><figure><img src="'+_+'" alt="数据离散化的原因" tabindex="0" loading="lazy"><figcaption>数据离散化的原因</figcaption></figure><p>数值型字段作离散化的优点:</p><ol><li>可使数据精简，降低数据的复杂度</li><li>可支持许多无法处理数值型字段的算法, 如联规则(AssociationRules)算法</li><li>可提高分类器的稳定性，进而提升分类模型的准确度</li><li>可找出输入字段在目标字段上的趋势(Trend)，有助于未来的解读</li></ol><p>离散化的方法:</p><p>离散化(Discretization)就是切割出数个区间来取代值域上众多的数据数值</p><p>人工分离法:</p><p>据对数据的认知、专家的建议、普遍存在的现象，将数据数值分离出数个区间. 如年龄可以分离出下列三个区间，<code>(0,30]、(30,60]、(60,120]</code>，并分别对应到<code>青年</code>、<code>中年</code>和<code>老年</code>三个数据数值</p><p>基本装箱法(Binning Method)</p><ol><li>等宽(Equal-Width-Interval)装箱法</li><li>等频(Equal-Frequency-Interval)装箱法 <ol><li>Equal-Size-IntervalBinningMethod</li><li>HistogramEqualizationBinningMethod</li></ol></li></ol><p>若我们将前图的分布进行等宽(Egual-Width)的离散化处理，并将年龄等切成8个区间(每个区间的宽度为6.125)，则年龄在目标字段上的概率分布，如下图所示</p><figure><img src="'+u+'" alt="数据离散化的效果" tabindex="0" loading="lazy"><figcaption>数据离散化的效果</figcaption></figure><p>相较于前图，在训练及测试数据集上，年龄在目标字段上的概率分布变得较为一致</p><p>这两个概率分布的皮尔森相关系数，也由原来-0.103的负相关变为0.711的正相关，同时使得分类器的稳定性及准确度可望大幅提升</p><p>易于理解与解释的离散化结果:</p><p>一个易于理解与解释的离散化结果是，输入字段在目标字段上能够看出明显的趋势性(Trend)</p><p>下图是将信用卡额度使用率离散化后的一个结果</p><ol><li>X轴代表额度使用率，计算方式为客户每月的消费金额（包含前期未缴清的金额)除以信用卡的额度</li><li>Y轴则为客户变成坏客户的概率</li></ol><figure><img src="'+b+'" alt="数据离散化易于解释" tabindex="0" loading="lazy"><figcaption>数据离散化易于解释</figcaption></figure><p>以业界的业务经验来说，信用卡的额度使用率越高，则客户变坏的概率也相对变高. 然而，离散化的结果显示，信用卡的使用率越高，客户变坏的概率却是呈现高高低低的起伏现象，明显与业务经验不合. 从业务建模来说，即使加入此字段会使得分类模型的效果更好，企业也无法使用此字段，因与业务的经验不吻合.</p><p>一个比较好的离散化结果，如下图所示，信用卡的额度使用率与变坏的概率呈现单调递增(Monotonically Increasing)的现象，与业务的经验吻合</p><figure><img src="'+m+'" alt="数据离散化易于解释2" tabindex="0" loading="lazy"><figcaption>数据离散化易于解释2</figcaption></figure><p>一个可行的做法，就是先将数值型字段的值排序后，先用等宽/等频的方式将数值型字段切割成15~25个小区间，然后再根据其在目标字段上的分布情形，适当的加以合并</p><p>下图是客户贷款期间-以月为单位(X轴)与是否违约(目标字段)的概率关系(Y轴)</p><p>1代表准时还款的客户 2代表逾期不还的客户</p><p>从下图可以看出，逾期不还的客户比例，随贷款期间的拉长，有逐渐递增的现象，但有点混乱(高高低低)</p><figure><img src="'+y+'" alt="数据离散化易于解释的方法" tabindex="0" loading="lazy"><figcaption>数据离散化易于解释的方法</figcaption></figure><p>们将其切割成15个小区间后，结果如下图所示</p><figure><img src="'+x+'" alt="数据离散化易于解释的方法2" tabindex="0" loading="lazy"><figcaption>数据离散化易于解释的方法2</figcaption></figure><p>接下来我们合并的原则是，当违约的概率由大逐渐变小至最低点时，就是我们的新的切割点</p><p>因此，我们会将这15个区间再进一步合并成4个区间, 也就是<code>[4-21],[22-41],[42-61],[62-72]</code></p><p>但由于<code>[62-72]</code>这个区间只有一笔数据，因此最后两个区间又再度合并为一个区间<code>[42-72]</code>, 重新切割为3个区间后，<code>[4-21],[22-41],[42-72]</code></p><p>从图中可以看出，结果相当理想. 个区间的违约概率分别为24.32%,34.33%,53.09%，有明显的区隔，且为逐步递增，符合业务上的常识</p><figure><img src="'+z+'" alt="数据离散化易于解释的方法2" tabindex="0" loading="lazy"><figcaption>数据离散化易于解释的方法2</figcaption></figure>',74),N=[v];function D(I,M){return i(),a("div",null,N)}const E=t(B,[["render",D],["__file","2_1高级数据预处理.html.vue"]]);export{E as default};
