import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,e as n}from"./app-A10JnHE0.js";const i={},c=n(`<p>执行<code>git init</code>后, 自动创建<code>.git</code>文件夹, 包含一下内容:</p><div class="language-s line-numbers-mode" data-ext="s"><pre class="language-s"><code>config
description
HEAD
hooks/
info/
objects/
refs/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>config</code> 文件包含项目特有的配置选项 <code>description</code> 文件仅供 GitWeb 程序使用无需关心 *<code>HEAD</code>: 指向目前被检出的分支 <code>info</code> 目录包含一个全局性排除（global exclude）文件, 对应<code>.gitignore</code> *<code>objects</code>: 存放所有的数据内容 <code>hooks</code> 包含客户端或服务端的钩子脚本 *<code>refs</code> 存储指向数据的指针(分支, 标签等) *<code>index</code> 暂存区信息(尚未创建)</p><p>Git 是一个内容寻址文件系统, 键值对数据库（key-value data store）, 向 Git 仓库中插入任意类型的内容，它会返回一个唯一的键，通过该键可以在任意时刻再次取回该内容. 通过<code>git hash-object</code>命令将value保存在<code>.git/objects</code>目录中, 并返回唯一的<code>key</code></p><h2 id="存取字符串" tabindex="-1"><a class="header-anchor" href="#存取字符串" aria-hidden="true">#</a> 存取字符串</h2><ol><li>初始化仓库<code>git init test </code> 初始化仓库, 创建<code>.git/objects/info</code>和<code>.git/objects/pack</code>空文件夹</li><li>存放内容 将<code>test content</code>存放在仓库中, 执行<code>git hash-object</code>, 返回<code>key</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;test content&#39;</span> &quot; <span class="token function">git</span> hash-object <span class="token parameter variable">-w</span> <span class="token parameter variable">--stdin</span>
d670460b4b4aece5915caf5c68d12f560a9fe3e4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>git hash-object</code> 将内容存入数据库, 并返回唯一的key <code>-w</code>: write, 将&#39;test content&#39;写入文件中 <code>--stdin</code>: 标准输入读取内容 上述返回的结果key, 在object文件夹下, 前两位对应了目录名, 后面对应了文件名</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> .git/objects <span class="token parameter variable">-type</span> f
.git/objects/d6/70460b4b4aece5915caf5c68d12f560a9fe3e4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>取出内容 使用<code>cat-file</code>根据key取出内容, <code>-p</code>可以自动判断内容的类型</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4
test content
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="存取文件" tabindex="-1"><a class="header-anchor" href="#存取文件" aria-hidden="true">#</a> 存取文件</h2><ol><li>存入文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&#39;version 1&#39;</span> <span class="token operator">&gt;</span> test.txt
$ <span class="token function">git</span> hash-object <span class="token parameter variable">-w</span> test.txt
83baae61804e65cc73a7201a7252750c76066a30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>存入文件</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&#39;version 2&#39;</span> <span class="token operator">&gt;</span> test.txt
$ <span class="token function">git</span> hash-object <span class="token parameter variable">-w</span> test.txt
1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>查看所有key</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">find</span> .git/objects <span class="token parameter variable">-type</span> f
.git/objects/1f/7a7a472abf3dd9643fd615f6da379c4acb3e3a
.git/objects/83/baae61804e65cc73a7201a7252750c76066a30
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>取出第一个文件内容</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cat-file <span class="token parameter variable">-p</span> 83baae61804e65cc73a7201a7252750c76066a30 <span class="token operator">&gt;</span> test.txt
$ <span class="token function">cat</span> test.txt
version <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件名并没有被保存, 仅保存了文件的内容, 我们称之为 数据对象（blob object）,可以用<code>git cat-file -t</code>来查看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cat-file <span class="token parameter variable">-t</span> 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a
blob
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="树对象" tabindex="-1"><a class="header-anchor" href="#树对象" aria-hidden="true">#</a> 树对象</h2><p>对象（tree object），它能解决文件名保存的问题，也允许我们将多个文件组织到一起。</p><ol><li>添加文件到暂存区 Git 根据某一时刻暂存区（即 index 区域）所表示的状态创建并记录一个对应的树对象, 因此，为创建一个树对象，首先需要通过暂存一些文件来创建一个暂存区。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> update-index <span class="token parameter variable">--add</span> <span class="token parameter variable">--cacheinfo</span> <span class="token number">100644</span> 83baae61804e65cc73a7201a7252750c76066a30 test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>--add</code>: 将文件加入缓存区 <code>--cacheinfo</code>: 添加的文件在git数据库中(而不是在当前目录下) <code>100644</code>: 文件类型为普通文本(100755:可执行文件, 12000:符号链接)</p><ol start="2"><li>将暂存区写入树对象 <code>git write-tree</code> 命令将暂存区内容写入一个树对象</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> write-tree <span class="token comment"># 写入树对象</span>
d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ <span class="token function">git</span> cat-file <span class="token parameter variable">-p</span> d8329fc1cc938780ffdd9f94e0d364e0ea74f579 <span class="token comment"># 查看树对象, -p自动判断为树对象</span>
<span class="token number">100644</span> blob 83baae61804e65cc73a7201a7252750c76066a30     test.txt
$ <span class="token function">git</span> cat-file <span class="token parameter variable">-t</span> d8329fc1cc938780ffdd9f94e0d364e0ea74f579 <span class="token comment"># 查看类型</span>
tree
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建更多的树对象</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> update-index <span class="token parameter variable">--add</span> <span class="token parameter variable">--cacheinfo</span> <span class="token number">100644</span> 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a test.txt <span class="token comment"># test.txt version2版本加入暂存区</span>
$ <span class="token builtin class-name">echo</span> <span class="token string">&#39;new file&#39;</span> <span class="token operator">&gt;</span> new.txt <span class="token comment"># 创建新文件</span>
$ <span class="token function">git</span> update-index <span class="token parameter variable">--add</span> new.txt <span class="token comment"># 将新文件new.txt加入暂存区</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将当前暂存区记录为以个新树对象, 这个树对象包含了两个文件:1,新版本的test.txt 2,new.txt</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> write-tree
0155eb4229851634a0f03eb265b69f5a2d56f341
$ <span class="token function">git</span> cat-file <span class="token parameter variable">-p</span> 0155eb4229851634a0f03eb265b69f5a2d56f341
<span class="token number">100644</span> blob fa49b077972391ad58037050f2a75f74e3671e92     new.txt
<span class="token number">100644</span> blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a     test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以将第一个树对象加入到第二个树对象中: <code>git read-tree</code> 可以把书对象放入暂存区, <code>--prefix</code> 给树对象添加一个前缀</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> read-tree <span class="token parameter variable">--prefix</span><span class="token operator">=</span>bak d8329fc1cc938780ffdd9f94e0d364e0ea74f579
$ <span class="token function">git</span> write-tree
3c4e9cd789d88d8d89c1073707c3585e41b0e614
$ <span class="token function">git</span> cat-file <span class="token parameter variable">-p</span> 3c4e9cd789d88d8d89c1073707c3585e41b0e614
040000 tree d8329fc1cc938780ffdd9f94e0d364e0ea74f579     bak
<span class="token number">100644</span> blob fa49b077972391ad58037050f2a75f74e3671e92     new.txt
<span class="token number">100644</span> blob 1f7a7a472abf3dd9643fd615f6da379c4acb3e3a     test.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前工作目录, 类似于这样</p><h2 id="提交树对象" tabindex="-1"><a class="header-anchor" href="#提交树对象" aria-hidden="true">#</a> 提交树对象</h2><p>目前已经有了三个树对象:</p><p>调用 <code>commit-tree</code> 命令创建一个提交对象，为此需要指定一个树对象的 SHA-1 值，以及该提交的父提交对象（如果有的话）, 创建时间和作者数据不同，你现在会得到一个不同的散列值。 提交第一棵树</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&#39;first commit&#39;</span> &quot; <span class="token function">git</span> commit-tree d8329f
fdf4fc3344e67ab068f836878b6c4951e3b15f3d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看当前commit object</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> cat-file <span class="token parameter variable">-p</span> fdf4fc3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>第一行: 它先指定一个顶层树对象，代表当前项目快照</li><li>第二行: 可能存在的父提交</li><li>第三行: 作者信息</li><li>第四行: 提交者信息</li><li>第五行: 留空</li><li>第六行: 提交注释</li></ul><p>继续提交另外两棵树</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">echo</span> <span class="token string">&#39;second commit&#39;</span> <span class="token string">&quot; git commit-tree 0155eb -p fdf4fc3
cac0cab538b970a37ea1e769cbbde608743bc96d
$ echo &#39;third commit&#39; &quot;</span> <span class="token function">git</span> commit-tree 3c4e9c <span class="token parameter variable">-p</span> cac0cab
1a410efbd13591db07496601ebc7a059dd55cfe9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对最后一个commit SHA值, 使用<code>git log</code>, 既可以显示提交的历史. 以上的过程, 就是我们使用<code>git add</code>和<code>git commit</code>命令时, 所运行的底层的所做的:</p><ol><li>将被改写文件保存为数据对象</li><li>更新暂存区, 记录树对象</li><li>创建提交对象, 指明顶层树对象和父提交对象 这三个对象都会被保存在<code>.git/objects</code>目录下</li></ol><p>图像 如下:</p><p>https://git-scm.com/book/en/v2/images/data-model-3.png</p>`,49),d=[c];function t(l,o){return a(),s("div",null,d)}const b=e(i,[["render",t],["__file","对象.html.vue"]]);export{b as default};
