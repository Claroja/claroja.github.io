const e=JSON.parse('{"key":"v-78b4a745","path":"/%E5%89%8D%E7%AB%AF/vue/1%E5%9F%BA%E7%A1%80/3setup.html","title":"setup","lang":"zh-CN","frontmatter":{"description":"setup setup的设计是为了使用组合式api. 在vue2中data、computed、methods、watch 组织逻辑在大多数情况下都有效。然而，当我们的组件变得更大时，逻辑关注点的列表也会增长。这可能会导致组件难以阅读和理解. setup的在vue生命周期 setup位于created和beforeCreated只前, 用于代替created和beforeCreated setup函数里不能访问到this setup内可以通过以下hook操作整个生命周期: onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,onErrorCaptured,onRenderTracked,onRenderTriggered setup可接受props,context,其中props由于是响应式数据,不能直接解构赋值,context不是响应式数据,可以直接解构赋值;setup必须返回一个对象,一旦return,就可以像vue2.x的方式使用该属性 defineComponent是便于typescript推断类型的组件构造函数,可以传入","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E5%89%8D%E7%AB%AF/vue/1%E5%9F%BA%E7%A1%80/3setup.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"setup"}],["meta",{"property":"og:description","content":"setup setup的设计是为了使用组合式api. 在vue2中data、computed、methods、watch 组织逻辑在大多数情况下都有效。然而，当我们的组件变得更大时，逻辑关注点的列表也会增长。这可能会导致组件难以阅读和理解. setup的在vue生命周期 setup位于created和beforeCreated只前, 用于代替created和beforeCreated setup函数里不能访问到this setup内可以通过以下hook操作整个生命周期: onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,onErrorCaptured,onRenderTracked,onRenderTriggered setup可接受props,context,其中props由于是响应式数据,不能直接解构赋值,context不是响应式数据,可以直接解构赋值;setup必须返回一个对象,一旦return,就可以像vue2.x的方式使用该属性 defineComponent是便于typescript推断类型的组件构造函数,可以传入"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-30T12:42:23.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2023-11-30T12:42:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"setup\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-30T12:42:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"setup的在vue生命周期","slug":"setup的在vue生命周期","link":"#setup的在vue生命周期","children":[]},{"level":2,"title":"setup的参数:","slug":"setup的参数","link":"#setup的参数","children":[]}],"git":{"createdTime":1701348143000,"updatedTime":1701348143000,"contributors":[{"name":"claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.69,"words":508},"filePathRelative":"前端/vue/1基础/3setup.md","localizedDate":"2023年11月30日","excerpt":"<h1> setup</h1>\\n<p>setup的设计是为了使用组合式api. 在vue2中data、computed、methods、watch 组织逻辑在大多数情况下都有效。然而，当我们的组件变得更大时，逻辑关注点的列表也会增长。这可能会导致组件难以阅读和理解.</p>\\n<h2> setup的在vue生命周期</h2>\\n<ol>\\n<li>setup位于created和beforeCreated只前, 用于代替created和beforeCreated</li>\\n<li>setup函数里不能访问到this</li>\\n<li>setup内可以通过以下hook操作整个生命周期: <code>onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,onErrorCaptured,onRenderTracked,onRenderTriggered</code></li>\\n<li>setup可接受props,context,其中props由于是响应式数据,不能直接解构赋值,context不是响应式数据,可以直接解构赋值;setup必须返回一个对象,一旦return,就可以像vue2.x的方式使用该属性</li>\\n<li>defineComponent是便于typescript推断类型的组件构造函数,可以传入</li>\\n</ol>","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
