import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as l,o as n,c as i,a,b as s,d as r,w as m,e as o}from"./app-yeyEmHfz.js";const c="/assets/25-Gbu1H5y_.png",h="/assets/26-KV3wvKpB.png",p="/assets/27-ZC1BVXCr.png",u="/assets/28-9L3RcIqf.png",d="/assets/29-DiUyVQqE.png",g="/assets/30-4vvLWUND.png",w="/assets/31-SVMI9rdR.png",x="/assets/19-wF2DpOGn.png",y="/assets/20-XbhTNHLt.png",f="/assets/21-Nxmtmuqy.png",b="/assets/22-LZymP_ur.png",k="/assets/23-2aCwV8eN.png",_="/assets/24-lDd7kH3e.png",M={},S=a("h1",{id:"pruning",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#pruning","aria-hidden":"true"},"#"),s(" pruning")],-1),v=a("img",{src:c,alt:"",loading:"lazy"},null,-1),T=o('<p>However, what if these <code>red circle</code> were <code>testing data</code>. The <code>Residuals</code> for these Observations are much larger.These 4 observations from the <code>Training Data</code> with 100% <code>Drug Effectiveness</code> now look a little bit like outliers. And that means that maybe we overfit the <code>Regression Tree</code> to the <code>Training data</code>. <img src="'+h+'" alt="" loading="lazy"></p><p>One way to prevent <code>overfitting</code> a <code>Regression Tree</code> to the <code>Training Data</code> is to remove some of the leaves and replace the split with a leaf that is the average of a larger number of observations.Now all of the observations between 14.5 and 29 go to the leaf on the far right.</p><p>The large <code>Residuals</code> tell us that the new tree doesn&#39;t fit the training data as well as before but the new sub-tree does a much better job with the testing data.So that we will do a better job with the <code>testing data</code>.</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>NOTE: If we wanted to prune the tree more,like this: <img src="'+u+'" alt="" loading="lazy"><img src="'+d+'" alt="" loading="lazy"></p><p>How do we decide which tree to use? The answer is <code>Cost Complexity Pruning</code>. The first step in <code>Cost Complexity Pruning</code> is to calculate the <code>Sum of Squared Residuals</code> for each tree. <img src="'+g+'" alt="" loading="lazy"></p><p>NOTE: The <code>Sum of Squared Residuals</code> is relatively small for the original, full sized tree, but each time we remove a leaf, the <code>Sum of Squared Residuals</code> gets larger and larger.However,we knew that was going to happen because the whole idea was for the pruned trees to not fit the <code>training data</code> as well as the fill sized tree.</p><p>So how do we compare these trees?</p>',8),L=a("p",null,[s("Weakest Link Pruning works by calculating a "),a("code",null,"Tree Score"),s(" that is based on the "),a("code",null,"Sum of Squared Residuals(SSR)"),s(" for the tree or sub-tree and a "),a("code",null,"Tree complexity Penalty"),s(" that is a function of the number of leaves,or terminal nodes, in the tree or sub-tree. The "),a("code",null,"Tree complexity Penalty"),s(" compensates for the difference in the number of leaves. NOTE: "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α")]),a("annotation",{encoding:"application/x-tex"},"\\alpha")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),s(" is a tuning parameter that we finding using "),a("code",null,"Cross Validation"),s(" and we'll talk more about it in a bit. For now, let's let "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"10000")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 10000")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"10000")])])]),s(".")],-1),R=a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mi",null,"T"),a("mi",null,"r"),a("mi",null,"e"),a("mi",null,"e"),a("mi",null,"S"),a("mi",null,"c"),a("mi",null,"o"),a("mi",null,"r"),a("mi",null,"e"),a("mo",null,"="),a("mi",null,"S"),a("mi",null,"S"),a("mi",null,"R"),a("mo",null,"+"),a("mi",null,"α"),a("mo",null,"⋅"),a("mi",null,"T")]),a("annotation",{encoding:"application/x-tex"}," TreeScore = SSR + \\alpha \\cdot T ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),a("span",{class:"mord mathnormal"},"ree"),a("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"S"),a("span",{class:"mord mathnormal"},"core"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"SSR"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"+"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4445em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"⋅"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6833em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T")])])])])],-1),z=a("p",null,[s("Now let's calculate the "),a("code",null,"Tree Score"),s(" for each tree. "),a("img",{src:w,alt:"",loading:"lazy"})],-1),N=a("p",null,[s("First, use all of the data and build a full sized "),a("code",null,"Regression Tree"),s(". NOTE: This full sized tree is different than before because it was fit to all of the data, not just the training data. ALSO NOTE: This full sized tree has the lowest Tree Score when "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])]),s(". This is because when "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])]),s(", the "),a("code",null,"Tree Complexity Penalty"),s(" becomes 0 and the "),a("code",null,"Tree Score"),s(" is just the "),a("code",null,"Sum of the Squared Residuals"),s(" and, as we saw earlier, all of the sub-trees will have larger "),a("code",null,"Sum of Squared Residuals"),s(". So let's put "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])]),s(" here, to remind us that this tree has the lowest "),a("code",null,"Tree Score"),s(" when "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])]),s(". Now we increase "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α")]),a("annotation",{encoding:"application/x-tex"},"\\alpha")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),s(" until pruning leaves will give us a lower "),a("code",null,"Tree Score"),s(". "),a("img",{src:x,alt:"",loading:"lazy"}),s(" In this case, when "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"10000")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 10000")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"10000")])])]),s(", we'll get a lower "),a("code",null,"Tree Score"),s(" if we remove these leaves and use this sub-tree. "),a("img",{src:y,alt:"",loading:"lazy"}),s(" In this case, when "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"15000")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 15000")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"15000")])])]),s(", we'll get a lower "),a("code",null,"Tree Score"),s(" if we remove these leaves and use this sub-tree. "),a("img",{src:f,alt:"",loading:"lazy"}),s(" And when "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"22000")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 22000")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"22000")])])]),s(", we will get a lower "),a("code",null,"Tree Score"),s(" if we remove these leaves and use this sub-tree. "),a("img",{src:b,alt:"",loading:"lazy"}),s(" Now go back to the full dataset and divide it into training and testing datasets. And just using the training data use the "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α")]),a("annotation",{encoding:"application/x-tex"},"\\alpha")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),s(" values we found before to build a full tree and a sequence of sub-trees that minimize the "),a("code",null,"Tree Score"),s(". "),a("img",{src:k,alt:"",loading:"lazy"}),s(" Now calculate the "),a("code",null,"Sum of Squared Residuals"),s(" for each new tree using only the "),a("code",null,"Testing Data"),s(". "),a("img",{src:_,alt:"",loading:"lazy"}),s(" In this case, the tree with "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"10000")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 10000")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"10000")])])]),s(" had the smallest Sum of Squared Residuals for the Testing Data.")],-1),q=a("p",null,[s("Now we just keep repeating until we have done "),a("code",null,"10-Fold Cross Validation"),s(" and the value for "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α")]),a("annotation",{encoding:"application/x-tex"},"\\alpha")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),s(" that, on average, gave us the lowest sum of squared residual with the testing dta, is the final value for "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α")]),a("annotation",{encoding:"application/x-tex"},"\\alpha")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α")])])]),s(". In this case, the optimal trees built with "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"α"),a("mo",null,"="),a("mn",null,"10000")]),a("annotation",{encoding:"application/x-tex"},"\\alpha = 10000")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4306em"}}),a("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"10000")])])]),s(" had, on average, the lowest "),a("code",null,"Sum of Squared Residuals"),s(", so it is our final value.")],-1),C=a("p",null,"refs: https://www.youtube.com/watch?v=D0efHEJsfHo",-1);function V(D,E){const e=l("RouterLink");return n(),i("div",null,[S,a("p",null,[s("as in previous article "),r(e,{to:"/alg_tree_regression/"},{default:m(()=>[s("alg_tree_regression")]),_:1}),s(", we build a pretty tree reflecting the training data. "),v]),T,L,R,z,N,q,C])}const I=t(M,[["render",V],["__file","pruning.html.vue"]]);export{I as default};
