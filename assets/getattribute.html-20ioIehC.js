const t=JSON.parse('{"key":"v-076c4f72","path":"/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3python/7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%88%90%E5%91%98%E6%93%8D%E4%BD%9C/getattribute.html","title":"getattribute","lang":"zh-CN","frontmatter":{"description":"getattribute 当访问对象成员时, 触发, 无论成员是否存在. 作用: 在访问成员时, 对其做一些处理. __getattribute__(self,attr)中, 参数attr是属性的名称(注意, 不是属性对应的值) 下例中: 当访问name属性时，会自动调用__getattribute__方法，name属性也会被传入__getattribute__方法中，既上例中的attr参数。然后调用父类的return object.__getattribute__(self,attr)方法，经过一系列操作后，返回属性的值。 如果省去return object.__getattribute__(self,attr)则无法得到属性。因为父类的__getattribute__会最终调用__getattr__来返回相应的值。 通过类访问的类的属性不会通过__getattribute__方法","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/3python/7%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%88%90%E5%91%98%E6%93%8D%E4%BD%9C/getattribute.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"getattribute"}],["meta",{"property":"og:description","content":"getattribute 当访问对象成员时, 触发, 无论成员是否存在. 作用: 在访问成员时, 对其做一些处理. __getattribute__(self,attr)中, 参数attr是属性的名称(注意, 不是属性对应的值) 下例中: 当访问name属性时，会自动调用__getattribute__方法，name属性也会被传入__getattribute__方法中，既上例中的attr参数。然后调用父类的return object.__getattribute__(self,attr)方法，经过一系列操作后，返回属性的值。 如果省去return object.__getattribute__(self,attr)则无法得到属性。因为父类的__getattribute__会最终调用__getattr__来返回相应的值。 通过类访问的类的属性不会通过__getattribute__方法"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"getattribute\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.92,"words":275},"filePathRelative":"2编程语言/3python/7面向对象/成员操作/getattribute.md","localizedDate":"2025年2月21日","excerpt":"<h1> getattribute</h1>\\n<p>当访问对象成员时, 触发, 无论成员是否存在.\\n作用: 在访问成员时, 对其做一些处理.\\n<code>__getattribute__(self,attr)</code>中, 参数attr是属性的名称(注意, 不是属性对应的值)</p>\\n<p>下例中:\\n当访问<code>name</code>属性时，会自动调用<code>__getattribute__</code>方法，<code>name</code>属性也会被传入<code>__getattribute__</code>方法中，既上例中的<code>attr</code>参数。然后调用父类的<code>return object.__getattribute__(self,attr)</code>方法，经过一系列操作后，返回属性的值。\\n如果省去<code>return object.__getattribute__(self,attr)</code>则无法得到属性。因为父类的<code>__getattribute__</code>会最终调用<code>__getattr__</code>来返回相应的值。\\n通过类访问的类的属性不会通过<code>__getattribute__</code>方法</p>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
