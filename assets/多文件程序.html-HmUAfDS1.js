import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e}from"./app-jdLxCr9I.js";const t="/assets/1-651Pq90E.png",i={},c=e('<p>在一个单独的目录中编写一个大型程序,行程一个.h和.c文件集,每个.c文件含有一个或多个函数定义.按需要重新编译每个.c文件,这样可节省时间.</p><p>假设我们正在开发一个pgm的大程序,在每一个.c文件的头部都含有一条 <code>#include &quot;pgm.h&quot;</code> 当处理器遇到这条命令时,它首先在当前的目录中寻找文件pgm.h.如果存在这个文件,就引入它;如果不存在,预处理器就在与机器相关的目录中寻找它;如果找不到pgm.h,预处理器就会给出一个错误信息,停止编译.</p><p>头文件中,可以包含#include和#define,枚举类型声明,结构类型声明,函数原型列表.这样头文件包含了所需要的所有程序元素.由于头文件出现在每一个.c文件的头部,它是把程序结合在一起的胶水.</p><figure><img src="'+t+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h1 id="事例" tabindex="-1"><a class="header-anchor" href="#事例" aria-hidden="true">#</a> 事例</h1><p>主文件名和头文件要对应上.</p><p>gcc编译的时候把三者一块作为参数填进去就行了</p><p>主文件名:<code>test.c</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#include &lt;stdio.h&gt;
#include &quot;test.h&quot;
int main(){
	int a = 5, b = 10;
	int result = add(a, b); // 函数的调用

	printf(&quot;result = %d\\n&quot;, result);
	getchar();
	return 0;
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被调用文件名:<code>add_tool.c</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 函数的定义
#include &quot;test.h&quot;
int add(int x, int y){
	return x + y;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>头文件名:<code>test.h</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#pragma once
//头文件在编译时会将其内容(引入的系统库和自己的库)复制到主文件中
//1.函数与变量的声明
//2.系统库的调用(好像不行)
int add(int x, int y); // 函数的声明，分号不能省略
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h1><p>参考:https://www.cnblogs.com/chengjian-physique/p/9835924.html</p><ol><li>函数可以多个声明,只能一处定义</li><li>原则上要先声明函数,再实现函数(这样函数实现即使在调用之后也没关系),如果函数定义在调用之前(定义,就包含了声明)</li><li>.h文件声明函数后,编译器会在所有的.c文件里面寻找是否有.h文件里声明的函数,所以.h和.c可以不重名</li><li>引入.h文件本质就是复制了.h文件的内容,放在.c文件中</li></ol><p><code>test.h</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数的声明，分号不能省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>main</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;test.h&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数的调用</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %d\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mian.c#include &quot;test.h&quot;中的相当于</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接赋值过来</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数的调用</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;result = %d\\n&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>双引号和尖括号引用 <ol><li>双引号括起来的文件名,编译器会在本地查找文件,如果加上目录文件名,编译器就会在相对路径下寻找</li><li>尖括号括起来的文件名,编译器在标准库里找,在unix系统中,头文件一般放在<code>/usr/local/include</code>或<code>/usr/include</code>这些地方</li></ol></li></ol><p>参考:https://blog.csdn.net/weixin_40763897/article/details/87181359</p><ol start="6"><li>.h文件是头文件，内含函数声明、宏定义、结构体定义等内容</li><li>.c文件是程序文件，内含函数实现，变量定义等内容。</li><li><code>//a.h void foo(); //a.c #include &quot;a.h&quot;</code>库.c文件包含.h文件是否多余? xx.h 其实只是让需要写 xx.c 中函数声明的地方调用（可以少写几行字）,至于 include 这个 .h 文件是谁，是 .h 还是 .c，还是与这个 .h 同名的 .c，都没有任何必然关系。 虽然这样宏替换后出现了很多无用的声明,反正多些声明（.h一般只用来放声明，而放不定义）也无害处，又不会影响编译 这个例子中显然是多余的。但是如果.c中的函数也需要调用同个.c中的其它函数，那么这个.c往往会include同名的.h这样就不需要为声明和调用顺序而发愁了</li></ol><p>参考: https://www.cnblogs.com/chengjian-physique/p/9835924.html</p>`,26),p=[c];function l(o,d){return s(),a("div",null,p)}const k=n(i,[["render",l],["__file","多文件程序.html.vue"]]);export{k as default};
