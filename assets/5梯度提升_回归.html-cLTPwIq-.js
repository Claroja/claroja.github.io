import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as i,c as t,e as s,a}from"./app-jdLxCr9I.js";const l="/assets/1-VNCwDjjE.png",n="/assets/2-9DiWLqJX.png",o="/assets/3-vQJ0GNhr.gif",r="/assets/4-tVdLLTpJ.gif",c="/assets/5-X4bf8nmP.png",d="/assets/6-bYQsv06s.gif",p="/assets/7-FCidKtb5.png",h={},g=s('<h1 id="gradientboost" tabindex="-1"><a class="header-anchor" href="#gradientboost" aria-hidden="true">#</a> GradientBoost</h1><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ol><li>Gradient Boost最初会做一个单独的叶子节点，而不是tree或者stump，这个叶子节点随机猜测目标值，第一次预测是平均值</li><li>将每个样本实际值，减去预测值，得到每个样本的pseudo residual</li><li>然后我们建立一棵树分别预测每个样本的pseudo residual</li><li>现在预测值就是最初的平均值加上这棵树的预测值（我们给这棵树的预测值加上一个权重，就是学习速率）</li><li>如此循环下去</li></ol><h2 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h2><h2 id="数据集" tabindex="-1"><a class="header-anchor" href="#数据集" aria-hidden="true">#</a> 数据集</h2><ol><li><p>属性:</p><ol><li>Height(身高)</li><li>Favorite Color(颜色)</li><li>Gender(性别)</li></ol></li><li><p>目标:</p><p>Weight(体重)</p></li></ol><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p><code>Gradient Boost</code>直接创建叶子节点, 而不是树或者树桩, 来预测, 比如对于体重, 预测值为平均值. 然后再创建树, 和<code>AdaBoost</code>一样, 会考虑前面树的误差, 不同点是创建的树会比树桩更大, 当然会进行限制, 而不是无限大.</p><p>在梯度提升算法里，每一棵构建出来的树通常是可以比 AdaBoost 中那种简单的树桩更大、更复杂的。梯度提升构建的树由于其最大叶子数可设置在 8 到 32 之间等情况，所以能够包含更多的节点和层次，进而可以捕捉到更多的数据特征和模式，不过同样也会受到所设定的最大叶子数的限制，避免过度复杂而导致过拟合问题。</p><p>梯度提升（Gradient Boost）每一棵新树的构建目的都是为了对前面树在预测过程中出现的偏差进行修正，试图去弥补之前的不足，从而让整体的预测效果越来越好。</p><p>在构建好每一棵新树之后，梯度提升算法还会对这棵树进行缩放（scale）操作。这个缩放的过程其实是在调整树对于最终预测结果影响力的大小，类似于给每棵树分配一个合适的 “权重”，以此来控制它在整个集成模型中所起的作用。</p><p>梯度提升会按照这样的方式（基于前一棵树的误差构建树、对树进行缩放）持续不断地构建更多的树。不过，这个过程不会无休无止地进行下去，它会有相应的停止条件。其中一种停止条件是，当构建出的树达到了你预先设定的数量要求时，算法就会停止构建新树。另一种停止条件是，当新增加的树已经无法再对模型整体的拟合效果（也就是模型对数据的预测能力，使得预测结果与真实结果尽可能接近的程度）有所改善时，算法也会停止构建新树。</p><h2 id="流程-1" tabindex="-1"><a class="header-anchor" href="#流程-1" aria-hidden="true">#</a> 流程</h2><p>首先创建叶子节点, 预测体重, 取其均值为71.2.</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来, 根据第一棵树的误差来创建第二棵树. 创建新的一列, 数据是第一棵树的误差是观测值减去预测值, 我们称之为伪误差(Pseudo Residual).</p><p>✨伪误差的概念来源于线性回归的残差(Residual), 增加了<code>Pseudo</code>是为了提醒我们在做的是梯度提升而不是线性回归.</p>',17),m=a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("mn",null,"88"),a("mo",null,"−"),a("mn",null,"71.2"),a("mo",null,"="),a("mn",null,"16.8")]),a("annotation",{encoding:"application/x-tex"}," 88-71.2=16.8 ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"88"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"71.2"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"16.8")])])])])],-1),u=s('<figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>现在创建一棵树, 使用<code>Height</code>, <code>Favorite color</code>, <code>Gender</code>三个属性来预测残差.</p><p>✨注意在这个例子中, 我们使用4个叶子节点, 而在更大的数据集中, 可以使用8~32个叶子节点.</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>组合最初的叶子节点和新创建的树, 来预测训练集数据. 最初的叶子节点预测值是71.2, 第二棵树预测结果是16.8, 相加等于88. 和我们的观测值一样.</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>模型拟合训练集很好, 偏差很低, 但是方差可能会很高. 梯度提升使用学习率放缩新树的贡献来解决这个问题. 学习率的值在0~1之间. 本例中, 我们设置学习率为0.1. 所以预测体重为: 71.2 + (0.1 * 16.8) = 72.9</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>有了学习率后, 第二棵树的预测结果没有没有学习率的好, 但是也比最初的叶子节点好. 另外通过多次小步的预测, 在测试集上的偏差表现会好.所以我们继续创建第三棵树.</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意, 后面的树预测是前面所有树预测结果与观测值之间的残差. <img src="'+p+'" alt="" loading="lazy"></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ol><li>https://www.youtube.com/watch?v=3CC4N4z3GJc</li></ol>',13),f=[g,m,u];function _(b,x){return i(),t("div",null,f)}const k=e(h,[["render",_],["__file","5梯度提升_回归.html.vue"]]);export{k as default};
