const n=JSON.parse(`{"key":"v-726f4f4c","path":"/4%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1_2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/3_1_4%E7%89%B9%E5%BE%81%E7%BC%96%E7%A0%81_Binary.html","title":"二进制编码(BinaryEncoder)","lang":"zh-CN","frontmatter":{"description":"二进制编码(BinaryEncoder) 本质上是利用二进制对ID进行哈希映射，最终得到0/1特征向量，且维数少于独热编码，节省存储空间。 pandas category_encoders import category_encoders as ce import pandas as pd data = pd.DataFrame({ 'BloodType':['A','AB','O','B', None,], }) ce.BinaryEncoder(cols=['BloodType']).fit_transform(data) # BloodType_0 BloodType_1 BloodType_2 # 0 0 0 1 # 1 0 1 0 # 2 0 1 1 # 3 1 0 0 # 4 1 0 1","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1_2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/3_1_4%E7%89%B9%E5%BE%81%E7%BC%96%E7%A0%81_Binary.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"二进制编码(BinaryEncoder)"}],["meta",{"property":"og:description","content":"二进制编码(BinaryEncoder) 本质上是利用二进制对ID进行哈希映射，最终得到0/1特征向量，且维数少于独热编码，节省存储空间。 pandas category_encoders import category_encoders as ce import pandas as pd data = pd.DataFrame({ 'BloodType':['A','AB','O','B', None,], }) ce.BinaryEncoder(cols=['BloodType']).fit_transform(data) # BloodType_0 BloodType_1 BloodType_2 # 0 0 0 1 # 1 0 1 0 # 2 0 1 1 # 3 1 0 0 # 4 1 0 1"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二进制编码(BinaryEncoder)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"pandas","slug":"pandas","link":"#pandas","children":[]},{"level":2,"title":"category_encoders","slug":"category-encoders","link":"#category-encoders","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":0.36,"words":109},"filePathRelative":"4机器学习/1_2机器学习流程/3_1_4特征编码_Binary.md","localizedDate":"2025年2月21日","excerpt":"<h1> 二进制编码(BinaryEncoder)</h1>\\n<p>本质上是利用二进制对ID进行哈希映射，最终得到0/1特征向量，且维数少于独热编码，节省存储空间。</p>\\n<h2> pandas</h2>\\n<h2> <a href=\\"https://contrib.scikit-learn.org/category_encoders/index.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">category_encoders</a></h2>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code>\\n<span class=\\"token keyword\\">import</span> category_encoders <span class=\\"token keyword\\">as</span> ce\\n<span class=\\"token keyword\\">import</span> pandas <span class=\\"token keyword\\">as</span> pd\\ndata <span class=\\"token operator\\">=</span> pd<span class=\\"token punctuation\\">.</span>DataFrame<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token string\\">'BloodType'</span><span class=\\"token punctuation\\">:</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'A'</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'AB'</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'O'</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'B'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n\\nce<span class=\\"token punctuation\\">.</span>BinaryEncoder<span class=\\"token punctuation\\">(</span>cols<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'BloodType'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>fit_transform<span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token comment\\">#    BloodType_0  BloodType_1  BloodType_2</span>\\n<span class=\\"token comment\\"># 0            0            0            1</span>\\n<span class=\\"token comment\\"># 1            0            1            0</span>\\n<span class=\\"token comment\\"># 2            0            1            1</span>\\n<span class=\\"token comment\\"># 3            1            0            0</span>\\n<span class=\\"token comment\\"># 4            1            0            1</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{n as data};
