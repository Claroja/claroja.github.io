import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,a as s,b as n,d as t,e as l}from"./app-YE2Hltoy.js";const i={},r=s("h1",{id:"thread",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#thread","aria-hidden":"true"},"#"),n(" thread")],-1),u=s("p",null,"线程（英语：thread）是操作系统能够进行运算调度的最小单位。同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。但同一进程中的多个线程有各自的调用栈（call stack），自己的寄存器环境（register context），自己的线程本地存储（thread-local storage）",-1),d={href:"https://docs.python.org/3/glossary.html#term-global-interpreter-lock",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>并行: 多个线程在多个cpu上运行, 物理时间上同时运行 并发: 多个线程在同一个cpu上运行,通过快速切换任务,形成多个线程同时运行的现象.物理时间上先后执行.</p><p>同步: 多个任务之间执⾏的时候要求有先后顺序, 必须⼀个先执⾏完成之后, 另⼀个才能继续执⾏, 只有⼀个主线. 异步: 多个任务之间执⾏没有先后顺序, 可以同时运⾏, 执⾏的先后顺序不会有什么影响, 存在的多条运⾏主线.</p><p>python Threading模块主要包括:</p><ol><li><p>线程 threading类: 获得当前线程等操作 Thread对象: 多线程 timer对象: 可定时执行线程</p></li><li><p>锁 lock: 最基本的锁 rlock: 可重入锁 semaphore: 计数锁, 当小于规定阈值线程数量时, 可执行, 并获得锁 barrier: 计数锁, 当小于规定阈值线程数量时, 会阻塞, 知道大于阈值时, 才可执行 condition: 调用<code>wait()</code>来进入等待室, 调用<code>notify()</code>方法来唤醒, 好处是一个线程可以反复使用 event: 类似于condition</p></li></ol><p>互斥锁为(变量)映入:锁定/⾮锁定两种状态. 某个线程要更改共享数据时，给变量上锁，其他线程不能更改; 线程操作完毕离开, 给变量解锁. 互斥锁保证了每次只有⼀个线程进⾏写⼊操作，从⽽保证了多线程情况下数据的正确性.</p><ul><li><code>lock=threading.Lock()</code> # 获得锁</li><li><code>lock.acquire()</code> # 上锁</li><li><code>lock.release()</code> # 解锁</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
g_num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">work1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> g_num
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
        g_num <span class="token operator">+=</span> <span class="token number">1</span>
        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;work1:&quot;</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">work2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> g_num
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
        g_num <span class="token operator">-=</span> <span class="token number">1</span>
        lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;work2:&quot;</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    lock<span class="token operator">=</span>threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work1<span class="token punctuation">)</span>
    t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>work2<span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;main:&quot;</span><span class="token punctuation">,</span> g_num<span class="token punctuation">)</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当⼀个线程调⽤锁的acquire()⽅法获得锁时，变量就进⼊“locked”状态。 　　当变量进入&quot;locked&quot;状态, 来访问的该线程就会变为“blocked”状态，称为“阻塞”，直到拥有锁的线程调⽤锁的release()⽅法释放锁之后，锁进 ⼊“unlocked”状态。该线程获得变量, 上锁, 进入running状态.</p><ol start="3"><li>threadlocal 和线程绑定, 比在不同的方法中分别定义局部变量方便, 特别是设计到嵌套方法的时候, 同一个线程, 保存不同嵌套方法的变量.</li></ol><p>参考: https://docs.python.org/3/library/threading.html</p>`,10);function v(h,b){const a=o("ExternalLinkIcon");return p(),c("div",null,[r,u,s("p",null,[n("由于"),s("a",d,[n("Global Interpreter Lock"),t(a)]),n("的原因, 只有一个thread可以执行python的代码.如果想让python充分的利用computational resources of multi-core machines, 建议使用"),s("a",k,[n("multiprocessing"),t(a)]),n(". 然而threading对multiple I/O-bound 任务仍然有效, 比如读写文件, 网络请求等.")]),m])}const y=e(i,[["render",v],["__file","thread.html.vue"]]);export{y as default};
