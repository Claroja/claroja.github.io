import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as p,b as n,d as s,a as e}from"./app-nD1Z-e8V.js";const o={},c=n("h2",{id:"基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基础","aria-hidden":"true"},"#"),s(" 基础")],-1),l=n("ol",null,[n("li",null,[n("code",null,"int *p"),s("指向int类型空间大小的的指针,指针变量可以存储内存地址值，大小是固定的四个字节。")]),n("li",null,"声明指针的语法是： 类型 *指针变量名;"),n("li",null,"指针是一个特殊的变量，在内存中和普通变量一样都对应着一个内存的区域，而这个变量存储的信息才是地址。"),n("li",null,[s("计算机中最小的存储单元是1B(1字节),8bit(8位的2进制数据) 32位计算机，内存的存储量是"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"3")]),n("mn",null,"2"),n("mo",null,"="),n("mn",null,"4"),n("mi",null,"G"),n("mi",null,"B")]),n("annotation",{encoding:"application/x-tex"},"2^32=4GB")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"3")])])])])])])]),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord"},"4"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"GB")])])]),s(",所以8G的内存条的并不能充分的利用。")])],-1),i=e(`<div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//和p=0等价</span>
p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">1308</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="理解" tabindex="-1"><a class="header-anchor" href="#理解" aria-hidden="true">#</a> 理解</h2><ol><li>指针变量和普通变量没有差别,都是地址的别名</li><li>指针类型是地址数据类型,既指针变量名(地址)对应的位置存储的是一个地址</li><li>变量名 是地址的别名!变量名是地址的别名!变量名是地址的别名</li></ol><h2 id="指针初始化" tabindex="-1"><a class="header-anchor" href="#指针初始化" aria-hidden="true">#</a> 指针初始化</h2><ol><li>声明变量和指针</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>int a = 1000;
int *p; //开辟了内存空间,用来存放指针,但没有声明指针指向的内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i-blog.csdnimg.cn/blog_migrate/f99e30d59f6f1ff177a7ad2696930663.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>2.为指针赋值</p><ol><li><code>p</code>是指针对应的值,这里是地址值指针p的值就是整型变量a的地址p的直接值(dereference)是内存地址</li><li><code>*p</code>就是p地址值指向的值.,而*p是p的间接(indirection)值,即存储在p中指向内存中的值</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>p = &amp;a;//将p指针指向了a变量对应的地址,现在p能访问a的值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://i-blog.csdnimg.cn/blog_migrate/f120d48e6eb8e01a8a8eafe1fb4b0fb8.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><h2 id="两种指针语法区别" tabindex="-1"><a class="header-anchor" href="#两种指针语法区别" aria-hidden="true">#</a> 两种指针语法区别</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span> <span class="token comment">//更容易理解,既(int*)就是一种类型</span>
<span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment">//更标准,*后面所接的变量p是一个指针变量，指向数据类型为int型</span>

<span class="token keyword">int</span><span class="token operator">*</span> p1<span class="token punctuation">,</span>p2<span class="token punctuation">;</span> <span class="token comment">//按照第一种写法:p1是int型指针变量,p2是普通int型变量</span>
<span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span> <span class="token comment">//p1 p2 都是int型指针变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考:https://www.cnblogs.com/downey-blog/p/10469906.html</p><h1 id="指针类型" tabindex="-1"><a class="header-anchor" href="#指针类型" aria-hidden="true">#</a> 指针类型</h1><ol><li>指针变量的值是指指针本身所存储的数值，对应的是内存的地址</li><li>指针的类型决定从地址开始有多长，要对应地址所存储的数据</li><li>所以指针以变量的形式理解就是既有值又有类型，以内存的形式理解就是既有首地址，又有长度。</li><li>void指针没有长度</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token comment">//引用函数库</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">11.1</span><span class="token punctuation">;</span><span class="token comment">//这里变量a是double类型，用8个字节保存</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>m <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>#<span class="token keyword">int</span>类型是<span class="token number">4</span>位，只解析了a变量的前<span class="token number">4</span>个字节。
	<span class="token keyword">double</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>#<span class="token keyword">double</span>类型是<span class="token number">8</span>位，解析了a变量的<span class="token number">8</span>个字节。
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x_%f&quot;</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n%x_%f&quot;</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="void与null" tabindex="-1"><a class="header-anchor" href="#void与null" aria-hidden="true">#</a> void与null</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token comment">//引用函数库</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
<span class="token comment">//	printf(&quot;%d&quot;,*p2);//这里是不合法的，因为void指针只是一个地址，没有长度</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//强制转换成指针，就是在地址之后加了一个长度</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印指针所指向的内容</span>

	<span class="token keyword">int</span> <span class="token operator">*</span>p3 <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//这里是一个空指针</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x\\n&quot;</span><span class="token punctuation">,</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
	p3 <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span><span class="token comment">//给指针赋值</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%x\\n&quot;</span><span class="token punctuation">,</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token number">14f</span>af7cc
<span class="token number">10</span>
<span class="token number">0</span>
<span class="token number">14f</span>af7cc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h2><ol><li>指针与变量</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span># 打印变量值
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n%x&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span># 打印变量地址
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n%d&quot;</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span># 打印地址值

	<span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token comment">//指针是一种数 据类型int* ,用来存变量的地址,&quot;&amp;&quot;是取地址运算，&amp;a就是取a变量的地址</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//%p指针地址</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%X\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//%x十六进制，不打印0</span>

	<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment">//通过指针修改地址,*号和地址名称用来取地址的值,*号可以看做是运算符,既取地址对应的值</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指针类型大小,32位系统4字节,64位系统8字节</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>指针与int转换</li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token comment">//引用函数库</span></span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> <span class="token operator">*</span>m<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">652348</span><span class="token punctuation">;</span><span class="token comment">//通过(int *)把一个普通常量，转换为地址常量</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n%x&quot;</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token number">9f</span><span class="token number">43</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),u=[c,l,i];function r(d,k){return t(),p("div",null,u)}const b=a(o,[["render",r],["__file","1指针.html.vue"]]);export{b as default};
