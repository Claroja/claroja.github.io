const n=JSON.parse(`{"key":"v-79a9209a","path":"/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1_2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/4_4_1%E8%B6%85%E5%8F%82%E8%B0%83%E4%BC%98_%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html","title":"超参调优_交叉验证","lang":"zh-CN","frontmatter":{"description":"超参调优_交叉验证 参数 sklearn.model_selection.cross_validate( estimator, # 实现了fit方法的模型 X, # {array-like, sparse matrix} of shape (n_samples, n_features), 输入特征 y=None, # array-like of shape (n_samples,) or (n_samples, n_outputs), 输出标签 *, groups=None, scoring=None, # str, callable, list, tuple, or dict, 评估的方式 cv=None, # int, cross-validation generator or an iterable, 默认: 5折StratifiedKFold; int: 指定折数StratifiedKFold; generator: CV Spliter; iterable: ?. n_jobs=None, # int, 并行度 verbose=0, # int, params=None, # dict, pre_dispatch='2*n_jobs', # int or str, return_train_score=False, # bool, return_estimator=False, # bool, return_indices=False, # bool, error_score=nan # ‘raise’ or numeric )","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1_2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%B5%81%E7%A8%8B/4_4_1%E8%B6%85%E5%8F%82%E8%B0%83%E4%BC%98_%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"超参调优_交叉验证"}],["meta",{"property":"og:description","content":"超参调优_交叉验证 参数 sklearn.model_selection.cross_validate( estimator, # 实现了fit方法的模型 X, # {array-like, sparse matrix} of shape (n_samples, n_features), 输入特征 y=None, # array-like of shape (n_samples,) or (n_samples, n_outputs), 输出标签 *, groups=None, scoring=None, # str, callable, list, tuple, or dict, 评估的方式 cv=None, # int, cross-validation generator or an iterable, 默认: 5折StratifiedKFold; int: 指定折数StratifiedKFold; generator: CV Spliter; iterable: ?. n_jobs=None, # int, 并行度 verbose=0, # int, params=None, # dict, pre_dispatch='2*n_jobs', # int or str, return_train_score=False, # bool, return_estimator=False, # bool, return_indices=False, # bool, error_score=nan # ‘raise’ or numeric )"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-18T14:02:01.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-18T14:02:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"超参调优_交叉验证\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-18T14:02:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1739887321000,"updatedTime":1739887321000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.06,"words":319},"filePathRelative":"机器学习/1_2机器学习流程/4_4_1超参调优_交叉验证.md","localizedDate":"2025年2月18日","excerpt":"<h1> 超参调优_交叉验证</h1>\\n<p><a href=\\"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_validate.html#sklearn.model_selection.cross_validate\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"></a></p>\\n<p>参数</p>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code>sklearn<span class=\\"token punctuation\\">.</span>model_selection<span class=\\"token punctuation\\">.</span>cross_validate<span class=\\"token punctuation\\">(</span>\\n    estimator<span class=\\"token punctuation\\">,</span>                  <span class=\\"token comment\\"># 实现了fit方法的模型</span>\\n    X<span class=\\"token punctuation\\">,</span>                          <span class=\\"token comment\\"># {array-like, sparse matrix} of shape (n_samples, n_features), 输入特征</span>\\n    y<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                     <span class=\\"token comment\\"># array-like of shape (n_samples,) or (n_samples, n_outputs), 输出标签</span>\\n    <span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">,</span> \\n    groups<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span> \\n    scoring<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>               <span class=\\"token comment\\"># str, callable, list, tuple, or dict, 评估的方式</span>\\n    cv<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                    <span class=\\"token comment\\"># int, cross-validation generator or an iterable, 默认: 5折StratifiedKFold; int: 指定折数StratifiedKFold; generator: CV Spliter; iterable: ?.</span>\\n    n_jobs<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                <span class=\\"token comment\\"># int, 并行度</span>\\n    verbose<span class=\\"token operator\\">=</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>                  <span class=\\"token comment\\"># int, </span>\\n    params<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">,</span>                <span class=\\"token comment\\"># dict, </span>\\n    pre_dispatch<span class=\\"token operator\\">=</span><span class=\\"token string\\">'2*n_jobs'</span><span class=\\"token punctuation\\">,</span>    <span class=\\"token comment\\"># int or str, </span>\\n    return_train_score<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span>   <span class=\\"token comment\\"># bool, </span>\\n    return_estimator<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span>     <span class=\\"token comment\\"># bool,</span>\\n    return_indices<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">,</span>       <span class=\\"token comment\\"># bool, </span>\\n    error_score<span class=\\"token operator\\">=</span>nan             <span class=\\"token comment\\"># ‘raise’ or numeric</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{n as data};
