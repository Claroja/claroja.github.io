import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as s,b as n,d as e,e as t}from"./app-yeyEmHfz.js";const l={},u=t('<h1 id="离散-负二项分布" tabindex="-1"><a class="header-anchor" href="#离散-负二项分布" aria-hidden="true">#</a> 离散_负二项分布</h1><p>人脸检测是计算机视觉一个问题：如何在图片中定位人脸。 传统算法已经很好的解决了这个问题，比如Opencv中提供的Cascade Classifier算法与Dlib提供的HOG算法。在深度学习领域，最先进的算法是MTCNN(Multi-task Cascade Convolutional Neural Network)，Dlib也提供了深度学习的模型，不过速度很慢。</p><h2 id="opencv" tabindex="-1"><a class="header-anchor" href="#opencv" aria-hidden="true">#</a> opencv</h2><h3 id="传统方法" tabindex="-1"><a class="header-anchor" href="#传统方法" aria-hidden="true">#</a> 传统方法</h3>',4),r={href:"https://ieeexplore.ieee.org/document/990517",target:"_blank",rel:"noopener noreferrer"},d={href:"https://en.wikipedia.org/wiki/Cascading_classifiers",target:"_blank",rel:"noopener noreferrer"},k=t(`<p>安装opencv-python：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pip install opencv<span class="token operator">-</span>python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),v={href:"https://docs.opencv.org/3.4.3/d1/de5/classcv_1_1CascadeClassifier.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/opencv/opencv/tree/master/data/haarcascades",target:"_blank",rel:"noopener noreferrer"},b=t(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv
classifier <span class="token operator">=</span> cv<span class="token punctuation">.</span>CascadeClassifier<span class="token punctuation">(</span><span class="token string">&#39;haarcascade_frontalface_default.xml&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>检测输入图片中的人脸</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>pixels <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;weihai.png&#39;</span><span class="token punctuation">)</span>
bboxes <span class="token operator">=</span> classifier<span class="token punctuation">.</span>detectMultiScale<span class="token punctuation">(</span>pixels<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bboxes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>detectMultiScale</code>方法会返回一组人脸的盒型边界(bounding boxes), 每个盒子包含了人脸左下角的坐标(x,y), 以及人脸的宽度和高度(width,height). 我们可以使用opencv的<code>rectangle()</code>方法绘制出盒子边界. 参数<code>scaleFactor</code>该值越高能检测到的人脸越少, 默认为1.1 参数<code>minNeighbors</code>该值越搞能检测到的人脸越少, 默认为 3 一个调整的策略是先降低<code>scaleFactor</code>直到所有的人脸都被检测出来, 然后增加<code>minNeighbors</code>直到所有的FP(False Positive)人脸消失.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">drawBB</span><span class="token punctuation">(</span>bboxes<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> bbox <span class="token keyword">in</span> bboxes<span class="token punctuation">:</span>
        x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token operator">=</span> bbox
        x1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> x0 <span class="token operator">+</span> width<span class="token punctuation">,</span> y0 <span class="token operator">+</span> height
        cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> img
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>img <span class="token operator">=</span> drawBB<span class="token punctuation">(</span>bboxes<span class="token punctuation">,</span> pixels<span class="token punctuation">)</span>
<span class="token comment">## show the image</span>
cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;face detection&#39;</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>
<span class="token comment">## keep the window open until we press a key</span>
cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">## close the window</span>
cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深度学习方法" tabindex="-1"><a class="header-anchor" href="#深度学习方法" aria-hidden="true">#</a> 深度学习方法</h3>`,7),h={href:"https://arxiv.org/abs/1604.02878",target:"_blank",rel:"noopener noreferrer"},g=t('<ol><li>Proposal Network or P-Net: 建议候选的人脸区域</li><li>Refine Network or R-Net: 过滤边界盒子</li><li>Output Network or O-Net: 输出人脸标志(facial landmarks)</li></ol><p>当然在输入网络首先要进行图片的缩放(image pyramid). <a href="1.png">1.png</a></p><p>之所以叫做多任务网络(multi-task network), 是因为每个模型对应了不同的任务:</p><ol><li>P-Net -&gt; 人脸分类(face classification)</li><li>R-Net -&gt; 边界盒子退化(bounding box regression)</li><li>O-Net -&gt; 人脸标志定位(facial landmark localization)</li></ol>',4),f={href:"https://github.com/kpzhang93/MTCNN_face_detection_alignment",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/ipazc/mtcnn",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>MTCNN返回的一个字典,包含: &#39;box&#39;: 人脸左下角的坐标(x,y), 以及宽和高, 既(x,y,width,height) &#39;confidence&#39;: 置信度 &#39;keypoints&#39;: 人脸标志(landmark), 包含了:‘left_eye‘, ‘right_eye‘, ‘nose‘, ‘mouth_left‘, and ‘mouth_right‘</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv

<span class="token keyword">def</span> <span class="token function">drawBound</span><span class="token punctuation">(</span>bboxes<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> bbox <span class="token keyword">in</span> bboxes<span class="token punctuation">:</span>
        x0<span class="token punctuation">,</span> y0<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token operator">=</span> bbox
        x1<span class="token punctuation">,</span> y1 <span class="token operator">=</span> x0 <span class="token operator">+</span> width<span class="token punctuation">,</span> y0 <span class="token operator">+</span> height
        cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> img

<span class="token keyword">from</span> mtcnn<span class="token punctuation">.</span>mtcnn <span class="token keyword">import</span> MTCNN
pixels <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;weihai.png&#39;</span><span class="token punctuation">)</span>
detector <span class="token operator">=</span> MTCNN<span class="token punctuation">(</span><span class="token punctuation">)</span>

faces <span class="token operator">=</span> detector<span class="token punctuation">.</span>detect_faces<span class="token punctuation">(</span>pixels<span class="token punctuation">)</span>
bboxes <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token string">&quot;box&quot;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> faces<span class="token punctuation">]</span>
img <span class="token operator">=</span> drawBound<span class="token punctuation">(</span>bboxes<span class="token punctuation">,</span> pixels<span class="token punctuation">)</span>

cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;face detection&#39;</span><span class="token punctuation">,</span> pixels<span class="token punctuation">)</span>
cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dlib" tabindex="-1"><a class="header-anchor" href="#dlib" aria-hidden="true">#</a> Dlib</h2><h3 id="传统方法hog" tabindex="-1"><a class="header-anchor" href="#传统方法hog" aria-hidden="true">#</a> 传统方法HOG</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> dlib
<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv

image <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;weihai.png&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## Create a HOG face detector using the built-in dlib class</span>
face_detector <span class="token operator">=</span> dlib<span class="token punctuation">.</span>get_frontal_face_detector<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## The result will be the bounding boxes of the faces in our image.</span>
detected_faces <span class="token operator">=</span> face_detector<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> face_rect <span class="token keyword">in</span> detected_faces<span class="token punctuation">:</span>
    x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1 <span class="token operator">=</span>  face_rect<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> face_rect<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> face_rect<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> face_rect<span class="token punctuation">.</span>bottom<span class="token punctuation">(</span><span class="token punctuation">)</span>
    cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">## show the image</span>
cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;face detection&#39;</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>
<span class="token comment">## keep the window open until we press a key</span>
cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">## close the window</span>
cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深度学习方法-1" tabindex="-1"><a class="header-anchor" href="#深度学习方法-1" aria-hidden="true">#</a> 深度学习方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> dlib
<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv

img <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">&#39;weihai.png&#39;</span><span class="token punctuation">)</span>


<span class="token comment">## face_detector = dlib.get_frontal_face_detector()</span>
<span class="token comment">## detected_faces = face_detector(img, 1)</span>

<span class="token comment">## 参考http://dlib.net/cnn_face_detector.py.html</span>
cnn_face_detector <span class="token operator">=</span> dlib<span class="token punctuation">.</span>cnn_face_detection_model_v1<span class="token punctuation">(</span><span class="token string">&quot;mmod_human_face_detector.dat&quot;</span><span class="token punctuation">)</span>
detected_faces <span class="token operator">=</span> cnn_face_detector<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> face_rect <span class="token keyword">in</span> detected_faces<span class="token punctuation">:</span>
    face_rect <span class="token operator">=</span> face_rect<span class="token punctuation">.</span>rect
    x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y1 <span class="token operator">=</span> face_rect<span class="token punctuation">.</span>left<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> face_rect<span class="token punctuation">.</span>top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> face_rect<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> face_rect<span class="token punctuation">.</span>bottom<span class="token punctuation">(</span><span class="token punctuation">)</span>
    cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>x0<span class="token punctuation">,</span> y0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">## show the image</span>
cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&#39;face detection&#39;</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>
<span class="token comment">## keep the window open until we press a key</span>
cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">## close the window</span>
cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://machinelearningmastery.com/how-to-perform-face-detection-with-classical-and-deep-learning-methods-in-python-with-keras/ https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78</p><p>中英翻译对照： 人脸检测(face detection) 基于特征的(Feature-based) 边界盒子(bounding boxes) 级联结构(cascade structure) 人脸标志(facial landmarks) 多任务网络(multi-task network)</p>`,9);function w(x,N){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,s("p",null,[n("基于特征的（Feature-based）人脸检测算法是快速和有效的，在过去的几十年应用比较多。最成功的的算法就是"),s("a",r,[n("Rapid object detection using a boosted cascade of simple features"),e(a)]),n("，在Opencv的(python库)[https://pypi.org/project/opencv-python/]中实现了"),s("a",d,[n("Cascading classifiers"),e(a)]),n("。")]),k,s("p",null,[n("Opencv中的"),s("a",v,[n("CascadeClassifier class"),e(a)]),n("进行人脸检测。在进行人脸检测之前需要首先进行模型载入的初始化。模型可以到"),s("a",m,[n("OpenCV GitHub project"),e(a)]),n("下载。这里使用前脸(frontalaface)检测。")]),b,s("p",null,[n("目前最前沿的技术是"),s("a",h,[n("Joint Face Detection and Alignment Using Multitask Cascaded Convolutional Networks"),e(a)]),n(". 级联结构(cascade structure)神经网络包含三个部分:")]),g,s("p",null,[n("这三个模型不是直接相连, 而是前一个的输出, 作为后一个输入. 模型可以在"),s("a",f,[n("官方下载"),e(a)]),n(", 这里面就是论文里面用到的代码和模型. python中也有"),s("a",_,[n("实现"),e(a)])]),y])}const B=p(l,[["render",w],["__file","FaceDetection.html.vue"]]);export{B as default};
