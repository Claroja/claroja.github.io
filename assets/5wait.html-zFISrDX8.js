const t=JSON.parse('{"key":"v-bc03f30c","path":"/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c%E8%AF%AD%E8%A8%80/8%E8%BF%9B%E7%A8%8B/5wait.html","title":"基础","lang":"zh-CN","frontmatter":{"description":"基础 wait()父进程调用,返回子进程状态的变化(由运行到结束) 当父进程调用wait()将会阻塞,直到子进程状态发生变化 wait返回子子进程的pid,如果没有子进程,则返回-1 wait需要整型指针参数,记录子进程退出的状态 当status为NULL时只要有一个子进程退出,主进程就退出,如果参数status的值不是NULL，wait就会把子进程退出时的状态取出并存入其中，这是一个整数值(int),使用宏(macro)来判断 WIFEXITED(status)：这个宏用来指出子进程是否为正常退出的,正常返回非0 WEXITSTATUS(status)：当WIFEXITED返回非零值时，我们可以用这个宏来提取子进程的返回值，如果子进程调用exit(5)退出，WEXITSTATUS(status)就会返回5 #include &lt;sys/types.h&gt;,#include &lt;sys/wait.h&gt; 原型pid_t wait(int *status); 当进程终止时,操作系统会: 关闭所有文件描述符 释放分配的内存空间 但是内核的PCB仍存在,其中保存着(正常终止→退出值；异常终止→终止信号)","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/4%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c%E8%AF%AD%E8%A8%80/8%E8%BF%9B%E7%A8%8B/5wait.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"基础 wait()父进程调用,返回子进程状态的变化(由运行到结束) 当父进程调用wait()将会阻塞,直到子进程状态发生变化 wait返回子子进程的pid,如果没有子进程,则返回-1 wait需要整型指针参数,记录子进程退出的状态 当status为NULL时只要有一个子进程退出,主进程就退出,如果参数status的值不是NULL，wait就会把子进程退出时的状态取出并存入其中，这是一个整数值(int),使用宏(macro)来判断 WIFEXITED(status)：这个宏用来指出子进程是否为正常退出的,正常返回非0 WEXITSTATUS(status)：当WIFEXITED返回非零值时，我们可以用这个宏来提取子进程的返回值，如果子进程调用exit(5)退出，WEXITSTATUS(status)就会返回5 #include &lt;sys/types.h&gt;,#include &lt;sys/wait.h&gt; 原型pid_t wait(int *status); 当进程终止时,操作系统会: 关闭所有文件描述符 释放分配的内存空间 但是内核的PCB仍存在,其中保存着(正常终止→退出值；异常终止→终止信号)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":2.8,"words":839},"filePathRelative":"4编程语言/2c语言/8进程/5wait.md","localizedDate":"2025年2月24日","excerpt":"<h1> 基础</h1>\\n<ol>\\n<li><code>wait()</code>父进程调用,返回子进程状态的变化(由运行到结束)</li>\\n<li>当父进程调用<code>wait()</code>将会阻塞,直到子进程状态发生变化</li>\\n<li><code>wait</code>返回子子进程的pid,如果没有子进程,则返回-1</li>\\n<li><code>wait</code>需要整型指针参数,记录子进程退出的状态</li>\\n<li>当status为NULL时只要有一个子进程退出,主进程就退出,如果参数status的值不是NULL，wait就会把子进程退出时的状态取出并存入其中，这是一个整数值(int),使用宏(macro)来判断\\n<ol>\\n<li>WIFEXITED(status)：这个宏用来指出子进程是否为正常退出的,正常返回非0</li>\\n<li>WEXITSTATUS(status)：当WIFEXITED返回非零值时，我们可以用这个宏来提取子进程的返回值，如果子进程调用exit(5)退出，WEXITSTATUS(status)就会返回5</li>\\n</ol>\\n</li>\\n<li><code>#include &lt;sys/types.h&gt;</code>,<code>#include &lt;sys/wait.h&gt;</code> 原型<code>pid_t wait(int *status);</code></li>\\n<li>当进程终止时,操作系统会:\\n<ol>\\n<li>关闭所有文件描述符</li>\\n<li>释放分配的内存空间</li>\\n<li>但是内核的PCB仍存在,其中保存着(正常终止→退出值；异常终止→终止信号)</li>\\n</ol>\\n</li>\\n</ol>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
