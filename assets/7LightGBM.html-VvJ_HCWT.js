const t=JSON.parse('{"key":"v-534ab368","path":"/2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/3%E6%A0%91%E6%A8%A1%E5%9E%8B/7LightGBM/7LightGBM.html","title":"","lang":"zh-CN","frontmatter":{"description":"LightGBM是微软推出的boosting框架, 优点 速度更快 LightGBM 采用了直方图算法将遍历样本转变为遍历直方图，极大的降低了时间复杂度 LightGBM 在训练过程中采用单边梯度算法过滤掉梯度小的样本，减少了大量的计算 LightGBM 采用了基于 Leaf-wise 算法的增长策略构建树，减少了很多不必要的计算量 LightGBM 采用优化后的特征并行、数据并行方法加速计算，当数据量非常大的时候还可以采用投票并行的策略 LightGBM 对缓存也进行了优化，增加了缓存命中率 内存更小 XGBoost使用预排序后需要记录特征值及其对应样本的统计值的索引，而 LightGBM 使用了直方图算法将特征值转变为 bin 值，且不需要记录特征到样本的索引，将空间复杂度从 O(2*data) 降低为 O(bin) ，极大的减少了内存消耗 LightGBM 采用了直方图算法将存储特征值转变为存储 bin 值，降低了内存消耗 LightGBM 在训练过程中采用互斥特征捆绑算法减少了特征数量，降低了内存消耗","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/3%E6%A0%91%E6%A8%A1%E5%9E%8B/7LightGBM/7LightGBM.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:description","content":"LightGBM是微软推出的boosting框架, 优点 速度更快 LightGBM 采用了直方图算法将遍历样本转变为遍历直方图，极大的降低了时间复杂度 LightGBM 在训练过程中采用单边梯度算法过滤掉梯度小的样本，减少了大量的计算 LightGBM 采用了基于 Leaf-wise 算法的增长策略构建树，减少了很多不必要的计算量 LightGBM 采用优化后的特征并行、数据并行方法加速计算，当数据量非常大的时候还可以采用投票并行的策略 LightGBM 对缓存也进行了优化，增加了缓存命中率 内存更小 XGBoost使用预排序后需要记录特征值及其对应样本的统计值的索引，而 LightGBM 使用了直方图算法将特征值转变为 bin 值，且不需要记录特征到样本的索引，将空间复杂度从 O(2*data) 降低为 O(bin) ，极大的减少了内存消耗 LightGBM 采用了直方图算法将存储特征值转变为存储 bin 值，降低了内存消耗 LightGBM 在训练过程中采用互斥特征捆绑算法减少了特征数量，降低了内存消耗"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":2,"title":"LightGBM调参","slug":"lightgbm调参","link":"#lightgbm调参","children":[{"level":3,"title":"控制参数","slug":"控制参数","link":"#控制参数","children":[]},{"level":3,"title":"核心参数","slug":"核心参数","link":"#核心参数","children":[]},{"level":3,"title":"IO参数","slug":"io参数","link":"#io参数","children":[]},{"level":3,"title":"调参","slug":"调参","link":"#调参","children":[]}]},{"level":2,"title":"应用","slug":"应用","link":"#应用","children":[{"level":3,"title":"基于LightGBM原生接口的分类","slug":"基于lightgbm原生接口的分类","link":"#基于lightgbm原生接口的分类","children":[]},{"level":3,"title":"基于Scikit-learn接口的分类","slug":"基于scikit-learn接口的分类","link":"#基于scikit-learn接口的分类","children":[]},{"level":3,"title":"基于LightGBM原生接口的回归","slug":"基于lightgbm原生接口的回归","link":"#基于lightgbm原生接口的回归","children":[]},{"level":3,"title":"基于Scikit-learn接口的回归","slug":"基于scikit-learn接口的回归","link":"#基于scikit-learn接口的回归","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":7.2,"words":2159},"filePathRelative":"2机器学习/1算法原理/3树模型/7LightGBM/7LightGBM.md","localizedDate":"2025年2月24日","excerpt":"<p>LightGBM是微软推出的boosting框架,</p>\\n<h2> 优点</h2>\\n<ol>\\n<li>速度更快\\n<ol>\\n<li>LightGBM 采用了直方图算法将遍历样本转变为遍历直方图，极大的降低了时间复杂度</li>\\n<li>LightGBM 在训练过程中采用单边梯度算法过滤掉梯度小的样本，减少了大量的计算</li>\\n<li>LightGBM 采用了基于 Leaf-wise 算法的增长策略构建树，减少了很多不必要的计算量</li>\\n<li>LightGBM 采用优化后的特征并行、数据并行方法加速计算，当数据量非常大的时候还可以采用投票并行的策略</li>\\n<li>LightGBM 对缓存也进行了优化，增加了缓存命中率</li>\\n</ol>\\n</li>\\n<li>内存更小\\n<ol>\\n<li>XGBoost使用预排序后需要记录特征值及其对应样本的统计值的索引，而 LightGBM 使用了直方图算法将特征值转变为 bin 值，且不需要记录特征到样本的索引，将空间复杂度从 O(2*data) 降低为 O(bin) ，极大的减少了内存消耗</li>\\n<li>LightGBM 采用了直方图算法将存储特征值转变为存储 bin 值，降低了内存消耗</li>\\n<li>LightGBM 在训练过程中采用互斥特征捆绑算法减少了特征数量，降低了内存消耗</li>\\n</ol>\\n</li>\\n</ol>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
