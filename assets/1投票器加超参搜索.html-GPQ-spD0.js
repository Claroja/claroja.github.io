const n=JSON.parse(`{"key":"v-60e73dcf","path":"/1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/12%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/1%E6%8A%95%E7%A5%A8%E5%99%A8%E5%8A%A0%E8%B6%85%E5%8F%82%E6%90%9C%E7%B4%A2.html","title":"投票器加超参搜索","lang":"zh-CN","frontmatter":{"description":"投票器加超参搜索 最佳实践 先分别训练每个模型, 搜寻最优超参数 多个模型进行投票 #Common Model Algorithms from sklearn import svm, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process from xgboost import XGBClassifier import time from sklearn import model_selection from sklearn import datasets data = datasets.load_iris() vote_est = [ ('ada', ensemble.AdaBoostClassifier()), ('bc', ensemble.BaggingClassifier()), ('etc',ensemble.ExtraTreesClassifier()), ('gbc', ensemble.GradientBoostingClassifier()), ('rfc', ensemble.RandomForestClassifier()), ('gpc', gaussian_process.GaussianProcessClassifier()), ('lr', linear_model.LogisticRegressionCV()), ('bnb', naive_bayes.BernoulliNB()), ('gnb', naive_bayes.GaussianNB()), ('knn', neighbors.KNeighborsClassifier()), ('svc', svm.SVC(probability=True)), ('xgb', XGBClassifier()) ] grid_n_estimator = [10, 50, 100, 300] grid_ratio = [.1, .25, .5, .75, 1.0] grid_learn = [.01, .03, .05, .1, .25] grid_max_depth = [2, 4, 6, 8, 10, None] grid_min_samples = [5, 10, .03, .05, .10] grid_criterion = ['gini', 'entropy'] grid_bool = [True, False] grid_seed = [0] grid_param = [ { #AdaBoostClassifier 'n_estimators': grid_n_estimator, #default=50 'learning_rate': grid_learn, #default=1 'random_state': grid_seed }, { #BaggingClassifier 'n_estimators': grid_n_estimator, #default=10 'max_samples': grid_ratio, #default=1.0 'random_state': grid_seed }, {#ExtraTreesClassifier 'n_estimators': grid_n_estimator, #default=10 'criterion': grid_criterion, #default=”gini” 'max_depth': grid_max_depth, #default=None 'random_state': grid_seed }, {#GradientBoostingClassifier 'learning_rate': [.05], 'n_estimators': [300], 'max_depth': grid_max_depth, 'random_state': grid_seed }, {#RandomForestClassifier 'n_estimators': grid_n_estimator, #default=10 'criterion': grid_criterion, #default=”gini” 'max_depth': grid_max_depth, #default=None 'random_state': grid_seed }, { #GaussianProcessClassifier 'max_iter_predict': grid_n_estimator, #default: 100 'random_state': grid_seed }, {#LogisticRegressionCV 'fit_intercept': grid_bool, #default: True 'penalty': ['l1','l2'], 'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], #default: lbfgs 'random_state': grid_seed }, {#BernoulliNB 'alpha': grid_ratio, #default: 1.0 }, {#GaussianNB - }, {#KNeighborsClassifier 'n_neighbors': [1,2,3,4,5,6,7], #default: 5 'weights': ['uniform', 'distance'], #default = ‘uniform’ 'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'] }, {#SVC 'kernel': ['linear', 'poly', 'rbf', 'sigmoid'], 'C': [1,2,3,4,5], #default=1.0 'gamma': grid_ratio, #edfault: auto 'decision_function_shape': ['ovo', 'ovr'], #default:ovr 'probability': [True], 'random_state': grid_seed }, {#XGBClassifier 'learning_rate': grid_learn, #default: .3 'max_depth': [1,2,4,6,8,10], #default 2 'n_estimators': grid_n_estimator, 'seed': grid_seed } ] start_total = time.perf_counter() for clf, param in zip (vote_est, grid_param): start = time.perf_counter() best_search = model_selection.GridSearchCV(estimator = clf[1], param_grid = param, scoring = 'accuracy') best_search.fit(data['data'], data['target']) run = time.perf_counter() - start best_param = best_search.best_params_ clf[1].set_params(**best_param) run_total = time.perf_counter() - start_total #Hard Vote or majority rules w/Tuned Hyperparameters grid_hard = ensemble.VotingClassifier(estimators = vote_est , voting = 'hard') grid_hard_cv = model_selection.cross_validate(grid_hard, data['data'], data['target']) grid_hard.fit(data['data'], data['target']) #Soft Vote or weighted probabilities w/Tuned Hyperparameters grid_soft = ensemble.VotingClassifier(estimators = vote_est , voting = 'soft') grid_soft_cv = model_selection.cross_validate(grid_soft, data['data'], data['target']) grid_soft.fit(data['data'], data['target'])","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/12%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0/1%E6%8A%95%E7%A5%A8%E5%99%A8%E5%8A%A0%E8%B6%85%E5%8F%82%E6%90%9C%E7%B4%A2.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"投票器加超参搜索"}],["meta",{"property":"og:description","content":"投票器加超参搜索 最佳实践 先分别训练每个模型, 搜寻最优超参数 多个模型进行投票 #Common Model Algorithms from sklearn import svm, linear_model, neighbors, naive_bayes, ensemble, discriminant_analysis, gaussian_process from xgboost import XGBClassifier import time from sklearn import model_selection from sklearn import datasets data = datasets.load_iris() vote_est = [ ('ada', ensemble.AdaBoostClassifier()), ('bc', ensemble.BaggingClassifier()), ('etc',ensemble.ExtraTreesClassifier()), ('gbc', ensemble.GradientBoostingClassifier()), ('rfc', ensemble.RandomForestClassifier()), ('gpc', gaussian_process.GaussianProcessClassifier()), ('lr', linear_model.LogisticRegressionCV()), ('bnb', naive_bayes.BernoulliNB()), ('gnb', naive_bayes.GaussianNB()), ('knn', neighbors.KNeighborsClassifier()), ('svc', svm.SVC(probability=True)), ('xgb', XGBClassifier()) ] grid_n_estimator = [10, 50, 100, 300] grid_ratio = [.1, .25, .5, .75, 1.0] grid_learn = [.01, .03, .05, .1, .25] grid_max_depth = [2, 4, 6, 8, 10, None] grid_min_samples = [5, 10, .03, .05, .10] grid_criterion = ['gini', 'entropy'] grid_bool = [True, False] grid_seed = [0] grid_param = [ { #AdaBoostClassifier 'n_estimators': grid_n_estimator, #default=50 'learning_rate': grid_learn, #default=1 'random_state': grid_seed }, { #BaggingClassifier 'n_estimators': grid_n_estimator, #default=10 'max_samples': grid_ratio, #default=1.0 'random_state': grid_seed }, {#ExtraTreesClassifier 'n_estimators': grid_n_estimator, #default=10 'criterion': grid_criterion, #default=”gini” 'max_depth': grid_max_depth, #default=None 'random_state': grid_seed }, {#GradientBoostingClassifier 'learning_rate': [.05], 'n_estimators': [300], 'max_depth': grid_max_depth, 'random_state': grid_seed }, {#RandomForestClassifier 'n_estimators': grid_n_estimator, #default=10 'criterion': grid_criterion, #default=”gini” 'max_depth': grid_max_depth, #default=None 'random_state': grid_seed }, { #GaussianProcessClassifier 'max_iter_predict': grid_n_estimator, #default: 100 'random_state': grid_seed }, {#LogisticRegressionCV 'fit_intercept': grid_bool, #default: True 'penalty': ['l1','l2'], 'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'], #default: lbfgs 'random_state': grid_seed }, {#BernoulliNB 'alpha': grid_ratio, #default: 1.0 }, {#GaussianNB - }, {#KNeighborsClassifier 'n_neighbors': [1,2,3,4,5,6,7], #default: 5 'weights': ['uniform', 'distance'], #default = ‘uniform’ 'algorithm': ['auto', 'ball_tree', 'kd_tree', 'brute'] }, {#SVC 'kernel': ['linear', 'poly', 'rbf', 'sigmoid'], 'C': [1,2,3,4,5], #default=1.0 'gamma': grid_ratio, #edfault: auto 'decision_function_shape': ['ovo', 'ovr'], #default:ovr 'probability': [True], 'random_state': grid_seed }, {#XGBClassifier 'learning_rate': grid_learn, #default: .3 'max_depth': [1,2,4,6,8,10], #default 2 'n_estimators': grid_n_estimator, 'seed': grid_seed } ] start_total = time.perf_counter() for clf, param in zip (vote_est, grid_param): start = time.perf_counter() best_search = model_selection.GridSearchCV(estimator = clf[1], param_grid = param, scoring = 'accuracy') best_search.fit(data['data'], data['target']) run = time.perf_counter() - start best_param = best_search.best_params_ clf[1].set_params(**best_param) run_total = time.perf_counter() - start_total #Hard Vote or majority rules w/Tuned Hyperparameters grid_hard = ensemble.VotingClassifier(estimators = vote_est , voting = 'hard') grid_hard_cv = model_selection.cross_validate(grid_hard, data['data'], data['target']) grid_hard.fit(data['data'], data['target']) #Soft Vote or weighted probabilities w/Tuned Hyperparameters grid_soft = ensemble.VotingClassifier(estimators = vote_est , voting = 'soft') grid_soft_cv = model_selection.cross_validate(grid_soft, data['data'], data['target']) grid_soft.fit(data['data'], data['target'])"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-25T10:13:52.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-25T10:13:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"投票器加超参搜索\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-25T10:13:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"最佳实践","slug":"最佳实践","link":"#最佳实践","children":[]}],"git":{"createdTime":1740478432000,"updatedTime":1740478432000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.27,"words":380},"filePathRelative":"1机器学习/1算法原理/12集成学习/1投票器加超参搜索.md","localizedDate":"2025年2月25日","excerpt":"<h1> 投票器加超参搜索</h1>\\n<h2> 最佳实践</h2>\\n<ol>\\n<li>先分别训练每个模型, 搜寻最优超参数</li>\\n<li>多个模型进行投票</li>\\n</ol>\\n<div class=\\"language-python line-numbers-mode\\" data-ext=\\"py\\"><pre class=\\"language-python\\"><code><span class=\\"token comment\\">#Common Model Algorithms</span>\\n<span class=\\"token keyword\\">from</span> sklearn <span class=\\"token keyword\\">import</span> svm<span class=\\"token punctuation\\">,</span> linear_model<span class=\\"token punctuation\\">,</span> neighbors<span class=\\"token punctuation\\">,</span> naive_bayes<span class=\\"token punctuation\\">,</span> ensemble<span class=\\"token punctuation\\">,</span> discriminant_analysis<span class=\\"token punctuation\\">,</span> gaussian_process\\n<span class=\\"token keyword\\">from</span> xgboost <span class=\\"token keyword\\">import</span> XGBClassifier\\n<span class=\\"token keyword\\">import</span> time\\n<span class=\\"token keyword\\">from</span> sklearn <span class=\\"token keyword\\">import</span> model_selection\\n<span class=\\"token keyword\\">from</span> sklearn <span class=\\"token keyword\\">import</span> datasets\\n\\ndata <span class=\\"token operator\\">=</span> datasets<span class=\\"token punctuation\\">.</span>load_iris<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\nvote_est <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'ada'</span><span class=\\"token punctuation\\">,</span> ensemble<span class=\\"token punctuation\\">.</span>AdaBoostClassifier<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'bc'</span><span class=\\"token punctuation\\">,</span> ensemble<span class=\\"token punctuation\\">.</span>BaggingClassifier<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'etc'</span><span class=\\"token punctuation\\">,</span>ensemble<span class=\\"token punctuation\\">.</span>ExtraTreesClassifier<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gbc'</span><span class=\\"token punctuation\\">,</span> ensemble<span class=\\"token punctuation\\">.</span>GradientBoostingClassifier<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'rfc'</span><span class=\\"token punctuation\\">,</span> ensemble<span class=\\"token punctuation\\">.</span>RandomForestClassifier<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gpc'</span><span class=\\"token punctuation\\">,</span> gaussian_process<span class=\\"token punctuation\\">.</span>GaussianProcessClassifier<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'lr'</span><span class=\\"token punctuation\\">,</span> linear_model<span class=\\"token punctuation\\">.</span>LogisticRegressionCV<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'bnb'</span><span class=\\"token punctuation\\">,</span> naive_bayes<span class=\\"token punctuation\\">.</span>BernoulliNB<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'gnb'</span><span class=\\"token punctuation\\">,</span> naive_bayes<span class=\\"token punctuation\\">.</span>GaussianNB<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'knn'</span><span class=\\"token punctuation\\">,</span> neighbors<span class=\\"token punctuation\\">.</span>KNeighborsClassifier<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'svc'</span><span class=\\"token punctuation\\">,</span> svm<span class=\\"token punctuation\\">.</span>SVC<span class=\\"token punctuation\\">(</span>probability<span class=\\"token operator\\">=</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'xgb'</span><span class=\\"token punctuation\\">,</span> XGBClassifier<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">]</span>\\n\\ngrid_n_estimator <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">50</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">300</span><span class=\\"token punctuation\\">]</span>\\ngrid_ratio <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">.1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.25</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.75</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1.0</span><span class=\\"token punctuation\\">]</span>\\ngrid_learn <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">.01</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.03</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.05</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.25</span><span class=\\"token punctuation\\">]</span>\\ngrid_max_depth <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">None</span><span class=\\"token punctuation\\">]</span>\\ngrid_min_samples <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.03</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.05</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">.10</span><span class=\\"token punctuation\\">]</span>\\ngrid_criterion <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'gini'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'entropy'</span><span class=\\"token punctuation\\">]</span>\\ngrid_bool <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">False</span><span class=\\"token punctuation\\">]</span>\\ngrid_seed <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">]</span>\\n\\n\\ngrid_param <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span>\\n            <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">#AdaBoostClassifier</span>\\n            <span class=\\"token string\\">'n_estimators'</span><span class=\\"token punctuation\\">:</span> grid_n_estimator<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=50</span>\\n            <span class=\\"token string\\">'learning_rate'</span><span class=\\"token punctuation\\">:</span> grid_learn<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=1</span>\\n            <span class=\\"token string\\">'random_state'</span><span class=\\"token punctuation\\">:</span> grid_seed\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            \\n            <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">#BaggingClassifier</span>\\n            <span class=\\"token string\\">'n_estimators'</span><span class=\\"token punctuation\\">:</span> grid_n_estimator<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=10</span>\\n            <span class=\\"token string\\">'max_samples'</span><span class=\\"token punctuation\\">:</span> grid_ratio<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=1.0</span>\\n            <span class=\\"token string\\">'random_state'</span><span class=\\"token punctuation\\">:</span> grid_seed\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n            <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">#ExtraTreesClassifier</span>\\n            <span class=\\"token string\\">'n_estimators'</span><span class=\\"token punctuation\\">:</span> grid_n_estimator<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=10</span>\\n            <span class=\\"token string\\">'criterion'</span><span class=\\"token punctuation\\">:</span> grid_criterion<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=”gini”</span>\\n            <span class=\\"token string\\">'max_depth'</span><span class=\\"token punctuation\\">:</span> grid_max_depth<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=None</span>\\n            <span class=\\"token string\\">'random_state'</span><span class=\\"token punctuation\\">:</span> grid_seed\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n            <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">#GradientBoostingClassifier</span>\\n            <span class=\\"token string\\">'learning_rate'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">.05</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> \\n            <span class=\\"token string\\">'n_estimators'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">300</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> \\n            <span class=\\"token string\\">'max_depth'</span><span class=\\"token punctuation\\">:</span> grid_max_depth<span class=\\"token punctuation\\">,</span> \\n            <span class=\\"token string\\">'random_state'</span><span class=\\"token punctuation\\">:</span> grid_seed\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n    \\n            <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">#RandomForestClassifier</span>\\n            <span class=\\"token string\\">'n_estimators'</span><span class=\\"token punctuation\\">:</span> grid_n_estimator<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=10</span>\\n            <span class=\\"token string\\">'criterion'</span><span class=\\"token punctuation\\">:</span> grid_criterion<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=”gini”</span>\\n            <span class=\\"token string\\">'max_depth'</span><span class=\\"token punctuation\\">:</span> grid_max_depth<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=None</span>\\n            <span class=\\"token string\\">'random_state'</span><span class=\\"token punctuation\\">:</span> grid_seed\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n    \\n            <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">#GaussianProcessClassifier</span>\\n            <span class=\\"token string\\">'max_iter_predict'</span><span class=\\"token punctuation\\">:</span> grid_n_estimator<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default: 100</span>\\n            <span class=\\"token string\\">'random_state'</span><span class=\\"token punctuation\\">:</span> grid_seed\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            \\n            <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">#LogisticRegressionCV</span>\\n            <span class=\\"token string\\">'fit_intercept'</span><span class=\\"token punctuation\\">:</span> grid_bool<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default: True</span>\\n            <span class=\\"token string\\">'penalty'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'l1'</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">'l2'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token string\\">'solver'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'newton-cg'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'lbfgs'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'liblinear'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'sag'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'saga'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default: lbfgs</span>\\n            <span class=\\"token string\\">'random_state'</span><span class=\\"token punctuation\\">:</span> grid_seed\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            \\n    \\n            <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">#BernoulliNB</span>\\n            <span class=\\"token string\\">'alpha'</span><span class=\\"token punctuation\\">:</span> grid_ratio<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default: 1.0</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n            <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">#GaussianNB - </span>\\n                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n            <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">#KNeighborsClassifier</span>\\n            <span class=\\"token string\\">'n_neighbors'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">7</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default: 5</span>\\n            <span class=\\"token string\\">'weights'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'uniform'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'distance'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default = ‘uniform’</span>\\n            <span class=\\"token string\\">'algorithm'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'auto'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'ball_tree'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'kd_tree'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'brute'</span><span class=\\"token punctuation\\">]</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n            \\n\\n            <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">#SVC</span>\\n            <span class=\\"token string\\">'kernel'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'linear'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'poly'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'rbf'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'sigmoid'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token string\\">'C'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">5</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default=1.0</span>\\n            <span class=\\"token string\\">'gamma'</span><span class=\\"token punctuation\\">:</span> grid_ratio<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#edfault: auto</span>\\n            <span class=\\"token string\\">'decision_function_shape'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'ovo'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'ovr'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default:ovr</span>\\n            <span class=\\"token string\\">'probability'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token boolean\\">True</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span>\\n            <span class=\\"token string\\">'random_state'</span><span class=\\"token punctuation\\">:</span> grid_seed\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n\\n            <span class=\\"token punctuation\\">{</span><span class=\\"token comment\\">#XGBClassifier</span>\\n            <span class=\\"token string\\">'learning_rate'</span><span class=\\"token punctuation\\">:</span> grid_learn<span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default: .3</span>\\n            <span class=\\"token string\\">'max_depth'</span><span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">6</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">8</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">#default 2</span>\\n            <span class=\\"token string\\">'n_estimators'</span><span class=\\"token punctuation\\">:</span> grid_n_estimator<span class=\\"token punctuation\\">,</span> \\n            <span class=\\"token string\\">'seed'</span><span class=\\"token punctuation\\">:</span> grid_seed  \\n            <span class=\\"token punctuation\\">}</span> \\n        <span class=\\"token punctuation\\">]</span>\\n\\nstart_total <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>perf_counter<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> \\n\\n<span class=\\"token keyword\\">for</span> clf<span class=\\"token punctuation\\">,</span> param <span class=\\"token keyword\\">in</span> <span class=\\"token builtin\\">zip</span> <span class=\\"token punctuation\\">(</span>vote_est<span class=\\"token punctuation\\">,</span> grid_param<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span> \\n\\n    start <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>perf_counter<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>        \\n    best_search <span class=\\"token operator\\">=</span> model_selection<span class=\\"token punctuation\\">.</span>GridSearchCV<span class=\\"token punctuation\\">(</span>estimator <span class=\\"token operator\\">=</span> clf<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> param_grid <span class=\\"token operator\\">=</span> param<span class=\\"token punctuation\\">,</span> scoring <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'accuracy'</span><span class=\\"token punctuation\\">)</span>\\n    best_search<span class=\\"token punctuation\\">.</span>fit<span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'data'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'target'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n    run <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>perf_counter<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> start\\n\\n    best_param <span class=\\"token operator\\">=</span> best_search<span class=\\"token punctuation\\">.</span>best_params_\\n\\n    clf<span class=\\"token punctuation\\">[</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">.</span>set_params<span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">**</span>best_param<span class=\\"token punctuation\\">)</span> \\n\\n\\nrun_total <span class=\\"token operator\\">=</span> time<span class=\\"token punctuation\\">.</span>perf_counter<span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> start_total\\n\\n\\n<span class=\\"token comment\\">#Hard Vote or majority rules w/Tuned Hyperparameters</span>\\ngrid_hard <span class=\\"token operator\\">=</span> ensemble<span class=\\"token punctuation\\">.</span>VotingClassifier<span class=\\"token punctuation\\">(</span>estimators <span class=\\"token operator\\">=</span> vote_est <span class=\\"token punctuation\\">,</span> voting <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'hard'</span><span class=\\"token punctuation\\">)</span>\\ngrid_hard_cv <span class=\\"token operator\\">=</span> model_selection<span class=\\"token punctuation\\">.</span>cross_validate<span class=\\"token punctuation\\">(</span>grid_hard<span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'data'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'target'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\ngrid_hard<span class=\\"token punctuation\\">.</span>fit<span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'data'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'target'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n\\n\\n\\n<span class=\\"token comment\\">#Soft Vote or weighted probabilities w/Tuned Hyperparameters</span>\\ngrid_soft <span class=\\"token operator\\">=</span> ensemble<span class=\\"token punctuation\\">.</span>VotingClassifier<span class=\\"token punctuation\\">(</span>estimators <span class=\\"token operator\\">=</span> vote_est <span class=\\"token punctuation\\">,</span> voting <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'soft'</span><span class=\\"token punctuation\\">)</span>\\ngrid_soft_cv <span class=\\"token operator\\">=</span> model_selection<span class=\\"token punctuation\\">.</span>cross_validate<span class=\\"token punctuation\\">(</span>grid_soft<span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'data'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'target'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\ngrid_soft<span class=\\"token punctuation\\">.</span>fit<span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'data'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> data<span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'target'</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"王新宇"},"autoDesc":true}`);export{n as data};
