const e=JSON.parse('{"key":"v-4107d382","path":"/3%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/6Docker/kebernetes/k8sPods.html","title":"boxModel","lang":"zh-CN","frontmatter":{"description":"boxModel Pods 共享网络 一个 Pod 内的多个容器之间可以通过 localhost 来进行通信 不同的 Pod 有不同的 IP, 不同pod使用IP来通信 共享存储 一个 Pod 里的多个容器可以共享存储卷，这个存储卷会被定义为 Pod 的一部分，并且可 以挂载到该 Pod里的所有容器的文件系统上。 实现共享的原理是:每个pod都是先初始化一个根容器, 然后将我们创建的容器加入到根容器. 使用命令行控制 增加 kubectl run nginx --image=nginx:1.17.1 --port=80 默认使用controller创建, 既kind: Deployment 查看 kubectl get pod kubectl get pods -n kube-system 查看某个namespce下的pods, 默认是default kubectl get pod -o wide 显示额外的信息 查看详细信息 kubectl describe pod [NAME] 删除 kubectl delete pod [NAME] 使用controller创建的pod 删除pod会自动生成, 要直接删除controllerkubectl delete deployment [NAME]","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/3%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/6Docker/kebernetes/k8sPods.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"boxModel"}],["meta",{"property":"og:description","content":"boxModel Pods 共享网络 一个 Pod 内的多个容器之间可以通过 localhost 来进行通信 不同的 Pod 有不同的 IP, 不同pod使用IP来通信 共享存储 一个 Pod 里的多个容器可以共享存储卷，这个存储卷会被定义为 Pod 的一部分，并且可 以挂载到该 Pod里的所有容器的文件系统上。 实现共享的原理是:每个pod都是先初始化一个根容器, 然后将我们创建的容器加入到根容器. 使用命令行控制 增加 kubectl run nginx --image=nginx:1.17.1 --port=80 默认使用controller创建, 既kind: Deployment 查看 kubectl get pod kubectl get pods -n kube-system 查看某个namespce下的pods, 默认是default kubectl get pod -o wide 显示额外的信息 查看详细信息 kubectl describe pod [NAME] 删除 kubectl delete pod [NAME] 使用controller创建的pod 删除pod会自动生成, 要直接删除controllerkubectl delete deployment [NAME]"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-24T12:46:58.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-24T12:46:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"boxModel\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-24T12:46:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"Pods","slug":"pods","link":"#pods","children":[{"level":3,"title":"使用命令行控制","slug":"使用命令行控制","link":"#使用命令行控制","children":[]},{"level":3,"title":"使用配置文件控制","slug":"使用配置文件控制","link":"#使用配置文件控制","children":[]},{"level":3,"title":"参数详解","slug":"参数详解","link":"#参数详解","children":[]},{"level":3,"title":"pod YML详解","slug":"pod-yml详解","link":"#pod-yml详解","children":[]},{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]},{"level":2,"title":"pod生命周期","slug":"pod生命周期","link":"#pod生命周期","children":[{"level":3,"title":"初始化容器","slug":"初始化容器","link":"#初始化容器","children":[]},{"level":3,"title":"容器钩子","slug":"容器钩子","link":"#容器钩子","children":[]},{"level":3,"title":"容器探测","slug":"容器探测","link":"#容器探测","children":[]},{"level":3,"title":"重启策略","slug":"重启策略","link":"#重启策略","children":[]}]},{"level":2,"title":"pod调度策略","slug":"pod调度策略","link":"#pod调度策略","children":[{"level":3,"title":"强制性","slug":"强制性","link":"#强制性","children":[]},{"level":3,"title":"(反)亲和性","slug":"反-亲和性","link":"#反-亲和性","children":[]},{"level":3,"title":"污点","slug":"污点","link":"#污点","children":[]},{"level":3,"title":"容忍(Toleration)","slug":"容忍-toleration","link":"#容忍-toleration","children":[]}]}],"git":{"createdTime":1740401218000,"updatedTime":1740401218000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":6.02,"words":1806},"filePathRelative":"3编程基础/6Docker/kebernetes/k8sPods.md","localizedDate":"2025年2月24日","excerpt":"<h1> boxModel</h1>\\n<h2> Pods</h2>\\n<ul>\\n<li>共享网络\\n一个 Pod 内的多个容器之间可以通过 localhost 来进行通信\\n不同的 Pod 有不同的 IP, 不同pod使用IP来通信</li>\\n<li>共享存储\\n一个 Pod 里的多个容器可以共享存储卷，这个存储卷会被定义为 Pod 的一部分，并且可\\n以挂载到该 Pod里的所有容器的文件系统上。</li>\\n</ul>\\n<p>实现共享的原理是:每个pod都是先初始化一个根容器, 然后将我们创建的容器加入到根容器.</p>\\n<h3> 使用命令行控制</h3>\\n<ul>\\n<li>增加 <code>kubectl run nginx --image=nginx:1.17.1 --port=80</code>\\n默认使用controller创建, 既<code>kind: Deployment</code></li>\\n<li>查看 <code>kubectl get pod</code>\\n<code>kubectl get pods -n kube-system</code> 查看某个namespce下的pods, 默认是default\\n<code>kubectl get pod -o wide</code> 显示额外的信息</li>\\n<li>查看详细信息 <code>kubectl describe pod [NAME]</code></li>\\n<li>删除 <code>kubectl delete pod [NAME]</code>\\n使用controller创建的pod 删除pod会自动生成, 要直接删除controller<code>kubectl delete deployment [NAME]</code></li>\\n</ul>","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
