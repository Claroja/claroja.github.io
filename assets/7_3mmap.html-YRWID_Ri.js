const t=JSON.parse('{"key":"v-3982b5ab","path":"/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c/8%E8%BF%9B%E7%A8%8B/7_3mmap.html","title":"","lang":"zh-CN","frontmatter":{"description":"mmap()Memory-mapped I/O)将文件映射到内存缓冲区中,从缓冲区读数据,就相当于读文件中的字节,将数据存入缓冲区,相应的字节就会写入文件.(可以不使用read,write函数情况下,使用地址(指针)来完成I/O操作) 多进程映射同一个文件,来完成进程中的通信 void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset); 同malloc函数申请内存空间类似的，mmap建立的映射区在使用结束后也应调用类似free的函数来释放。","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2c/8%E8%BF%9B%E7%A8%8B/7_3mmap.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:description","content":"mmap()Memory-mapped I/O)将文件映射到内存缓冲区中,从缓冲区读数据,就相当于读文件中的字节,将数据存入缓冲区,相应的字节就会写入文件.(可以不使用read,write函数情况下,使用地址(指针)来完成I/O操作) 多进程映射同一个文件,来完成进程中的通信 void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset); 同malloc函数申请内存空间类似的，mmap建立的映射区在使用结束后也应调用类似free的函数来释放。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T14:08:45.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T14:08:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T14:08:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[],"git":{"createdTime":1740146925000,"updatedTime":1740146925000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":1.15,"words":346},"filePathRelative":"2编程语言/2c/8进程/7_3mmap.md","localizedDate":"2025年2月21日","excerpt":"<p><code>mmap</code>()Memory-mapped I/O)将文件映射到内存缓冲区中,从缓冲区读数据,就相当于读文件中的字节,将数据存入缓冲区,相应的字节就会写入文件.(可以不使用read,write函数情况下,使用地址(指针)来完成I/O操作)\\n多进程映射同一个文件,来完成进程中的通信</p>\\n<p><code>void *mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset);</code>\\n同malloc函数申请内存空间类似的，mmap建立的映射区在使用结束后也应调用类似free的函数来释放。</p>","copyright":{"author":"王新宇"},"autoDesc":true}');export{t as data};
