import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as t}from"./app-YE2Hltoy.js";const p={},o=t(`<h1 id="regression" tabindex="-1"><a class="header-anchor" href="#regression" aria-hidden="true">#</a> regression</h1><ol><li>导入相关模块, 日志, 设备配置</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing
<span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> TensorDataset<span class="token punctuation">,</span> DataLoader
<span class="token keyword">import</span> time
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token punctuation">,</span> optim
<span class="token keyword">import</span> math
<span class="token keyword">import</span> logging<span class="token punctuation">.</span>config
<span class="token keyword">import</span> yaml

logging<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dictConfig<span class="token punctuation">(</span>yaml<span class="token punctuation">.</span>safe_load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;logging.yml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">&#39;mylog&#39;</span><span class="token punctuation">)</span>
device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">&quot;cuda:0&quot;</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">&quot;cpu&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>定义网络</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">FlightLSTM</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> output_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> batch_size
        self<span class="token punctuation">.</span>hidden_size <span class="token operator">=</span> hidden_size
        self<span class="token punctuation">.</span>lstm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LSTM<span class="token punctuation">(</span>input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">,</span> num_layers<span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># output: [BATCH_SIZE, time_step, hidden_size] 最上层的layer的每个时刻的输出特征</span>
        <span class="token comment"># h_n: [num_layers,BATCH_SIZE, hidden_size] batch中, 每条序列, 所有layer的最后时刻的hidden_state</span>
        output<span class="token punctuation">,</span> <span class="token punctuation">(</span>h_n<span class="token punctuation">,</span>c_n<span class="token punctuation">)</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>lstm<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        output <span class="token operator">=</span> output<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># 取最后一个时刻的输出, (BATCH_SIZE , hidden_size). 另外一个写法是 output = h_n[-1,:,:], 通过hidden_state来取</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>output<span class="token punctuation">)</span>  <span class="token comment"># output.shape = (BATCH_SIZE , output_size)</span>
        <span class="token keyword">return</span> output
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>数据预处理</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 1.获得数据</span>
data_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&quot;gentle&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">&quot;boy&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;girl&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;boy&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;girl&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;boy&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;boy&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;girl&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;boy&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;girl&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;girl&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;girl&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">&quot;series&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment"># type: pd.DataFrame</span>

<span class="token comment">## 2. 缺失值处理</span>
data_df <span class="token operator">=</span> data_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">## 3. 特征处理</span>
data_np <span class="token operator">=</span> data_df<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>
data_np_months <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>OneHotEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>data_np<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>data_np_months<span class="token punctuation">,</span>data_np<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">## 4. 归一化处理</span>


<span class="token comment">## 5. 切片处理</span>
SEQ_LEN<span class="token punctuation">,</span> FEATURE_SIZE <span class="token operator">=</span> result<span class="token punctuation">.</span>shape  <span class="token comment"># 序列的长度和特征数量</span>
WIN_SIZE <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment"># 包含了3个features和1个label</span>

li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>SEQ_LEN <span class="token operator">-</span> WIN_SIZE <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>WIN_SIZE<span class="token punctuation">]</span><span class="token punctuation">)</span>

res <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&quot;float32&quot;</span><span class="token punctuation">)</span>
res <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>res<span class="token punctuation">)</span>

<span class="token comment">## 6. 拆分训练集和测试集</span>
num_train <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0.8</span> <span class="token operator">*</span> SEQ_LEN<span class="token punctuation">)</span>
num_valid <span class="token operator">=</span> SEQ_LEN <span class="token operator">-</span> num_train

x_train <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token punctuation">:</span>num_train<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
y_train <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token punctuation">:</span>num_train<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
x_eval <span class="token operator">=</span> res<span class="token punctuation">[</span>num_train<span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>
y_eval <span class="token operator">=</span> res<span class="token punctuation">[</span>num_train<span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>


train_dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
DATA_LEN <span class="token operator">=</span> train_dataset<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span>
BATCH_SIZE <span class="token operator">=</span> <span class="token number">2</span>
BATCH_NUMS <span class="token operator">=</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>DATA_LEN <span class="token operator">/</span> BATCH_SIZE<span class="token punctuation">)</span>

train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>
    dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span>
    batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span>
    shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
    num_workers<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>

eval_dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>x_eval<span class="token punctuation">,</span> y_eval<span class="token punctuation">)</span>
eval_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>
    dataset<span class="token operator">=</span>train_dataset<span class="token punctuation">,</span>
    batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">,</span>
    shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>
    num_workers<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>训练模型</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>model <span class="token operator">=</span> FlightLSTM<span class="token punctuation">(</span>input_size<span class="token operator">=</span>FEATURE_SIZE<span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span>BATCH_SIZE<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>

LR<span class="token operator">=</span><span class="token number">0.001</span>
EPOCHS <span class="token operator">=</span> <span class="token number">10</span>
PRINT_FREQ <span class="token operator">=</span> <span class="token number">2</span>

criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>LR<span class="token punctuation">)</span>

eval_model <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment"># 用来存储</span>
<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>EPOCHS<span class="token punctuation">)</span><span class="token punctuation">:</span>
    epoch_start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> batch_step<span class="token punctuation">,</span> <span class="token punctuation">(</span>batch_x<span class="token punctuation">,</span> batch_y<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>train_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>
        batch_x<span class="token punctuation">,</span>batch_y <span class="token operator">=</span> batch_x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
        batch_y_hat <span class="token operator">=</span> model<span class="token punctuation">(</span>batch_x<span class="token punctuation">)</span>
        loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>batch_y<span class="token punctuation">,</span> batch_y_hat<span class="token punctuation">)</span>
        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>

        model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        eval_batch_loss <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> batch_step_eval<span class="token punctuation">,</span> <span class="token punctuation">(</span>batch_x_eval<span class="token punctuation">,</span> batch_y_eval<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>eval_dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>
                batch_x_eval<span class="token punctuation">,</span> batch_y_eval <span class="token operator">=</span> batch_x_eval<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_y_eval<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>
                batch_y_eval_hat <span class="token operator">=</span> model<span class="token punctuation">(</span>batch_x_eval<span class="token punctuation">)</span>
                eval_batch_loss_ <span class="token operator">=</span> criterion<span class="token punctuation">(</span>batch_y_eval<span class="token punctuation">,</span> batch_y_eval_hat<span class="token punctuation">)</span>  <span class="token comment"># type:torch.Tensor</span>
                eval_batch_loss <span class="token operator">+=</span> eval_batch_loss_
        model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> batch_step <span class="token operator">%</span> PRINT_FREQ <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> batch_step <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>eval_model<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> eval_batch_loss <span class="token operator">&lt;</span> eval_model<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>eval_model<span class="token punctuation">,</span> key<span class="token operator">=</span>eval_model<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;epoch&#39;</span><span class="token punctuation">:</span> epoch<span class="token punctuation">,</span><span class="token string">&#39;model_state_dict&#39;</span><span class="token punctuation">:</span> model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f&#39;./checkpoint/model_</span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span>batch_step<span class="token punctuation">}</span></span><span class="token string">.pth&#39;</span></span><span class="token punctuation">)</span>
            eval_model<span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token punctuation">{</span>batch_step<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> eval_batch_loss  <span class="token comment"># 将本次训练结果添加到记录中</span>
            best_key <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>eval_model<span class="token punctuation">,</span> key<span class="token operator">=</span>eval_model<span class="token punctuation">.</span>get<span class="token punctuation">)</span>
            best_eval_loss <span class="token operator">=</span> eval_model<span class="token punctuation">[</span>best_key<span class="token punctuation">]</span>

            logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Epoch:</span><span class="token interpolation"><span class="token punctuation">{</span>epoch<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>EPOCHS<span class="token punctuation">}</span></span><span class="token string">, Batch:</span><span class="token interpolation"><span class="token punctuation">{</span>batch_step<span class="token punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">{</span>BATCH_NUMS<span class="token punctuation">}</span></span><span class="token string">, TrainLoss:</span><span class="token interpolation"><span class="token punctuation">{</span>loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, &#39;</span></span>
                        <span class="token string-interpolation"><span class="token string">f&#39;EvalLoss:</span><span class="token interpolation"><span class="token punctuation">{</span>eval_batch_loss<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">, Best_Index: model_</span><span class="token interpolation"><span class="token punctuation">{</span>best_key<span class="token punctuation">}</span></span><span class="token string">.pth, Best_Eval_Loss: </span><span class="token interpolation"><span class="token punctuation">{</span>best_eval_loss<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","regression.html.vue"]]);export{r as default};
