import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o,c,a as n,b as a,d as i,e as s}from"./app-0JgdiRQ-.js";const l={},u=s(`<h1 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait</h1><h2 id="explicit-wait" tabindex="-1"><a class="header-anchor" href="#explicit-wait" aria-hidden="true">#</a> Explicit wait</h2><p>显式的指定等待的条件. 因为浏览器中的网页的元素是异步加载的, 所以坑你会出现元素还没加载, 程序就需要获取的情况, 如下面的代码:</p><p>网页代码中,等整个<code>DOM</code>加载完, 才在<code>javascript</code>创建<code>&lt;p&gt;</code>标签,</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>utf-8</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Race Condition Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">var</span> initialised <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;load&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> newElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newElement<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&quot;Hello from JavaScript!&quot;</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>newElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    initialised <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们直接获取网页时, 就会出错, 因为<code>&lt;p&gt;</code>标签可能还没加载.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver<span class="token punctuation">.</span>navigate<span class="token punctuation">(</span><span class="token string">&quot;file:///race_condition.html&quot;</span><span class="token punctuation">)</span>
el <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>TAG_NAME<span class="token punctuation">,</span> <span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> el<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token string">&quot;Hello from JavaScript!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用<code>WebDriverWait</code>设置等待条件, 先等待3秒, 然后再获取<code>&lt;p&gt;</code>标签.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait

driver<span class="token punctuation">.</span>navigate<span class="token punctuation">(</span><span class="token string">&quot;file:///race_condition.html&quot;</span><span class="token punctuation">)</span>
el <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token keyword">lambda</span> d<span class="token punctuation">:</span> d<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>TAG_NAME<span class="token punctuation">,</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">assert</span> el<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token string">&quot;Hello from JavaScript!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><code>WebDriverWait</code>方法第一个参数是<code>driver</code>, 第二个参数<code>timeout</code>指最大的等待时间</li><li><code>until</code>传入的是一个方法, 方法的参数是<code>driver</code>, 这里用的<code>d</code>来代替. 当<code>until</code>中的方法返回为<code>True</code>时, 表示条件达成, 程序消除阻塞, 继续执行. 这里<code>WebDriverWait</code>对象将一直查找<code>P</code>标签,并静默<code>no such element errors</code>, 直到<code>P</code>标签被找到. 如果<code>P</code>标签一直不被渲染, 则会报出<code>timeout error</code>.</li></ol>`,10),d={href:"https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html?highlight=expected",target:"_blank",rel:"noopener noreferrer"},r=s(`<table><thead><tr><th>条件</th><th>描述</th></tr></thead><tbody><tr><td><code>visibility_of(element)</code></td><td>DOM中element可见</td></tr><tr><td><code>frame_to_be_available_and_switch_to_it(locator)</code></td><td>frame is available to switch to, <code>locator</code>是<code>frame</code>的<code>id</code></td></tr></tbody></table><h2 id="implicit-wait" tabindex="-1"><a class="header-anchor" href="#implicit-wait" aria-hidden="true">#</a> Implicit wait</h2><p>隐式等待是在尝试发现某个元素的时候，如果没能立刻发现，就等待固定长度的时间。默认设置是0秒。一旦设置了隐式等待时间，它的作用范围就是Webdriver对象实例的整个生命周期。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver <span class="token operator">=</span> Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://somedomain/url_that_delays_loading&quot;</span><span class="token punctuation">)</span>
my_dynamic_element <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">&quot;myDynamicElement&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说在执行<code>driver.find_element(By.ID, &quot;myDynamicElement&quot;)</code>时, 会等待10秒. 超时才会报错. 而且该程序后面获得其他元素时, 也会隐式等待10秒</p><p>缺点是不智能，因为随着ajax技术的广泛应用，页面的元素往往都可以时间局部加载，也就是在整个页面没有加载完的时候，可能我们需要的元素已经加载完成了，那就么有必要再等待整个页面的加载，执行进行下一步，而隐性等待满足不了这一点. 更智能的就是使用<code>Explicit wait</code>等待, 对具体的元素进行设置.</p><h2 id="fluentwait" tabindex="-1"><a class="header-anchor" href="#fluentwait" aria-hidden="true">#</a> FluentWait</h2><p>可以指定显式的指定, 等待时确认条件是否触发的频率,等</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>driver <span class="token operator">=</span> Firefox<span class="token punctuation">(</span><span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;http://somedomain/url_that_delays_loading&quot;</span><span class="token punctuation">)</span>
wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> poll_frequency<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ignored_exceptions<span class="token operator">=</span><span class="token punctuation">[</span>ElementNotVisibleException<span class="token punctuation">,</span> ElementNotSelectableException<span class="token punctuation">]</span><span class="token punctuation">)</span>
element <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>element_to_be_clickable<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">&quot;//div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://www.selenium.dev/documentation/webdriver/waits/</p>`,10);function k(v,m){const t=p("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[a("更多的条件可以"),n("a",d,[a("参考"),i(t)])]),r])}const g=e(l,[["render",k],["__file","wait.html.vue"]]);export{g as default};
