import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,e as p}from"./app-jdLxCr9I.js";const t={},e=p(`<h1 id="装饰器" tabindex="-1"><a class="header-anchor" href="#装饰器" aria-hidden="true">#</a> 装饰器</h1><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践" aria-hidden="true">#</a> 最佳实践</h2><ol><li><p>保存函数运行的中间结果</p><p>一些方法处理时间较长, 返回运行消耗大量时间, 可以将中间结果保存起来, 后面使用时, 直接调取</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path
<span class="token keyword">import</span> pickle


<span class="token keyword">def</span> <span class="token function">saveOrLoad_middle_result</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">dec</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        save_path <span class="token operator">=</span> kwargs<span class="token punctuation">[</span><span class="token string">&#39;save_path&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> Path<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>save_path<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">.pkl&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            func_result <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>save_path<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">.pkl&#39;</span></span><span class="token punctuation">,</span><span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            func_result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  
            pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>func_result<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>save_path<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">.pkl&#39;</span></span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> func_result
    <span class="token keyword">return</span> dec

<span class="token decorator annotation punctuation">@saveOrLoad_middle_result</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>save_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> save_path

test<span class="token punctuation">(</span>save_path<span class="token operator">=</span><span class="token string">&#39;./data/rec/&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面设计不够合理, 因为被装饰函数<code>func()</code>本身是不应该具备保护中间结果的功能的, 该功能应该由<code>dec()</code>来完成, 所以<code>save_path</code>参数应该传递给装饰器函数<code>saveOrLoad_middle_result(save_path)</code>, 而<code>func()</code>不需要传入该参数.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">saveOrLoad_middle_result</span><span class="token punctuation">(</span>save_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">dec</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> Path<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>save_path<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">.pkl&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                func_result <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>save_path<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">.pkl&#39;</span></span><span class="token punctuation">,</span><span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                func_result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  
                pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>func_result<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>save_path<span class="token punctuation">}</span></span><span class="token interpolation"><span class="token punctuation">{</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">}</span></span><span class="token string">.pkl&#39;</span></span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> func_result
        <span class="token keyword">return</span> dec
    <span class="token keyword">return</span> wrap


<span class="token decorator annotation punctuation">@saveOrLoad_middle_result</span><span class="token punctuation">(</span>save_path<span class="token operator">=</span><span class="token string">&#39;./data/rec/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>save_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> save_path

test<span class="token punctuation">(</span>save_path<span class="token operator">=</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h2><p>想理解装饰器，就得知道, 闭包特性（内函数能捕捉到外函数的环境变量）</p><pre><code>\`\`\`python
def line(a, b): # 生成了一个确定了ab的线性函数，结果只需要给x值就可以判断y值
    def line(x):
        return a*x + b
    return line # 返回值为闭包，就是内层函数
line1 = line(1, 1) # 用line1接受a=1，b=1的闭包函数
line2 = line(-1, 1) # 用line2接收a=1，b=-1的闭包函数

line1(1)  # 2
line2(1)  # 0
\`\`\`
</code></pre><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p><code>@</code>装饰符号的作用是将被装饰的函数当成参数传入装饰器函数, 举例:</p><ol><li><code>wrap()</code>: 装饰器函数, 该函数内只包含装饰函数, 其他不要操作, 参数是被装饰函数. 只有一个作用就是返回装饰函数<code>dec()</code></li><li><code>dec()</code>: 装饰函数, 调用被装饰函数, 整合所有的对被装饰函数的操作. 名称没有具体含义, 习惯使用<code>dec()</code></li><li><code>func()</code>被装饰函数</li></ol><p>定义一个装饰器:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 装饰器函数, 该函数内只包含装饰函数, 其他不要操作, 参数是被装饰函数</span>
    <span class="token keyword">def</span> <span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 装饰函数, 可以传参, 函数内部写对原函数的修饰逻辑, 然后返回</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;在dec函数中添加操作&quot;</span><span class="token punctuation">)</span>
        func<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> dec
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不使用<code>@</code>符号, 正常低啊用:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我没使用@, 直接当成参数传入&quot;</span><span class="token punctuation">)</span>

wrap<span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@wrap</span> <span class="token comment"># 对应wrap函数</span>
<span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;我使用了@&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 等价于wrap(test2)()</span>

test2<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="处理被装饰函数的返回值" tabindex="-1"><a class="header-anchor" href="#处理被装饰函数的返回值" aria-hidden="true">#</a> 处理被装饰函数的返回值</h2><p><code>@</code>原理中的例子中被装饰函数<code>func</code>没有返回值，所以在<code>dec</code>中是可以直接调用，而不需要<code>return</code>的。</p><p>但当<code>func</code>有返回值的时候是需要用<code>return func()</code>来调用的，注意这里<code>return</code>的是<code>func()</code>的调用，而不是<code>func</code>本身。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;在dec函数中添加一下操作&quot;</span><span class="token punctuation">)</span>
        func_result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> func_result
    <span class="token keyword">return</span> dec
    
<span class="token decorator annotation punctuation">@wrap</span> <span class="token comment"># 对应wrap函数</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&quot;返回值&quot;</span>

test<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="给被装饰函数传参" tabindex="-1"><a class="header-anchor" href="#给被装饰函数传参" aria-hidden="true">#</a> 给被装饰函数传参</h2><p>装饰方法的参数<code>*args_dec</code>和<code>**kwargs_dec</code>仅仅起到传递参数给被装饰函数的桥梁租用</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">dec</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 调用test()时,是从这里开始执行, 所以要传入</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;装饰开始</span><span class="token interpolation"><span class="token punctuation">{</span>args<span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span>kwargs<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
        func_result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  <span class="token comment"># decorater的参数传给被修饰函数func</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;装饰结束&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> func_result
    <span class="token keyword">return</span> dec

<span class="token decorator annotation punctuation">@wrap</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我是被装饰的函数&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> num<span class="token operator">+</span><span class="token number">1</span>

test<span class="token punctuation">(</span>num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="装饰器传入参数" tabindex="-1"><a class="header-anchor" href="#装饰器传入参数" aria-hidden="true">#</a> 装饰器传入参数</h2><ol><li>装饰器的参数 <code>**args_warpp</code>和<code>**kwargs_warpp</code>, 可以在装饰函数<code>dec()</code>内部直接调用</li><li>装饰方法的参数<code>*args_dec</code>和<code>**kwargs_dec</code>仅仅起到传递参数给被装饰函数的桥梁租用</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">warpp</span><span class="token punctuation">(</span><span class="token operator">*</span>args_warpp<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs_warpp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;装饰器参数&quot;</span><span class="token punctuation">,</span>args_warpp<span class="token punctuation">,</span> kwargs_warpp<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrap</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">dec</span><span class="token punctuation">(</span><span class="token operator">*</span>args_dec<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs_dec<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;被装饰参数&quot;</span><span class="token punctuation">,</span>args_dec<span class="token punctuation">,</span>kwargs_dec<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;现在开始装饰&#39;</span><span class="token punctuation">)</span>
            func_res <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args_dec<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs_dec<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;现在结束装饰&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> func_res
        <span class="token keyword">return</span> dec
    <span class="token keyword">return</span> wrap


<span class="token decorator annotation punctuation">@warpp</span><span class="token punctuation">(</span><span class="token string">&#39;index.html/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我是被装饰的函数&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> num<span class="token operator">+</span><span class="token number">1</span>

test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多层装饰器" tabindex="-1"><a class="header-anchor" href="#多层装饰器" aria-hidden="true">#</a> 多层装饰器</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">wrap1</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">decorater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> fn<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span>
    <span class="token keyword">return</span> decorater
    
<span class="token keyword">def</span> <span class="token function">wrap2</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">decorater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> fn<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;2&#39;</span>
    <span class="token keyword">return</span> decorater
<span class="token decorator annotation punctuation">@wrap1</span>
<span class="token decorator annotation punctuation">@wrap2</span>
<span class="token keyword">def</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span>
test3<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>装饰器: 先装饰(从下往上),后调用(从上往下) 简单的来讲，就是被装饰的函数会被转换为装饰函数闭包的函数。</p>`,26),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","装饰器.html.vue"]]);export{d as default};
