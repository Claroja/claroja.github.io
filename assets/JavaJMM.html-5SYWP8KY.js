const e=JSON.parse('{"key":"v-b80ff2d2","path":"/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4java/Synchronized/JavaJMM.html","title":"audio","lang":"zh-CN","frontmatter":{"description":"audio JMM即Java Memory Model, 定义了主存/工作内存抽象概念, 底层对应着CPU寄存器/缓存/硬件内存/CPU指令优化等。 原子性 - 保证指令不会受到线程上下文切换的影响 可见性 - 保证指令不会受 cpu 缓存的影响 有序性 - 保证指令不会受 cpu 指令并行优化的影响 原子性 参考线程不安全synchronized/waitNotify/parkUnpark/ReenTrantLock章节 可见性","head":[["meta",{"property":"og:url","content":"https://claroja.github.io/2%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/4java/Synchronized/JavaJMM.html"}],["meta",{"property":"og:site_name","content":"Claroja"}],["meta",{"property":"og:title","content":"audio"}],["meta",{"property":"og:description","content":"audio JMM即Java Memory Model, 定义了主存/工作内存抽象概念, 底层对应着CPU寄存器/缓存/硬件内存/CPU指令优化等。 原子性 - 保证指令不会受到线程上下文切换的影响 可见性 - 保证指令不会受 cpu 缓存的影响 有序性 - 保证指令不会受 cpu 指令并行优化的影响 原子性 参考线程不安全synchronized/waitNotify/parkUnpark/ReenTrantLock章节 可见性"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-21T12:59:55.000Z"}],["meta",{"property":"article:author","content":"claroja"}],["meta",{"property":"article:modified_time","content":"2025-02-21T12:59:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"audio\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-21T12:59:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"claroja\\",\\"url\\":\\"https://claroja.github.io\\"}]}"]]},"headers":[{"level":2,"title":"原子性","slug":"原子性","link":"#原子性","children":[]},{"level":2,"title":"可见性","slug":"可见性","link":"#可见性","children":[]},{"level":2,"title":"两阶段终止设计模式","slug":"两阶段终止设计模式","link":"#两阶段终止设计模式","children":[]},{"level":2,"title":"有序性","slug":"有序性","link":"#有序性","children":[]},{"level":2,"title":"double-checked locking 问题","slug":"double-checked-locking-问题","link":"#double-checked-locking-问题","children":[]},{"level":2,"title":"happens-before","slug":"happens-before","link":"#happens-before","children":[]}],"git":{"createdTime":1740142795000,"updatedTime":1740142795000,"contributors":[{"name":"Claroja","email":"63183535@qq.com","commits":1}]},"readingTime":{"minutes":9.38,"words":2815},"filePathRelative":"2编程语言/4java/Synchronized/JavaJMM.md","localizedDate":"2025年2月21日","excerpt":"<h1> audio</h1>\\n<p>JMM即Java Memory Model, 定义了主存/工作内存抽象概念, 底层对应着CPU寄存器/缓存/硬件内存/CPU指令优化等。</p>\\n<ul>\\n<li>原子性 - 保证指令不会受到线程上下文切换的影响</li>\\n<li>可见性 - 保证指令不会受 cpu 缓存的影响</li>\\n<li>有序性 - 保证指令不会受 cpu 指令并行优化的影响</li>\\n</ul>\\n<h2> 原子性</h2>\\n<p>参考线程不安全synchronized/waitNotify/parkUnpark/ReenTrantLock章节</p>\\n<h2> 可见性</h2>\\n","copyright":{"author":"王新宇"},"autoDesc":true}');export{e as data};
