import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as l,c,a as n,b as s,d as e,e as t}from"./app-A10JnHE0.js";const i={},d=n("h1",{id:"log",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#log","aria-hidden":"true"},"#"),s(" log")],-1),r={id:"logging",tabindex:"-1"},u=n("a",{class:"header-anchor",href:"#logging","aria-hidden":"true"},"#",-1),g={href:"https://docs.python.org/3.10/library/logging.html#module-level-functions",target:"_blank",rel:"noopener noreferrer"},k=t(`<p><code>logging</code>是日志的入口.有两种用法:</p><ol><li><p>简单使用, 直接通过<code>logging</code>来管理日志输出</p><p>logging中的快捷配置方法, 自动创建Logger类, 适用于单文件, 简单的项目.</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>指定输出的文件名, 设置后日志信息就不会被输出到控制台了</td></tr><tr><td>filemod</td><td>输出文件的打开方式, 默认为<code>a</code>, 只有在<code>filename</code>指定时生效</td></tr><tr><td>format</td><td>日志输出时格式及包含的信息</td></tr><tr><td>datefmt</td><td>日期和事件的格式, 在<code>format</code>中指定<code>%(asctime)s</code>时才生效</td></tr><tr><td>level</td><td>指定日志的级别</td></tr><tr><td>stream</td><td>指定日志输出的流目的地, 比如sys.stdout,sys.stderr,网络stream. 不能和filename共存, 报错</td></tr><tr><td>handler</td><td>多个Handler的可迭代对象, 将会被添加到rootlogger.filename, stream和handlers只能允许一个存在</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>LOG_FORMAT <span class="token operator">=</span> <span class="token string">&quot;%(asctime)s - %(levelname)s - %(message)s&quot;</span>
DATE_FORMAT <span class="token operator">=</span> <span class="token string">&quot;%m/%d/%Y %H:%M:%S %p&quot;</span>
logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">&#39;my.log&#39;</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span>LOG_FORMAT<span class="token punctuation">,</span> datefmt<span class="token operator">=</span>DATE_FORMAT<span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&quot;This is a debug log.&quot;</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&quot;This is a info log.&quot;</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&quot;This is a warning log.&quot;</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&quot;This is a error log.&quot;</span><span class="token punctuation">)</span>
logging<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">&quot;This is a critical log.&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用组件进行细致化的配置</p><table><thead><tr><th>组件</th><th>描述</th></tr></thead><tbody><tr><td>Logger</td><td>一个日志对象, 在Logger对象中输出具体信息<code>message</code></td></tr><tr><td>Handler</td><td>控制Logger日志输出的目的地, 一个Logger可以有多个Handler, 分别输出到不同的地方</td></tr><tr><td>Formatter</td><td>控制Handler输出信息的格式, 比如<code>asctime</code>(时间)</td></tr><tr><td>Filter</td><td>过滤不需要的日志信息</td></tr></tbody></table></li></ol><h2 id="组件-logger" tabindex="-1"><a class="header-anchor" href="#组件-logger" aria-hidden="true">#</a> 组件-Logger</h2><p><code>Logger</code>从来不直接实例化，通过<code>logging.getLogger(name)</code>来获得. <code>name</code>默认是<code>root</code>, 对同一个名字的多个调用<code>logging.getLogger()</code>方法会返回同一个<code>logger</code>对象。</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Logger.setLevel()</code></td><td>设置显示的等级, 低等级的日志将不会被记录</td></tr><tr><td><code>Logger.addHandler()</code>或<code>Logger.removeHandler()</code></td><td>添加或移除Handler对象, 来控制输出的目的地</td></tr><tr><td><code>Logger.addFilter()</code> 或 <code>Logger.removeFilter()</code></td><td>添加或移除Filter对象, 来控制过滤不需要的日志</td></tr><tr><td><code>Logger.debug()</code>,<code>Logger.info()</code>,<code>Logger.warning()</code>,<code>Logger.error()</code>,<code>Logger.critical()</code></td><td>根据对应等级记录日志</td></tr><tr><td><code>Logger.exception()</code></td><td>创建一个类似于Logger.error()的日志消息, 区别在于<code>exception()</code>输出堆栈追踪信息, 通常在<code>exception handler</code>调用该方法</td></tr><tr><td><code>Logger.log()</code></td><td>需要添加一个等级level参数, 不方便, 直接使用Logger.debug()这样的方法</td></tr></tbody></table><p><code>logger.error</code>通过<code>exec_info</code>在记录下一行打印<code>exception</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    xxxx
<span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&quot;报错了&quot;</span><span class="token punctuation">,</span>exc_info <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外以上代码, 可用<code>logger.exception</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    xxxx
<span class="token keyword">except</span> Exception<span class="token punctuation">:</span>
    logger<span class="token punctuation">.</span>exception<span class="token punctuation">(</span><span class="token string">&quot;报错了&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他了解:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> traceback<span class="token punctuation">,</span> logging<span class="token punctuation">,</span> sys
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---&quot;</span><span class="token punctuation">)</span>
    logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&quot;报错了&quot;</span><span class="token punctuation">,</span>exc_info <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;---&quot;</span><span class="token punctuation">)</span>
    _<span class="token punctuation">,</span>_<span class="token punctuation">,</span>testa <span class="token operator">=</span> sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>exc_info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承关系" tabindex="-1"><a class="header-anchor" href="#继承关系" aria-hidden="true">#</a> 继承关系</h3><p>名字是以点号分割的命名方式命名的(a.b.c)。这种命名方式里面，后面的loggers是前面logger的子logger，自动继承父loggers的log信息.例如:有一个名称为 foo 的logger，其它名称分别为 foo.bar, foo.bar.baz 和 foo.bam都是 foo 的后代。</p><ul><li><p>level的继承: 如果一个logger上没有被明确设置一个level，那么该logger就是使用它parent的level;如果它的parent也没有明确设置level则继续向上查找parent的parent的有效level，依次类推，直到找到个一个明确设置了level的祖先为止。需要说明的是，root logger总是会有一个明确的level设置（默认为 WARNING）</p></li><li><p>handler的继承 <code>child loggers</code>在完成对日志消息的处理后，默认会将日志消息传递给与它们的祖先<code>loggers</code>相关的<code>handlers</code>。因此，我们不必为一个应用程序中所使用的所有<code>loggers</code>定义和配置<code>handlers</code>，只需要为一个顶层的<code>logger</code>配置<code>handlers</code>，然后按照需要创建<code>child loggers</code>就可足够了。我们也可以通过将一个<code>logger</code>的<code>propagate</code>属性设置为<code>False</code>来关闭这种传递机制。</p></li></ul><h2 id="组件-handler" tabindex="-1"><a class="header-anchor" href="#组件-handler" aria-hidden="true">#</a> 组件-handler</h2><p>Handler对象的作用是将Logger的消息分发到指定的位置(文件,网络,邮件). 一个Logger对象可以添加多个Handler对象, 例如:</p><ul><li>把所有日志都发送到一个日志文件中</li><li>把所有严重级别大于等于error的日志发送到stdout（标准输出）；</li><li>把所有严重级别为critical的日志发送到一个email邮件地址。 这种场景就需要3个不同的handlers.</li></ul><h3 id="方法-1" tabindex="-1"><a class="header-anchor" href="#方法-1" aria-hidden="true">#</a> 方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Handler.setLevel()</code></td><td>设置handler将会处理的日志消息的最低严重级别, 日志信息先过<code>Logger.setLevel()</code>, 然后再通过<code>Handler.setLevel()</code></td></tr><tr><td><code>Handler.setFormatter()</code></td><td>为handler设置一个Formatter对象, 来控制信息输出的格式</td></tr><tr><td><code>Handler.addFilter()</code>或<code>Handler.removeFilter()</code></td><td>为handler添加或删除一个Filter对象, 来过滤不需要的日志</td></tr></tbody></table><h3 id="hander分类" tabindex="-1"><a class="header-anchor" href="#hander分类" aria-hidden="true">#</a> hander分类</h3><ul><li><p><code>StreamHandler</code>: 输出到<code>sys.stdout</code>, <code>sys.stderr</code> 如果<code>stream</code>为空则默认输出到<code>sys.stderr</code>。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">logging</span><span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span>stream<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>FileHandler</code>将日志信息输出到磁盘文件上。默认为<code>append</code>，<code>delay</code>为<code>true</code>时，文件直到<code>emit</code>方法被执行才会打开。默认情况下，日志文件可以无限增大。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">logging</span><span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>RotatingFileHandler</code>参数<code>maxBytes</code>和<code>backupCount</code>允许日志文件在达到<code>maxBytes</code>时<code>rollover</code>.当文件大小达到或者超过<code>maxBytes</code>时，就会新创建一个日志文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">logging</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>RotatingFileHandler<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> maxBytes<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> backupCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>TimedRotatingFileHandler</code>参数<code>when</code>决定了时间间隔的类型，参数<code>interval</code>决定了多少的时间间隔。如<code>when=‘D’，interval=2</code>，就是指两天的时间间隔，<code>backupCount</code>决定了能留几个日志文件。超过数量就会丢弃掉老的日志文件。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">logging</span><span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>TimedRotatingFileHandler<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> when<span class="token operator">=</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> interval<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> backupCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> utc<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>SocketHandler 日志通过TCP协议发送</p></li><li><p>DatagramHandler 日志通过UDP协议发送</p></li><li><p>SysLogHandler 发送日志到UNIX syslog服务，并支持远程syslog服务</p></li><li><p>NTEventLogHandler 发送日志到WindowsNT/2000/XP事件日志</p></li><li><p>SMTPHandler 通过SMTP协议发送日志</p></li><li><p>MemoryHandler 发送日志到内存中的缓冲区，并在达到特定条件时清空</p></li><li><p>HTTPHandler 通过GET或POST方法发送日志到HTTP服务器</p></li></ul><h2 id="组件-formatter" tabindex="-1"><a class="header-anchor" href="#组件-formatter" aria-hidden="true">#</a> 组件-formatter</h2><p>一条日志信息对应一个发生的事件，通常需要包含一下信息：</p><ul><li>事件发生的时间，%(asctime)s</li><li>事件发生的位置，%(pathname)s、%(module)s、%(funcName)s，%(lineno)d</li><li>事件的严重程度，%(levelname)s</li><li>事件的内容，%(message)s</li></ul><table><thead><tr><th>属性名称</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>message</td><td>%(message)s</td><td>日志记录的文本内容, 既Logger对象传入的参数<code>logger.debug(&quot;message&quot;)</code></td></tr><tr><td>name</td><td>%(name)s</td><td>日志的名称, 默认是&#39;root&#39;，因为默认使用的是 rootLogger</td></tr><tr><td>asctime</td><td>%(asctime)s</td><td>可读时间，默认格式‘2003-07-08 16:49:45,896’，逗号之后是毫秒</td></tr><tr><td>levelname</td><td>%(levelname)s</td><td>日志的等级, 如&#39;DEBUG&#39;, &#39;INFO&#39;等</td></tr><tr><td>levelno</td><td>%(levelno)s</td><td>数字化的日志等级, 如10, 20等</td></tr><tr><td>pathname</td><td>%(pathname)s</td><td>文件的全路径名称, 包含文件后缀</td></tr><tr><td>filename</td><td>%(filename)s</td><td>文件名，pathname的一部分</td></tr><tr><td>module</td><td>%(module)s</td><td>filename的名称部分，不包含后缀</td></tr><tr><td>funcName</td><td>%(funcName)s</td><td>调用日志多对应的方法名</td></tr><tr><td>lineno</td><td>%(lineno)d</td><td>被记录日志在源码中的行数</td></tr><tr><td>msecs</td><td>%(msecs)d</td><td>时间中的毫秒部分</td></tr><tr><td>process</td><td>%(process)d</td><td>进程的ID</td></tr><tr><td>processName</td><td>%(processName)s</td><td>进程的名称</td></tr><tr><td>thread</td><td>%(thread)d</td><td>线程的ID</td></tr><tr><td>threadName</td><td>%(threadName)s</td><td>线程的名称</td></tr><tr><td>relativeCreated</td><td>%(relativeCreated)d</td><td>日志被创建的相对时间，以毫秒为单位</td></tr></tbody></table><h2 id="组件-filter" tabindex="-1"><a class="header-anchor" href="#组件-filter" aria-hidden="true">#</a> 组件-filter</h2><p>Filters能够用在Loggers和Handlers上，可以实现比level更复杂的过滤。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">NoParsingFilter</span><span class="token punctuation">(</span>logging<span class="token punctuation">.</span>Filter<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">filter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> record<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> record<span class="token punctuation">.</span>levelno <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
logobj <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span>
logobj<span class="token punctuation">.</span>addFilter<span class="token punctuation">(</span>NoParsingFilter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="level" tabindex="-1"><a class="header-anchor" href="#level" aria-hidden="true">#</a> level</h2><p>在软件开发、测试、部署阶段，把所有的运行日志全部记录下来，方便排查bug。 在生产阶段，只需要记录异常和错误信息，减少I/O压力，减少日志数量，方便排查。</p><p>默认<code>logging.INFO</code>及以上等级的日志都会被打印, 以下是等级排序: CRITICAL: 50 ERROR: 40 WARNING: 30 //默认 INFO: 20 DEBUG: 10 NOTSET: 0</p><p>在开发环境时, 使用<code>DEBUG</code>或<code>INFO</code>级别的日志, 获取尽可能详细的信息来进行开发部署调试 在生产环境时, 使用<code>WARNING</code>或<code>ERROR</code>级别的日志, 降低I/O压力, 提升获取错误日志信息的效率</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>logger<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span><span class="token punctuation">)</span>
handler<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么有两个<code>setLevel()</code>呢？ <code>logger</code>的严重等级用于决定那个级别的log信息可以分发到它的<code>handlers</code>。<code>handler</code>里面的<code>level</code>设置用于控制哪些个log信息是<code>handler</code>需要转寄的。 logger调用方法(如info等)记录日志信息, 首先被logger的setLevel过滤, 然后发送给handler, handler再根据自己的setLevel来过滤. 坑: handler的level级别低于logger的级别时, handler将不会输出</p><h2 id="record" tabindex="-1"><a class="header-anchor" href="#record" aria-hidden="true">#</a> record</h2>`,36),m={href:"https://docs.python.org/3.10/library/logging.html#logrecord-objects",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><h3 id="通过配置文件" tabindex="-1"><a class="header-anchor" href="#通过配置文件" aria-hidden="true">#</a> 通过配置文件</h3><p>根据dict来配置logging, 比如可以先读取json, yaml等格式的文件, 然后将他们转换为dict.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> logging
<span class="token keyword">import</span> logging<span class="token punctuation">.</span>config
dict_conf <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;version&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token string">&#39;formatters&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;simple&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;format&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token string">&#39;handlers&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;file&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;logging.FileHandler&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;level&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;DEBUG&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;formatter&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;simple&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;filename&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;./test.log&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> 
        <span class="token string">&#39;console&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;logging.StreamHandler&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;level&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;INFO&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;formatter&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;simple&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;stream&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ext://sys.stdout&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> 
        <span class="token string">&#39;console_err&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;logging.StreamHandler&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;level&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ERROR&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;formatter&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;simple&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;stream&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ext://sys.stderr&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token string">&#39;loggers&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;simple&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;level&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;DEBUG&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;handlers&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;console&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;propagate&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span> <span class="token comment"># 将日志,向上输出, 这里输出到root</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token string">&#39;root&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment"># 会重复输出, 一般不需要配置</span>
        <span class="token string">&#39;level&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;INFO&#39;</span><span class="token punctuation">,</span> 
        <span class="token string">&#39;handlers&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;console_err&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


logging<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dictConfig<span class="token punctuation">(</span>dict_conf<span class="token punctuation">)</span>
logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">&#39;simple&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 注意: 名称获取错, 不会报错, 会新创建一个非config里面的logger</span>
logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;debug message&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 1. simple输出fileHandler到test.log, 因为consoleHandler的等级是INFO, 所以stdout没有显示</span>
logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;info message&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1. simple输出fileHandler到test.log 2. simple输出consoleHandler到stdout</span>
logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&#39;warning message&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1. simple输出fileHandler到test.log 2. simple输出consoleHandler到stdout</span>
logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&#39;error message&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1. simple输出fileHandler到test.log 2. simple输出consoleErrHandler到stderr 3. root输出consoleErrHandler到stderr</span>
logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">&#39;critical message&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1. simple输出到test.log 2. simple输出consoleErrHandler到stderr 3. root输出consoleErrHandler到stderr</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="直接配置" tabindex="-1"><a class="header-anchor" href="#直接配置" aria-hidden="true">#</a> 直接配置</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> logging
logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token punctuation">)</span>
fileHandler <span class="token operator">=</span> logging<span class="token punctuation">.</span>FileHandler<span class="token punctuation">(</span><span class="token string">&#39;test.log&#39;</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token comment"># 创建一个handler，用于写入日志文件</span>
formatter <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;</span><span class="token punctuation">)</span>
fileHandler<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span>
fileHandler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>fileHandler<span class="token punctuation">)</span>

streamHandler <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建一个handler，用于写入日志文件</span>
streamHandler<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>
streamHandler<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>formatter<span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>streamHandler<span class="token punctuation">)</span>

logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;logger debug message&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;logger info message&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&#39;logger warning message&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&#39;logger error message&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">&#39;logger critical message&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自己的常用配置" tabindex="-1"><a class="header-anchor" href="#自己的常用配置" aria-hidden="true">#</a> 自己的常用配置</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> logging
<span class="token keyword">import</span> logging<span class="token punctuation">.</span>config
dict_conf <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;version&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token string">&#39;formatters&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;simple&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;format&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;%(name)s\\t%(asctime)s\\t%(levelname)s\\t%(message)s&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token string">&#39;handlers&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;file&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;logging.FileHandler&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;level&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;DEBUG&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;formatter&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;simple&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;filename&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;./log.log&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> 
        <span class="token string">&#39;console&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;class&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;logging.StreamHandler&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;level&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;DEBUG&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;formatter&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;simple&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;stream&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ext://sys.stdout&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> 
        <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token string">&#39;loggers&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token string">&#39;simple&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;level&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;ERROR&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;handlers&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;console&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">}</span>


logging<span class="token punctuation">.</span>config<span class="token punctuation">.</span>dictConfig<span class="token punctuation">(</span>dict_conf<span class="token punctuation">)</span>
logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">&#39;simple&#39;</span><span class="token punctuation">)</span>

logger<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">&#39;logger debug message&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">&#39;logger info message&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>warning<span class="token punctuation">(</span><span class="token string">&#39;logger warning message&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">&#39;logger error message&#39;</span><span class="token punctuation">)</span>
logger<span class="token punctuation">.</span>critical<span class="token punctuation">(</span><span class="token string">&#39;logger critical message&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://www.iteye.com/blog/wjdadi-gmail-com-1984354 https://docs.python.org/3.10/library/logging.handlers.html https://blog.csdn.net/yypsober/article/details/51800120 https://www.cnblogs.com/yyds/p/6901864.html https://www.cnblogs.com/yyds/p/6885182.html</p>`,9);function b(h,f){const a=p("ExternalLinkIcon");return l(),c("div",null,[d,n("h2",r,[u,s(),n("a",g,[s("logging"),e(a)])]),k,n("p",null,[n("a",m,[s("LogRecord"),e(a)]),s(" record也是logging的一个类LogRecord,常用的属性有name, level, pathname, lineno,msg, args, exc_info name 就是初始化logger对象时传入的名字 level 是级别 pathname 是哪个文件输出的这行日志 lineno 是行号 msg 是日志本身")]),v])}const H=o(i,[["render",b],["__file","log.html.vue"]]);export{H as default};
