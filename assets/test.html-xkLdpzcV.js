import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,a as e}from"./app-nD1Z-e8V.js";const t={},p=e(`<h1 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> test</h1><h2 id="what" tabindex="-1"><a class="header-anchor" href="#what" aria-hidden="true">#</a> what</h2><p>Manual Testing(exploratory testing): Did you check the features and experiment using them? That’s known as exploratory testing and is a form of manual To have a complete set of manual tests, all you need to do is make a list of all the features your application has, the different types of input it can accept, and the expected results.</p><p>automated testing: Automated testing is the execution of your test by a script instead of a human.</p><p>You have just seen two types of tests:</p><ol><li><p>An integration test checks that components in your application operate with each other.</p></li><li><p>A unit test checks a small component in your application.</p></li></ol><p>For example, here’s how you check that the <code>sum()</code> of the numbers (1, 2, 3) equals 6:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">assert</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;Should be 6&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will not output anything on the REPL because the values are correct.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">assert</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;Should be 6&quot;</span>
<span class="token comment">## Traceback (most recent call last):</span>
<span class="token comment">##   File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span>
<span class="token comment">## AssertionError: Should be 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Instead of testing on the REPL, you’ll want to put this into a new Python file called test_sum.py and execute it again:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">test_sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">assert</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;Should be 6&quot;</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    test_sum<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Everything passed&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you have written a <code>test case</code>, an assertion, and an entry point (the command line).</p><p>Writing tests in this way is okay for a simple check, but what if more than one fails? This is where <code>test runners</code> come in.</p><h2 id="test-runners" tabindex="-1"><a class="header-anchor" href="#test-runners" aria-hidden="true">#</a> test runners</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## test_file.py</span>
<span class="token comment">## Our code to be tested</span>
<span class="token keyword">class</span> <span class="token class-name">Rectangle</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width
        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height
 
    <span class="token keyword">def</span> <span class="token function">get_area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>width <span class="token operator">*</span> self<span class="token punctuation">.</span>height
 
    <span class="token keyword">def</span> <span class="token function">set_width</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> width<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width
 
    <span class="token keyword">def</span> <span class="token function">set_height</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height
 
<span class="token comment">## The test function to be executed by PyTest</span>
<span class="token keyword">def</span> <span class="token function">test_normal_case</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    rectangle <span class="token operator">=</span> Rectangle<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">assert</span> rectangle<span class="token punctuation">.</span>get_area<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&quot;incorrect area&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>the we can run:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python <span class="token parameter variable">-m</span> pytest test_file.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>PyTest’s</code> test discovery procedure will be able to find your tests functions with names prefixed with <code>test</code>. And some IDE will provide run button at the line of <code>test</code> function.</p><p>refs: https://realpython.com/python-testing/ https://machinelearningmastery.com/a-gentle-introduction-to-unit-testing-in-python/</p>`,20),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","test.html.vue"]]);export{d as default};
