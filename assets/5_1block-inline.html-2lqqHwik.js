import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{o,c as a,a as l}from"./app-7knaTE3M.js";const i={},t=l('<h2 id="常规流中的块元素和内联元素" tabindex="-1"><a class="header-anchor" href="#常规流中的块元素和内联元素" aria-hidden="true">#</a> 常规流中的块元素和内联元素</h2><h3 id="块元素" tabindex="-1"><a class="header-anchor" href="#块元素" aria-hidden="true">#</a> 块元素</h3><p>块元素是垂直布局</p><p>块元素默认有边距. 边距塌陷(margin collapseing): 如果两个块元素边距相邻, 则大的边距会吃掉小的边距, 总边距是去较大的, 而不是两者相加.</p><p>默认情况下，块元素将占用内联方向的所有空间，既水平方向填满。</p><h3 id="内联元素" tabindex="-1"><a class="header-anchor" href="#内联元素" aria-hidden="true">#</a> 内联元素</h3><p>内联元素是水平布局 线条框(line boxe): 内联元素每一行. 无法直接定位这些框 线条框中的最高内联元素空值线条框的高度.</p><p>参考: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout/Block_and_inline_layout_in_normal_flow</p><h2 id="溢出的处理overflow" tabindex="-1"><a class="header-anchor" href="#溢出的处理overflow" aria-hidden="true">#</a> 溢出的处理overflow</h2><p>控制当内容超出元素的尺寸限制时的显示方式</p><ol><li>visible（默认值）：内容会在元素框之外可见</li><li>hidden：内容会被裁剪，超出元素边界的部分将不可见</li><li>scroll：内容会被裁剪，同时会显示滚动条</li><li>auto：由浏览器决定如何处理溢出内容。如果内容超出元素边界，浏览器会根据需要自动显示滚动条。</li></ol><p>参考: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout/Flow_layout_and_overflow</p><h2 id="浮动bfc-block-formatting-context" tabindex="-1"><a class="header-anchor" href="#浮动bfc-block-formatting-context" aria-hidden="true">#</a> 浮动BFC(block formatting context)</h2><p>参考: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flow_layout/Introduction_to_formatting_contexts</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><p>https://developer.mozilla.org/en-US/docs/Web/CSS/display#css_flow_layout_display_block_display_inline</p>',16),r=[t];function n(d,c){return o(),a("div",null,r)}const _=e(i,[["render",n],["__file","5_1block-inline.html.vue"]]);export{_ as default};
