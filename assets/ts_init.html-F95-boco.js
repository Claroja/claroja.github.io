import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,e as o}from"./app-XqA98pG8.js";const a={},e=o(`<h1 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> init</h1><h2 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置" aria-hidden="true">#</a> 环境配置</h2><ol><li>安装node.js</li><li><code>npm i -g typescript</code></li></ol><h2 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h2><p><code>tsc</code>命令可以将ts文件转换为任意版本的js, 比如es3,es6等</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>tsc xxx.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译文件时，使用 -w 指令后</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tsc xxx.ts <span class="token parameter variable">-w</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="工程配置" tabindex="-1"><a class="header-anchor" href="#工程配置" aria-hidden="true">#</a> 工程配置</h2><p>主要功能是自动编译<code>ts</code>文件, 并自动运行编译好的<code>js</code>文件</p><ol><li>创建工程<code>npm --init</code></li><li>创建tsc配置文件<code>tsc --init</code></li><li>安装<code>npm install --save-dev nodemon</code></li><li>更改<code>package.json</code>中的<code>scripts</code>, 添加:<code>&quot;build&quot;: &quot;tsc -w | nodemon ./hello.js&quot;</code></li><li>执行<code>npm run build</code></li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ts&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;nodemon&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.0.15&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsc -w | nodemon ./hello.js&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动编译整个项目" tabindex="-1"><a class="header-anchor" href="#自动编译整个项目" aria-hidden="true">#</a> 自动编译整个项目</h2><p>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。 但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 <code>tsconfig.json</code></p><table><thead><tr><th>属性</th><th>描述</th><th>样例</th></tr></thead><tbody><tr><td>include</td><td>需要编译的目录</td><td><code>&quot;include&quot;:[&quot;src/**/*&quot;, &quot;tests/**/*&quot;]</code></td></tr><tr><td>exclude</td><td>需要排除的目录</td><td><code>&quot;exclude&quot;: [&quot;./src/hello/**/*&quot;]</code></td></tr><tr><td>extends</td><td>继承的配置文件, 默认已经排除了node_modules文件夹</td><td><code>&quot;extends&quot;: &quot;./base&quot;</code>继承base.json中的配置信息</td></tr><tr><td>files</td><td>需要编译的文件(文件少的时候使用)</td><td><code>&quot;files&quot;: [&quot;core.ts&quot;,&quot;sys.ts&quot;,]</code></td></tr><tr><td>compilerOptions: 在compilerOptions中包含多个子选项，用来完成对编译的配置</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>compilerOptions中的属性</th><th>描述</th><th>样例</th></tr></thead><tbody><tr><td>target</td><td>设置ts代码编译的目标版本, 可选值: ES3（默认）、ES5、ES6/ES2015等</td><td><code>&quot;compilerOptions&quot;: {&quot;target&quot;: &quot;ES6&quot;}</code></td></tr><tr><td>lib</td><td>标准库, 可选值: ES5、ES6/ES2015等</td><td><code>&quot;compilerOptions&quot;: {&quot;lib&quot;: [&quot;ES6&quot;, &quot;DOM&quot;]}</code></td></tr><tr><td>module</td><td>设置编译后代码使用的模块化系统, 可选CommonJS、ES2020等</td><td><code>&quot;compilerOptions&quot;: {&quot;module&quot;: &quot;CommonJS&quot;}</code></td></tr><tr><td>outDir</td><td>编译后文件的所在目录,默认相同文件夹</td><td><code>&quot;compilerOptions&quot;: {&quot;outDir&quot;: &quot;dist&quot;}</code></td></tr><tr><td>outFile</td><td>所有的文件编译为一个js文件</td><td><code>&quot;compilerOptions&quot;: {&quot;outFile&quot;: &quot;dist/app.js&quot;}</code></td></tr><tr><td>allowJs</td><td>是否对js文件编译, 默认false</td><td><code>&quot;compilerOptions&quot;: {&quot;allowJs&quot;: true}</code></td></tr><tr><td>checkJs</td><td>是否对js文件进行检查, 按照ts语法, 默认false</td><td><code>&quot;compilerOptions&quot;: {&quot;checkJs&quot;: true}</code></td></tr><tr><td>removeComments</td><td>是否删除注释, 默认值：false</td><td></td></tr><tr><td>noEmit</td><td>不对代码进行编译, 默认值：false</td><td></td></tr><tr><td>noEmitOnError</td><td>有错误的情况下不进行编译, 默认值：false</td><td></td></tr><tr><td>rootDir</td><td>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录</td><td><code>&quot;compilerOptions&quot;: {&quot;rootDir&quot;: &quot;./src&quot;}</code></td></tr></tbody></table><h2 id="严格检查" tabindex="-1"><a class="header-anchor" href="#严格检查" aria-hidden="true">#</a> 严格检查</h2><ul><li>strict 启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查, 既下面的几个都开启</li><li>alwaysStrict 总是以严格模式对代码进行编译</li><li>noImplicitAny 禁止隐式的any类型</li><li>noImplicitThis 禁止类型不明确的this</li><li>strictBindCallApply 严格检查bind、call和apply的参数列表</li><li>strictFunctionTypes 严格检查函数的类型</li><li>strictNullChecks 严格的空值检查</li><li>strictPropertyInitialization 严格检查属性是否初始化</li></ul><h2 id="样例" tabindex="-1"><a class="header-anchor" href="#样例" aria-hidden="true">#</a> 样例</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2015&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2015&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;noEmitOnError&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;./src/**/*&quot;</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),i=[e];function d(p,c){return s(),n("div",null,i)}const u=t(a,[["render",d],["__file","ts_init.html.vue"]]);export{u as default};
