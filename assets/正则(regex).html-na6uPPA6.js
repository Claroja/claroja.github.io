import{_ as p}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as c,c as i,a as n,b as s,d as e,e as a}from"./app-A10JnHE0.js";const l={},d=a(`<h1 id="正则-regex" tabindex="-1"><a class="header-anchor" href="#正则-regex" aria-hidden="true">#</a> 正则(regex)</h1><h2 id="正则字符" tabindex="-1"><a class="header-anchor" href="#正则字符" aria-hidden="true">#</a> 正则字符</h2><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>配置除换行符(<code>\\n</code>)以外的字符, <code>re.search(&#39;1.3&#39;, &#39;foo123bar&#39;) # 123 </code></td></tr><tr><td><code>\\w</code></td><td>匹配字母或数字或下划线或汉字, <code>\\W</code>是取反, <code>re.search(&#39;ba[artz]&#39;, &#39;foobarqux&#39;) # bar</code></td></tr><tr><td><code>\\s</code></td><td>匹配空白字符(空格,制表符<code>\\t</code>,换行符<code>\\n</code>), <code>\\S</code>是取反</td></tr><tr><td><code>\\d</code></td><td>匹配数字<code>[0-9]</code>, <code>\\D</code>是取反</td></tr><tr><td><code>\\b</code></td><td>匹配单词的开始或结束, 可以理解为匹配非字符和数字(空格, 制表符<code>\\t</code>,换行符<code>\\n</code>,普通符号如<code>.</code>), <code>\\B</code>是取反</td></tr><tr><td><code>^</code></td><td>多行模式下匹配字符串的开始, 多行模式下可以理解位开始的<code>\\n</code></td></tr><tr><td><code>$</code></td><td>单行模式下匹配字符串的结束, 多行模式下可以理解为结尾的<code>\\n</code></td></tr></tbody></table><p>例子:</p><ul><li><p><code>\\ba\\w*\\b</code>匹配以字母a开头的单词——先是某个单词开始处(<code>\\b</code>)，然后是字母<code>a</code>,然后是任意数量的字母或数字(<code>\\w*</code>)，最后是单词结束处(<code>\\b</code>)。</p></li><li><p><code>^</code>与<code>$</code></p><ul><li><p>单行模式下(整个文本当成一个输入)</p><p>比如, 一个网站如果要求你填写的密码号必须为5位数字时，可以使用：<code>^\\d{5}$</code>. 如果不使用<code>^</code>和<code>$</code>的话，对于<code>\\d{5}</code>而言，使用这样的方法就只能保证字符串里包含5连续位数字，而不是整个字符串就是5位数字。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;^\\d{5}$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12345&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># match 严格的5位数字</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;^\\d{5}$&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># not match  如果是6位则不匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\d{5}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># match 不加\`^\`和\`$\`, 则只要包含5位就可以</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>多行模式下(先对文本按行切分, 每一行当成一个输入) <code>^</code>和<code>$</code>的意义就变成了匹配行的开始处和结束处。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;^c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a\\nb\\nc&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># not match, 在单行模式下(默认), \`^c\`是指整个字符串(字符串中包含换行)的开始.</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?m)^c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a\\nb\\nc&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># match, 多行模式下, \`^c\`既可以指整个字符串的开始, 也可以指行的开始(\`\\n\`), 所以可以匹配.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>.</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fooxbar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># fooxbar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo*bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo*bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None 默认情况下\`.\`不能匹配\`\\n\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>\\b</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;foo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo bar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;foo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo.bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;foo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo bar baz&#39;</span><span class="token punctuation">)</span> <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo(bar)baz&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bbar\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobarbaz&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="数量限定符" tabindex="-1"><a class="header-anchor" href="#数量限定符" aria-hidden="true">#</a> 数量限定符</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>*</code></td><td>重复0次或多次, 贪婪</td></tr><tr><td><code>+</code></td><td>重复1次或多次, 贪婪</td></tr><tr><td><code>?</code></td><td>重复0次或1次, 贪婪</td></tr><tr><td><code>*?</code></td><td>重复0次或多次, 懒惰</td></tr><tr><td><code>+?</code></td><td>重复1次或多次, 懒惰</td></tr><tr><td><code>??</code></td><td>重复0次或1次, 懒惰</td></tr><tr><td><code>{n}</code></td><td>重复n次</td></tr><tr><td><code>{n,}</code></td><td>重复n次或多次</td></tr><tr><td><code>{n,m}</code></td><td>重复n到m次</td></tr><tr><td><code>{,}</code></td><td>任意次</td></tr></tbody></table><p>例子:</p><ul><li><p><code>*</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-*bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foobar 零次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-*bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo-bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo-bar 一次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-*bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo--bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo--bar 两次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo.*bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;# foo $qux@grault % bar #&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 任意次匹配任意字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>+</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-+bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None 零次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-+bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo-bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo-bar 一次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-+bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo--bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo--bar 两次匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>?</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-?bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foobar 零次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-?bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo-bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo-bar 一次匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo-?bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo--bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None 两次匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>*?,+?,??</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;.*&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%&lt;foo&gt; &lt;bar&gt; &lt;baz&gt;%&#39;</span><span class="token punctuation">)</span> <span class="token comment"># &lt;foo&gt; &lt;bar&gt; &lt;baz&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正则表达式<code>&lt;.*&gt;</code>的含义:</p><ol><li><code>&lt;</code>匹配一个<code>&lt;</code>字符</li><li><code>.*</code>一系列的字符</li><li><code>&gt;</code>匹配一个<code>&gt;</code>字符 但是<code>&gt;</code>具体指哪一个呢?有三种情况:</li><li><code>foo</code>字符串后面的</li><li><code>bar</code>字符串后面的</li><li><code>baz</code>字符串后面的</li></ol><p>由于<code>*</code>是贪婪的, 所以将匹配最长的字符串, 如果想匹配最短的字符串, 则可以使用<code>*?</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;.*?&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%&lt;foo&gt; &lt;bar&gt; &lt;baz&gt;%&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo</span>
<span class="token comment">## 同样的道理也使用+和?</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;.+&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%&lt;foo&gt; &lt;bar&gt; &lt;baz&gt;%&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;foo&gt; &lt;bar&gt; &lt;baz&gt;</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;&lt;.+?&gt;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;%&lt;foo&gt; &lt;bar&gt; &lt;baz&gt;%&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;foo&gt;</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;ba?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baaaa&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># ba</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;ba??&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;baaaa&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># b</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="逻辑或" tabindex="-1"><a class="header-anchor" href="#逻辑或" aria-hidden="true">#</a> 逻辑或</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td><code>[]</code></td><td>中括号内部任意一位, <code>[0-9]</code> 匹配0到9的任意一个数字，等同于\\d, <code>[a-z0-9A-Z_]</code> 匹配任意字符，等同于\\w如果不考虑中文</td></tr><tr><td><code>[^x]</code></td><td>匹配除<code>x</code>以外的任意字符, <code>[^aeiou]</code>匹配除了aeiou这几个字母以外的任意字符, <code>^[^a]</code> 匹配非a开头的字符</td></tr><tr><td>\`A</td><td>B\`</td></tr></tbody></table><ul><li><p><code>[]</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;ba[artz]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobarqux&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># bar []中只代表一个字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;ba[artz]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobazqux&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># baz []中只代表一个字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[)*+|]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123*456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># * \`*\`在\`[]\`中失效</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[)*+|]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123+456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># + \`+\`在\`[]\`中失效, 在正则中有特殊含义的符号, 在\`[]\`中都会失效</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[ab\\]cd]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo[1]&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># ] \`]\`有特殊含义, 所以使用转义字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[a-z]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;FOObar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 使用\`-\`表示连续</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[0-9][0-9]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo123bar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 12</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[0-9a-fA-f]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;--- a0 ---&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># a 十六进制</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[-abc]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123-456&#39;</span><span class="token punctuation">)</span> <span class="token comment"># - 匹配-本身</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[abc-]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123-456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># - 匹配-本身</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[ab\\-c]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123-456&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># - 如果-有特殊含义, 比如表示连续, 则需要使用转义字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[^0-9]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;12345foo&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># f 当^在[]的开头 f 匹配非0-9的字符</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;[#:^]&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo^bar:baz#qux&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># ^ 当^不在[]的开头, 则就表示^本身</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h2><h3 id="分组定义" tabindex="-1"><a class="header-anchor" href="#分组定义" aria-hidden="true">#</a> 分组定义</h3><p>分组是用圆括号“()”括起来的正则表达式，匹配出的内容就表示一个分组。</p><ol><li>序号分组<code>(exp)</code>: 把括号内的正则作为一个分组，系统自动分配组号，可以通过分组号引用该分组, 比如 <code>\\1</code>,<code>\\2</code>. (在vscode中引用使用<code>$</code>,如<code>$1</code>, <code>$2</code>)</li><li>命名分组<code>(?P&lt;name&gt;exp)</code>: 定义一个命名分组，系统为该分组分配分组号，可以通过分组名或分组号引用该分组；</li><li>不捕获分组<code>(?:exp)</code> ：定义一个不捕获分组，该分组只在当前位置匹配文本，在该分组之后，无法引用该分组，因为该分组没有分组名，没有分组号，也不会占用分组编号；</li></ol><h3 id="分组引用" tabindex="-1"><a class="header-anchor" href="#分组引用" aria-hidden="true">#</a> 分组引用</h3><p>引用分组的目的是对重复出现的文本进行匹配，注意，不是出现重复的模式，而是出现重复的文本。由于分组有编号和名称，因此，可以通过名称和编号来引用前面已经出现的分组。</p><p>正则表达式中，可以通过分组名或分组号来引用：</p><ol><li><code>\\n</code>：使用分组的编号来引用分组，分组按照正则表达式中出现的顺序编号1、2、3、... <code>(\\w+)\\1</code>等价于<code>(\\w+)(\\w+)</code>, 也就是是<code>\\1</code>表示第一个分组<code>(\\w+)</code></li><li><code>(?P=name)</code>：引用名称为name的分组, <code>(?P&lt;word&gt;\\w+)(?P=word)</code>等价于<code>(\\w+)(\\w+)</code>, 也就是<code>(?P=word)</code>表示组名为<code>word</code>的<code>(?P&lt;word&gt;\\w+)</code></li></ol><h3 id="分组序号" tabindex="-1"><a class="header-anchor" href="#分组序号" aria-hidden="true">#</a> 分组序号</h3><p>在正则表达式中，分组编号是自动进行的。当使用圆括号表示分组时，从正则表达式的左边开始看，看到的第一个左括号 “(” 表示第一个分组，第二个 &quot;(&quot; 表示第二个分组，依次类推，需要注意的是，有一个隐含的全局分组（分组编号是0），就是整个正则表达式。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;abcabcabcabcdedede&#39;</span>
result <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;((abc)+)((de)+)&#39;</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># abcabcabcabc</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># abc</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># dedede</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># de</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="python引用分组结果" tabindex="-1"><a class="header-anchor" href="#python引用分组结果" aria-hidden="true">#</a> python引用分组结果</h3><p>在python中, 正则表达式匹配的结果, 是<code>re.Match</code>对象, 需要通过<code>group()</code>方法来获取最终的字符串.</p><ol><li><p>group()</p><p>获取序号分组的结果:</p><ul><li><code>group()</code>默认参数是<code>0</code>, 即<code>group(0)</code>就是匹配正则表达式整体结果</li><li><code>group(1)</code> 列出第一个括号匹配部分，<code>group(2)</code> 列出第二个括号匹配部分，<code>group(3)</code> 列出第三个括号匹配部分。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
a <span class="token operator">=</span> <span class="token string">&quot;123abc456&quot;</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&quot;([0-9]*)([a-z]*)([0-9]*)&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment">#123abc456,返回整体</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&quot;([0-9]*)([a-z]*)([0-9]*)&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment">#123</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&quot;([0-9]*)([a-z]*)([0-9]*)&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">#abc</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&quot;([0-9]*)([a-z]*)([0-9]*)&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">#456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>groupdict()</p><p>获取命名分组的结果</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;(?P&lt;user&gt;\\w+)@(?P&lt;website&gt;\\w+)\\.(?P&lt;extension&gt;\\w+)&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;myname@hackerrank.com&#39;</span><span class="token punctuation">)</span>
m<span class="token punctuation">.</span>groupdict<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token string">&#39;website&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;hackerrank&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;myname&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;extension&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;com&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>groups()</p><p>它返回一个包含所有匹配子群的元组。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&quot;(\\d+)\\.(\\d+)&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;24.1632&quot;</span><span class="token punctuation">)</span>
m<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">## (&#39;24&#39;, &#39;1632&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h3><ol><li><p>有条件的筛选</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 将整个字符串用字符串某个部分替换</span>
re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;\\d\\d(\\d)\\d&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;\\1&#39;</span> <span class="token punctuation">,</span><span class="token string">&#39;2131&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>字符串对换位置</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
<span class="token comment">## 替换时间格式 01/11/2021 替换成 2021/01/11</span>
s <span class="token operator">=</span> <span class="token string">&quot;today is 09-12-2021&quot;</span>
day <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;(\\d{2})-(\\d{2})-(\\d{4})&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;\\3-\\2-\\1&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token comment"># today is 2021-12-09</span>

<span class="token comment">## 也可以用g&lt;3&gt;-g&lt;2&gt;-g&lt;1&gt;</span>
day2 <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;(\\d{2})-(\\d{2})-(\\d{4})&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;g&lt;3&gt;-g&lt;2&gt;-g&lt;1&gt;&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token comment"># today is 2021-12-09</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考:</h3>`,29),u={href:"https://blog.csdn.net/chr1991/article/details/80945455",target:"_blank",rel:"noopener noreferrer"},r=a(`<h2 id="零宽断言" tabindex="-1"><a class="header-anchor" href="#零宽断言" aria-hidden="true">#</a> 零宽断言</h2><ul><li><p>Lookahead</p><p><code>(?=&lt;lookahead_regex&gt;)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?=[a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo \`(?=[a-z]) \`表示foo后面必须跟[a-z]字母才满足要求, 然后返回foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?=[a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo123&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo([a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foob</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>(?!&lt;lookahead_regex&gt;)</code>取反</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?=[a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?![a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?=[a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo123&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;foo(?![a-z])&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo123&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># foo</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>lookbehind</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?&lt;=foo)bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># bar</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?&lt;=qux)bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>(?&lt;!&lt;lookbehind_regex&gt;)</code>取反</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?&lt;!foo)bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(?&lt;!qux)bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># bar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="转义" tabindex="-1"><a class="header-anchor" href="#转义" aria-hidden="true">#</a> 转义</h2><p>转义字符<code>\\</code>有两个作用:</p><ol><li>将特殊的字符变成普通字符, 比如表字符串的单引号<code>&#39;</code>和双引号<code>&quot;</code>, 以及转义字符<code>\\</code>本身</li><li>给字符赋予特殊含义</li></ol><h3 id="转换为普通字符" tabindex="-1"><a class="header-anchor" href="#转换为普通字符" aria-hidden="true">#</a> 转换为普通字符</h3><p>一些字符是python解释器当成的特殊的字符, 比如单引号<code>&#39;</code>, 如果在字符串里直接使用会报错.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;This string contains a single quote (&#39;</span><span class="token punctuation">)</span> character<span class="token punctuation">.</span>&#39;<span class="token punctuation">)</span>
<span class="token comment">## SyntaxError: invalid syntax</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时, 可以使用<code>\\</code>来讲特殊字符变为普通字符, <code>\\</code>被称为转义(escape)</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;This string contains a single quote (\\&#39;) character.&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>escape</th><th>描述</th></tr></thead><tbody><tr><td><code>\\&#39;</code></td><td>将字符串单引号变成普通字符, <code>print(&#39;\\&#39;&#39;) # &#39;</code></td></tr><tr><td><code>\\&quot;</code></td><td>将字符串双引号变成普通字符, <code>print(&quot;\\&quot;&quot;) # &quot;</code></td></tr><tr><td><code>\\&lt;newline&gt;</code></td><td>python编辑器中多行输入</td></tr><tr><td><code>\\\\</code></td><td>将转义字符变成普通字符, <code>print(&quot;\\\\&quot;) # \\</code></td></tr></tbody></table><p><strong>注意</strong><code>\\&lt;newline&gt;</code>的一个坑</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span>\\
        <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span>  <span class="token comment"># [&quot;ab&quot;] 没有加逗号会自动合并成一个字符串</span>
list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> \\
        <span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span>  <span class="token comment"># [&quot;a&quot;,&quot;b&quot;]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子:</p><ol><li><code>\\&lt;newline&gt;</code></li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>&#39;a\\
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> b\\
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> c&#39;<span class="token punctuation">)</span>
<span class="token comment">## abc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="赋予特殊含义" tabindex="-1"><a class="header-anchor" href="#赋予特殊含义" aria-hidden="true">#</a> 赋予特殊含义</h3><table><thead><tr><th>Escape Sequence</th><th>“Escaped” Interpretation</th></tr></thead><tbody><tr><td><code>\\a</code></td><td>ASCII Bell (BEL) character, <code>print(&quot;\\a&quot;)</code></td></tr><tr><td><code>\\b</code></td><td>ASCII Backspace (BS) character, <code>print(&quot;Hello \\b World!&quot;) # Hello \b World!</code></td></tr><tr><td><code>\\f</code></td><td>ASCII Formfeed (FF) character, <code>print(&quot;Hello \\f World!&quot;) # Hello World!</code></td></tr><tr><td><code>\\n</code></td><td>ASCII Linefeed (LF) character, <code>print(&quot;Hello \\n World!&quot;)</code></td></tr><tr><td><code>\\N{&lt;name&gt;</code>}</td><td>Character from Unicode database with given <code>&lt;name&gt;</code></td></tr><tr><td><code>\\r</code></td><td>ASCII Carriage Return (CR) character, <code>print(&quot;Hello \\r World!&quot;)</code></td></tr><tr><td><code>\\t</code></td><td>ASCII Horizontal Tab (TAB) character, <code>print(&quot;Hello \\t World!&quot;) # Hello World!</code></td></tr><tr><td><code>\\uxxxx</code></td><td>Unicode character with 16-bit hex value xxxx</td></tr><tr><td><code>\\Uxxxxxxxx</code></td><td>Unicode character with 32-bit hex value xxxxxxxx</td></tr><tr><td><code>\\v</code></td><td>ASCII Vertical Tab (VT) character, <code>print(&quot;Hello \\v World!&quot;) # Hello \v World!</code></td></tr><tr><td><code>\\ooo</code></td><td>Character with octal value ooo, <code>print(&quot;\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41&quot;) # Hello World!</code></td></tr><tr><td><code>\\xhh</code></td><td>Character with hex value hh, <code>print(&quot;\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21&quot;) # Hello World!</code></td></tr></tbody></table><p>例子:</p><ol><li><code>\\ooo</code>八进制ascii码表示 也就是说, 每位小于8的组合, 加上转义字符都有特殊含义: 八进制ascii|十六进制ascii|十进制ascii|ascii --|--|--|-- <code>&#39;\\0&#39;</code>|<code>&#39;\\x00&#39;</code>|<code>0</code>|<code>null</code><code>&#39;\\1&#39;</code>|<code>&#39;\\x01&#39;</code>|<code>1</code>|<code>soh</code><code>&#39;\\11&#39;</code>|<code>&#39;\\x09&#39;</code>|<code>9</code>|<code>&#39;\\t&#39;</code><code>&#39;\\111&#39;</code>|<code>&#39;\\x49&#39;</code>|<code>73</code>|<code>&#39;I&#39;</code> 注意超过八进制的计数范围的数字不会进行转码</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\97&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># \\97</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\79&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 9 # \`\\7\`被当成八进制进行了转码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意, 可以在python console中直接观察输入字符串后, 解释器的处理行为:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;\\1&#39;</span>  <span class="token comment"># &#39;\\x01&#39; 直接转换成字节</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 空, 因为\`\\x01\`没有办法显示</span>
<span class="token string">&quot;\\\\1&quot;</span>  <span class="token comment"># &#39;\\\\1&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\1&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># \\1</span>
<span class="token string">&quot;\\t&quot;</span> <span class="token comment"># &#39;\\t&#39; 转换成字节, 并用ascii码表示</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 制表符</span>
<span class="token string">&quot;\\d&quot;</span>  <span class="token comment"># &#39;\\\\d&#39; 转换成字节码, 由于\`\\d\`不是特殊含义字符, 所以字节码中先用\`\\\\\`表示一个\`\\\`, 然后ascii码表示字节</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\d&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># \\d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="raw-string" tabindex="-1"><a class="header-anchor" href="#raw-string" aria-hidden="true">#</a> raw string</h3><p>字符串前以<code>r</code>或<code>R</code>开头表示该字符串内的<code>\\</code>不进行解释.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## foo</span>
<span class="token comment">## bar</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r&#39;foo\\nbar&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## foo\\nbar</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;foo\\\\bar&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## foo\\bar</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">R&#39;foo\\\\bar&#39;</span><span class="token punctuation">)</span>
<span class="token comment">## foo\\\\bar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="应用-1" tabindex="-1"><a class="header-anchor" href="#应用-1" aria-hidden="true">#</a> 应用</h3><p>在正则表达式中, 定义了一些可以赋予特殊含义的转义字符如:</p><ol><li><code>\\w</code>表示字符</li><li><code>\\s</code>表示空白</li><li><code>\\d</code>表示数字</li><li><code>\\b</code>表示单词的开始和结束</li><li><code>\\1</code>表示分组</li></ol><p>其中1,2,3使用普通字符串就可以表示, 但是4,5中的<code>\\b</code>和<code>\\1</code>在字符串中有特殊含义, 会先被python解释器转义.这时就需要使用到<code>raw string</code>或者给<code>\\</code>前加<code>\\</code>进行转义, 既<code>\\\\b</code>和<code>\\\\1</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment"># a</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\w&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment"># a</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a b&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 空</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\s&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a b&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 空</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\bfoo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None \`\\b\`被转义成了&#39;\\x08&#39;所以无法正常匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\bfoo\\b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foo , 另一种解法\`re.search(&#39;\\\\bfoo\\\\b&#39;,&#39;bar.foo&#39;)\`</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(a)\\1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span> <span class="token comment"># None \`\\1\`被转义成了\`\\x01\`所以正则无法匹配</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;(a)\\1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span> <span class="token comment"># aa, 另一种解法\`re.search(r&#39;(a)\\\\1&#39;,&#39;aa&#39;)\`</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>建议在regex中如果遇到了<code>\\</code>就使用raw string, 或者无脑对所有字符串都使用raw string, 因为不转义的string和raw string也是一样的.</strong></p><p>一个小问题, 看是不是能真正理解字符串的转义:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\167&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token comment"># a 等价re.search(&#39;\\w&#39;, &#39;abc&#39;), 因为\`\\\\\`被python解释器转义为\`\\\`, 而\`\\167\`是ascii码\`w\`八进制表示, 下面的同理:</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\163&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a b&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 空</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\144&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;\\\\\\142foo\\\\\\142&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar.foo&#39;</span><span class="token punctuation">)</span> <span class="token comment"># foo</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;(a)\\\\\\61&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;aa&#39;</span><span class="token punctuation">)</span> <span class="token comment"># aa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://realpython.com/python-data-types/#strings</p><h2 id="模式-flag" tabindex="-1"><a class="header-anchor" href="#模式-flag" aria-hidden="true">#</a> 模式(flag)</h2><p>在正则表达式之前加上<code>(?&lt;flags&gt;)</code>可以设置不同模式, 比如多行, 忽略大小写等</p><table><thead><tr><th>Letter</th><th>写法</th><th>re简写</th><th>re全称</th></tr></thead><tbody><tr><td>a</td><td><code>(?a)</code></td><td>re.A</td><td>re.ASCII</td></tr><tr><td>i</td><td><code>(?i)</code></td><td>re.I</td><td>re.IGNORECASE</td></tr><tr><td>L</td><td><code>(?L)</code></td><td>re.L</td><td>re.LOCALE</td></tr><tr><td>m</td><td><code>(?m)</code></td><td>re.M</td><td>re.MULTILINE</td></tr><tr><td>s</td><td><code>(?s)</code></td><td>re.S</td><td>re.DOTALL</td></tr><tr><td>u</td><td><code>(?u)</code></td><td>re.U</td><td>re.UNICODE</td></tr><tr><td>x</td><td><code>(?x)</code></td><td>re.X</td><td>re.VERBOSE</td></tr></tbody></table><h2 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> python</h2><p>python中的<code>re</code>模块.</p><h3 id="匹配" tabindex="-1"><a class="header-anchor" href="#匹配" aria-hidden="true">#</a> 匹配</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 匹配到一个既结束, 返回match对象. 类似的有re.match(), 是从字符串的开头进行匹配, 相当于re.search(&quot;^...&quot;,&quot;string&quot;)</span>
re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 匹配所有, 返回元素是字符串的列表. 类似的有re.finditer, 返回的是迭代器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token punctuation">)</span> 替换
re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> 切分
re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 变异正则表达式<span class="token punctuation">,</span> 可以进行复用
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多行模式" tabindex="-1"><a class="header-anchor" href="#多行模式" aria-hidden="true">#</a> 多行模式</h2><p>Python 的 re 模块内置函数几乎都有一个 flags 参数, 其中有两个模式：单行（re.DOTALL, 或者re.S）和多行（re.MULTILINE, 或者re.M）模式。</p><p>单行模式突破换行符 \\n 的阻碍，将匹配视野扩大到整个字符串 多行模式实现换行符 \\n 的分隔，将匹配视野缩小到一行之内，并且按行分别匹配。</p><h3 id="多行单行的概念" tabindex="-1"><a class="header-anchor" href="#多行单行的概念" aria-hidden="true">#</a> 多行单行的概念</h3><p>新建一个文件，名字叫 a.txt ，内容是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cat
dog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>用文本编辑器打开，看到的是两行文字，每行有三个字符, 是个二维的表示. 文件的保存形式只能是一维的字节流，之所以能让编辑器表示为二维形状，都是因为字节流中包含了换行符。 用 xxd 命令看下这个 a.txt 文件的二进制表达：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ xxd a
0000000: <span class="token number">6361</span> 740a 646f 670a                      cat.dog.                                   g.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是文件 a.txt 真实保存的形式，0a 就是换行符，在编程语言里用 \\n 表示</p><p>结论：一段多行文本，尽管在文本编辑器中显示为二维的形状，但是在正则表达式解析器看来，文件是一维的字符串。在碰到包含换行符的字符串时，有多种匹配模式，分别能得到不同的结果。</p><h3 id="普通模式" tabindex="-1"><a class="header-anchor" href="#普通模式" aria-hidden="true">#</a> 普通模式</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&#39;This is the first line.\\nThis is the second line.\\nThis is the third line.&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
This is the first line.
This is the second line.
This is the third line.
&quot;&quot;&quot;</span>

<span class="token keyword">import</span> re
p <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;This.*line\\.&#39;</span> <span class="token punctuation">,</span>a<span class="token punctuation">)</span> 
p<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token string">&#39;This is the first line.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>普通模式下，点号（.）不能匹配换行符，匹配动作遇到换行符即停止。即使是默认的贪婪（greedy）模式，仍然在第一行的结尾初停止了匹配。</p><h3 id="单行模式" tabindex="-1"><a class="header-anchor" href="#单行模式" aria-hidden="true">#</a> 单行模式</h3><p>当使用 re.DOTALL 时，点号将同时匹配换行符，实现了跨行匹配。匹配结果里包含了换行符 \\n 和 全部的三行。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>q <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&#39;This.*line\\.&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>
q<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token string">&#39;This is the first line.\\nThis is the second line.\\nThis is the third line.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论： 单行模式下，点号（.）也能匹配换行符，多行文本被当作一行匹配。</p><h3 id="多行模式-1" tabindex="-1"><a class="header-anchor" href="#多行模式-1" aria-hidden="true">#</a> 多行模式</h3><p>找出 所有 以 This 开头，以 line 结尾的行。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token string">&#39;This is the first line.\\nThis is the second line.\\nThis is the third line.&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
This is the first line.
This is the second line.
This is the third line.
&quot;&quot;&quot;</span>
<span class="token keyword">import</span> re
re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;^This.*line\\.$&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
[]
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配结果为空的原因是：从 上一节 我们知道，点号不匹配换行符，最多只能匹配到第一个 line，但是第一个 line 后面并没有行尾符 $，假如我们改用 单行模式</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;^This.*line\\.$&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
[&#39;This is the first line.\\nThis is the second line.\\nThis is the third line.&#39;]
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>匹配模式中的 line 就匹配到了第三个line，结果就是匹配出了整个字符串，但这并不是我们想要的， 因为原字符串的三行都满足匹配条件，我们希望有三条结果。</p><p>真正的原因是因为正常情况下，行首符 ^ 和行尾符 $ 仅仅匹配整个字符串的起始和结尾。为了扩大 ^ 和 $ 的匹配范围，引入了多行模式。在这种模式下：</p><ol><li>将换行符 &#39;\\n&#39; 后面的位置也看作行首，可以用 ^ 匹配</li><li>将换行符 &#39;\\n&#39; 前面的位置也看作行尾，可以用 $ 匹配</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;^This.*line\\.$&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> flags<span class="token operator">=</span>re<span class="token punctuation">.</span>MULTILINE<span class="token punctuation">)</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
[&#39;This is the first line.&#39;, &#39;This is the second line.&#39;, &#39;This is the third line.&#39;]
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结论：多行模式改变了^和 $ 符号的匹配策略，当字符串中间有 换行符 \\n 时，将字符串当作独立的多行对待</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>当需要在一个文本文件里跨行匹配时，单行和多行模式尤其有用。 单行模式和多行模式，从名字上看是互斥的，但是实际上，两者可以共存。因为它们二者分别扩展不同的匹配符：点号 . 和 ^、 $</p>`,73),k={href:"https://www.lfhacks.com/tech/python-re-single-multiline/",target:"_blank",rel:"noopener noreferrer"},m=a(`<h2 id="python方法" tabindex="-1"><a class="header-anchor" href="#python方法" aria-hidden="true">#</a> python方法</h2><h3 id="search-match" tabindex="-1"><a class="header-anchor" href="#search-match" aria-hidden="true">#</a> search-match</h3><p><code>match(pattern, string, flags=0)</code> 用正则表达式匹配字符串 成功返回匹配对象 否则返回None <code>search(pattern, string, flags=0)</code> 搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None</p><p>参数:</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>匹配的正则表达式</td></tr><tr><td>string</td><td>要匹配的字符串。</td></tr><tr><td>flags</td><td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。</td></tr></tbody></table><p>返回: <code>re.Match</code>对象, 使用<code>re.Match.group()</code>来获得最终的匹配的字符串</p><h3 id="re-match与re-search的区别" tabindex="-1"><a class="header-anchor" href="#re-match与re-search的区别" aria-hidden="true">#</a> re.match与re.search的区别</h3><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;super&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;superstition&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># (0, 5)</span>
re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&#39;super&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;insuperable&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># None</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;super&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;superstition&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># (0, 5)</span>
re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&#39;super&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;insuperable&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># (2, 7)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://www.cnblogs.com/thankcat/p/17121194.html</p><h3 id="sub" tabindex="-1"><a class="header-anchor" href="#sub" aria-hidden="true">#</a> sub</h3><p>Python 的 re 模块提供了re.sub用于替换字符串中的匹配项，sub是substitute表示替换。 语法: <code>sub(pattern, repl, string, count=0, flags=0)</code> 参数:</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pattern</td><td>该参数表示正则中的模式字符串；</td></tr><tr><td>repl</td><td>如果是字符串，则处理其中的反斜杠转义。如果是match对象，并且必须返回要使用的替换字符串</td></tr><tr><td>string</td><td>该参数表示要被处理（查找替换）的原始字符串；</td></tr><tr><td>count</td><td>可选参数，表示是要替换的最大次数，而且必须是非负整数，该参数默认为0，即所有的匹配都会被替换；</td></tr><tr><td>flags</td><td>可选参数，表示编译时用的匹配模式（如忽略大小写、多行模式等），数字形式，默认为0。</td></tr></tbody></table><h2 id="应用-2" tabindex="-1"><a class="header-anchor" href="#应用-2" aria-hidden="true">#</a> 应用</h2><ol><li>普通替换</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
<span class="token comment">#替换s中的hello为123,</span>
s <span class="token operator">=</span> <span class="token string">&quot;hello,world!!!&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token string">r&quot;123&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#123,world!!!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>分组替换</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re
<span class="token comment">## 替换时间格式 01/11/2021 替换成 2021/01/11</span>
s <span class="token operator">=</span> <span class="token string">&quot;today is 09-12-2021&quot;</span>
day <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;(\\d{2})-(\\d{2})-(\\d{4})&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;\\3-\\2-\\1&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token comment"># today is 2021-12-09</span>
<span class="token comment">## 也可以用g&lt;3&gt;-g&lt;2&gt;-g&lt;1&gt;</span>
day2 <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;(\\d{2})-(\\d{2})-(\\d{4})&#39;</span><span class="token punctuation">,</span> <span class="token string">r&#39;g&lt;3&gt;-g&lt;2&gt;-g&lt;1&gt;&#39;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token comment"># today is 2021-12-09</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>repl传函数</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39; &#39;</span><span class="token operator">+</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#首字符大写</span>
str1<span class="token operator">=</span><span class="token string">&#39;hello world ~~~~~~~~~&#39;</span>
str1<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&quot;(\\w+) (\\w+)&quot;</span><span class="token punctuation">,</span>fun<span class="token punctuation">,</span>str1<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>
<span class="token comment">## Hello World ~~~~~~~~~</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>count替换次数</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token comment">## 替换字符串中的空格为123，只替换一次</span>
s <span class="token operator">=</span> <span class="token string">&quot;We are happy&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">## We123are happy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>subn方法使用</li></ol><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 替换字符串中的空格为123</span>
s <span class="token operator">=</span> <span class="token string">&quot;We are happy&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>subn<span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> 
<span class="token comment">#(&#39;We123are123happy&#39;, 2)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考: https://www.cnblogs.com/lvhuayan/p/15260375.html</p><p>参考: https://realpython.com/regex-python/ https://realpython.com/regex-python-part-2/ https://www.jb51.net/tools/zhengze.html</p>`,26);function h(v,b){const t=o("ExternalLinkIcon");return c(),i("div",null,[d,n("p",null,[s("https://www.cnblogs.com/ljhdo/p/10678281.htm "),n("a",u,[s("本段参考"),e(t)])]),r,n("p",null,[s("参考: "),n("a",k,[s("Python 正则表达式里的单行s和多行m模式"),e(t)])]),m])}const f=p(l,[["render",h],["__file","正则(regex).html.vue"]]);export{f as default};
