
# 数据分析的流程

- name: 数据分析流程
  content: |
    1. 业务理解
    2. 数据获取
    3. 数据处理
    4. 数据分析
    5. 结果展现
  testPoint: ["记忆5个过程"]
  url: "https://claroja.github.io/数据分析_基本流程/"
  relation:

- name: 数据挖掘流程
  content: |
    CRISP-DM(cross-industry standard process for data mining)
    1. 业务理解(business understanding)
    2. 数据理解(data understanding)
    3. 数据准备(data preparation)
    4. 建立模型(modeling)
    5. 模型评估(evaluation)
    6. 模型部署(deployment)
  testPoint: ["记忆6个过程"]
  url: "https://claroja.github.io/数据分析_基本流程/"
  relation:
    in: ["数据分析流程"]

- name: EDIT数字化模型
  content: |
    1. 探索(Exploration)
    2. 诊断(Diagnosis)
    3. 指导(Instruction)
    4. 工具(tool)
  testPoint: ["记忆四个部分"]
  url: "https://claroja.github.io/数据分析_基本流程/"
  relation:
    in: ["数据分析流程"]

# BI
- name: BI
  content: |
    BI = ETL+DW+OLAP+数据可视化
    DW: 不仅引用DB数据还需要其他数据源数据
    OLAP: 联机分析处理, 对应数据仓库: DW
    DB: 保存业务系统生成的信息
    OLTP: 联机事务处理, 对应数据库: DB
  testPoint: ["记忆BI, DB, DW, OLAP, OLTP"]
  url: ""
  relation:

# 表格与表
- name: 表格与表
  content: |
    就是excel和数据库
  testPoint: []
  url: ""
  relation:

- name: 表格结构数据
  content: |
    1. 以单元格为最小的操作单位
    2. 载体EXCEL,Numbers,WPS
    3. 操作对象从小到大为: 单元格, 单元格区域, 工作表, 工作簿
  testPoint: [记忆表格结构最小的操作单位,表格结构工具有哪些,表结构操作对象从小到大有哪些]
  url: ""
  relation:
    in: ["表格与表"]

- name: 单元格
  content: |
    1. = 号表引用
    2. ! 前是工作表名
    3. A1, A表示列名, 1表示行名
    4. ：表示范围,可以理解为数组
  testPoint: ["会使用单元格引用"]
  url: ""
  relation:
    in: ["表格结构数据"]

- name: 表结构数据
  content: |
    维度与度量字段
      1. 维度字段是记录业务行为的属性, 比如订单表的`付费时间`字段是以时间视角观察交易行为
      2. 度量字段是记录业务行为的结果, `订单额`就是交易行为的结果.
    维度与事实表
      1. 维度表只包含维度字段, `订单表`既包含维度信息(`付费时间`等)
      2. 事实表既包含维度字段又包含度量字段, `商品信息表`只包含商品的属性所以是维度表, 又包含度量信息(`订单额`)所以称为事实表.
  testPoint: ["区分维度和度量字段, 维度和事实表"]
  url: ""
  relation: 
    in: ["表格与表"]

- name: 表数据连接模型
  content: |
    星型模型: 1个事实表多个维度表
    星座模型: 1个维度表多个事实表
    雪花模型: 1个事实表多层多个维度表
    一个事实表就是一颗星星, 星座是由多个星星组成的. 维度是星星的边角.
  testPoint: ["三个模型定义和判断"]
  url: ""
  relation: 
    in: ["表结构数据"]

- name: 筛选器
  content: |
    方向: 出发是维度字段(维度表,副表,一表), 指向是度量字段(事实表,主表,多表)
    对应关系: 
        一对多: 维度表对度量表
        多对一: 度量表对维度表
        一对一: 含有相同的主键
    汇总:
        类型一规则(一对多): 用维度表筛选度量表, 维度表中的筛选字段和公共字段是一一对应, 在度量表中根据公共字段分组即可.
        类型二规则(多对一): 非维度表筛选度量表, 度量表中的筛选字段和公共字段不是一一对应, 会先根据筛选字段去重公共字段, 再根据维度表筛选
    跨表:
        跨表筛选只有指向正确的才可以算是有效路径, 无指向的不能筛选.
        跨表筛选无论完整路径中各表的对应关系如何, 都将按照类型二规则进行计算.
        影响筛选结果的路径是有效路径(实线), 不影响的是无效路径(虚线)
        交叉连接: 两表之间形成不同的筛选路径
  testPoint: ["筛选器的方向","对应关系","汇总规则","跨表连接"]
  url: ""
  relation: 
    in: ["表格与表"]

- name: E-R图 
  content: |
    Entity Relationship diagram, 实体关系图,是一种提供了实体,属性和联系的方法, 可以标识多表的连接关系
    1. 矩形框：表示实体,在框中记入实体名
    2. 菱形框：表示关系,在框中记入联系名
    3. 椭圆形框：表示实体或联系的属性,将属性名记入框中
    4. 连线:实体与属性之间;实体与关系之间;关系与属性之间用直线相连, 并在直线上标注联系的类型。
      4.1. 对于一对一联系, 要在两个实体连线方向各写1;
      4.2. 对于一对多联系, 要在一的一方写1, 多的一方写N;
      4.3. 对于多对多关系, 则要在两个实体连线方向各写N, M
  testPoint: ["理解实体关系属性","理解1对1,1对多,多对多"]
  url: 参考:https://zhuanlan.zhihu.com/p/270299029
  relation: 
    in: ["表格与表"]

# SQL
- name: SQL
  content: |
    SQL语言主要分为:
    1.DQL(Data QueryLanguage): 数据查询语言, 用于对数据进行查询, 如select
    2.DML(Data Manipulation Language): 数据操作语言, 对数据进行增加、修改、删除, 如insert、update、delete
    3.DDL(Data Definition Language): 数据定义语言, 进行数据库、表的管理等, 如alter, create, drop
    4.DCL(Data Control Language):数据控制语言,进行授权与权限回收,如grant、revoke
    5.TPL(TRANSACTION PROCESS Language): 事务处理语言,对事务进行处理, 包括begin transaction、commit、rollback
  testPoint: ["记忆SQL语言的5中分类, 以及包含的具体命令"]
  url: ""

- name: database
  content: |
    1.创建数据库：`CREATE DATABASE name;`
    2.删除数据库: `DROP DATABASE name`
    3.更改数据库: `RENAME DATABASE olddbname TO newdbname`
    4.查看数据库: `SHOW DATABASES`
    注意在使用数据库前, 首先要进入数据库：`USE name`, 还可以直连数据库：`mysql -h host -u user -p databasename`
  testPoint: ["数据库的增删改查"]
  url: ""
  relation:
    in: ["SQL"]

- name: table
  content: |
    1.创建表`CREATE TABLE table_name`
    ```sql
    CREATE TABLE `user_basic` (
      `user_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '用户ID',
      `mobile` char(11) NOT NULL COMMENT '手机号',
      PRIMARY KEY (`user_id`),
      UNIQUE KEY `mobile` (`mobile`),
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户基本信息表';
    ```
    2.删除表:`DROP TABLE 表名`
    3.修改表:`ALTER TABLE oldname RENAME newname`
    4.查看表`SHOW TABLES;`或`DESCRIBE(DESC) table_name;`
  testPoint: ["数据表的增删改查"]
  url: ""
  relation:
    in: ["SQL"]

- name: view
  content: |
    1.创建视图`CREATE VIEW 视图名 AS SELECT...`
    2.删除视图`DROP VIEW 视图名`
    3.修改视图`ALTER 视图名 AS SELECT...`
    4.查询视图`SELECT * FROM 视图名`
  testPoint: ["视图创建"]
  url: ""
  relation:
    in: ["SQL"]

- name: field
  content: |
    1.添加字段: `ALTER TABLE 表名 ADD 字段名 字段类型 约束条件 FIRST|AFTER 参照字段名;`
    2.删除字段: `ALTER TABLE 表名 DROP 字段名;`
    3.修改字段:
        修改字段名:`ALTER TABLE tablename CHANGE oldfieldname newfieldname fieldtype;`
        修改字段类型: `ALTER TABLE tablename MODIFY fieldname fieldtype;`
        修改字段位置: `ALTER TABLE 表名 MODIFY 字段名 数据类型 FIRST|AFTER 参照字段名;`
    4.删除字段:`ALTER TABLE 表名 DROP 字段名;`
  testPoint: ["数据字段的增删改查"]
  url: ""
  relation:
    in: ["SQL"]

- name: 约束条件
  content: |
    1.主键 Primary Key(默认索引)
    2.非空约束 not null
    3.唯一约束 Unique Key(保证数据不重复)
    4.自动增长 auto_increment
    5.默认约束 defaut
    6.外键 Foreign Key(默认索引)一般不用
  testPoint: ["理解各个约束"]
  url: ""
  relation:
    in: ["SQL"]

- name: data
  content: |
    各种数据操作的命令

- name: insert
  content: |
    `INSERT INTO 表名 (列1, 列2,...) VALUES (值1, 值2,....);`
    `LOAD DATA INFILE 文件路径 INTO TABLE 表名 FIELDS TERMINATED BY '分隔符';`
    `INSERT INTO 表名(字段名) SELECT 其他表字段名 FROM 其他表;`
    `CREATE TABLE 新表名 AS SELECT 字段名 FROM 表名;`
  testPoint: ["插入一条数据","批量导入数据","插入选择数据","使用选择数据创建表"]
  url: ""
  relation:
    in: ["data"]

- name: drop
  content: |
    `DELETE FROM 表名称 WHERE 列名称 = 值;`
    `TRUNCATE 表名`
  testPoint: ["删除某条数据","清空数据"]
  url: ""
  relation:
    in: ["data"]

- name: update
  content: |
    `UPDATE table_name
    SET column1=value1,column2=value2,...
    WHERE some_column=some_value;`
  testPoint: ["更新某些数据"]
  url: ""
  relation:
    in: ["data"]

- name: select
  content: |
    1.常用:`SELECT [常量|公式|表达式|字段名列表|*]`
      1.常量 `SELECT 1`
      2.公式 `SELECT 1+1`
      3.条件判断表达式 `SELECT 1+1=3`
      4.case `case when sal>=3000 then 'high' else 'low' end as 'salry_level'`
      5.字段名 `SELECT 字段名 FROM 表名`
      6.* `SELECT * FROM 表名`
    2.别名:`SELECT col AS alias FROM table`
    3.去重:`SELECT DISTINCT 字段名`
  testPoint: ["筛选数据","别名","去重"]
  url: ""
  relation:
    in: ["data"]

- name: where
  content: |
    1. 比较运算符
      1. 等号,大于小于号
      2. `BETWEEN...AND` 等价于 `>= and <=`
      3. `LIKE` 使用%作为通配符
      4. `[NOT] IN ('Belgium', 'France',)`
      5. `IS [NOT] NULL`
      6. `[NOT] EXISTS (SELECT * ...)`
    2. 逻辑运算符
      1. `WHERE col1 = 'Support' AND col2 = 2021`
      2. `WHERE col1 = 'Seattle' OR col2 = 'Bellevue'`
      3. `WHERE col NOT LIKE 'U%'`
  testPoint: ["between","like","in","exists","逻辑运算符使用"]
  url: ""
  relation:
    in: ["data"]

- name: order by
  content: |
    字段1升序, 字段2降序. `order by 列1 asc 列2 desc`
  testPoint: ["升序","降序","先升序再降序"]
  url: ""
  relation:
    in: ["data"]

- name: limit
  content: |
    `limit start,count`
  testPoint: ["查询指定数量数据"]
  url: ""
  relation:
    in: ["data"]

- name: group by
  content: |
    `GROUP BY 列名 [HAVING 条件表达式] [WITH ROLLUP]`
    1.列名: 是指按照指定字段的值进行分组。
    2.HAVING 条件表达式: 用来过滤分组后的数据。
    3.WITH ROLLUP:在所有记录的最后加上一条记录,显示select查询时聚合函数的统计和计算结果
  testPoint: ["分组","分组过滤","rollup"]
  url: ""
  relation:
    in: ["data"]

- name: 聚合函数
  content: |
    一般结合分组(group by)来使用, 用于统计和计算分组数据。如果不跟group by, 则把整个表当成一个分组
  testPoint: ["结合group"]
  url: ""
  relation:
    in: ["data"]
    relate: ["group by","select"]

- name: 数学函数
  content: |
    处理数值数据
  testPoint: ["处理数值"]
  url: ""
  relation:
    in: ["data"]
    relate: ["数据类型","select"]

- name: 字符串函数
  content: |
    处理字符串
  testPoint: ["处理字符串","select"]
  url: ""
  relation:
    in: ["data"]
    relate: ["数据类型"]

- name: 时间函数
  content: |
    处理时间
  testPoint: ["处理时间"]
  url: ""
  relation:
    in: ["data"]
    relate: ["数据类型","select"]

- name: 数据类型
  content: |
    1. 数值型(整型, 浮点型)
    2. 字符型
    3. 时间型
  testPoint: ["数据类型"]
  url: ""
  relation:
    in: ["SQL"]

- name: if
  content: |
    1.ifnull(expression, alt_value)
    2.if(expr1,expr2,expr3)
  testPoint: ["字段判断"]
  url: ""
  relation:
    in: ["data"]
    relate: ["select","case"]

- name: case
  content: |
    select 
        name, 
        sal,
        case when sal>=3000 then 'high' else 'low' end as 'salry_level'
    from emp; 
  testPoint: ["字段判断"]
  url: ""
  relation:
    in: ["data"]
    relate: ["select","if"]

- name: over
  content: |
    `over()`的意思就是将聚合的结果添加到每一行
    新增一行`AVG(`字段名`) OVER() AS `新字段名``
    分组`AVG(`字段名`) OVER(PARTITION BY `order_id` ORDER BY `ext_price` ASC)`
    分组排序`row_number() OVER(PARTITION BY `order_id` ORDER BY `ext_price` ASC)`
  testPoint: ["分组排序"]
  url: ""
  relation:
    in: ["SQL"]
    relate: ["select","group by"]

- name: join
  content: |
    INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN
  testPoint: ["表关联查询"]
  url: ""
  relation:
    in: ["SQL"]

- name: union
  content: |
    union会删除重复数据, union all 不会
  testPoint: ["查询记过竖向拼贴"]
  url: ""
  relation:
    in: ["SQL"]
    relate: ["join"]

- name: subquery
  content: |
    1.必须用括号括起来
    2.最多嵌套255层
    3.执行顺序由内到外,先执行子查询再查询主查询
    4.若子查询作为一个表, 则需要添加表别名; 如果需要引用子查询的字段, 则需要添加字段别名
  testPoint: ["子查询使用"]
  url: ""
  relation:
    in: ["SQL"]
    relate: ["select"]

# 统计学

- name: 统计学
  content: |
    参数:总体的特征(比例$\pi$,均值$\mu$,方差$\sigma^2$,容量$N$)
    统计量:样本的特征(比例$P$,均值$\overline{x}$,方差$S^2$,容量$n$)
  testPoint: ["参数, 统计量理解"]
  url: ""
  relation:

- name: 数据类型
  content: |
    1.分类数据, 低级
    2.顺序数据, 中级
    3.数值数据, 高级
    高级数据可以转换为低级数据, 低级数据无法转换为高级数据. 数值数据的方法分类和排序数据不一定能用. 
  testPoint: ["数据类型分类"]
  url: ""
  relation:
    in: ["统计学"]
    relate: ["集中趋势","相关性分析"]

- name: 集中趋势
  content: |
    1.分类数据的集中趋势:众数$\M_o$
    2.顺序数据的集中趋势:分位数$Q_l,M_e,Q_U$
    3.数值数据的集中趋势:算数平均数$\overline{x}$, 调和平均数, 几何平均数, 平方平均数
  testPoint: ["按数据类型记忆集中趋势指标"]
  url: ""
  relation:
    in: ["统计学"]
    relate: ["数据类型","离散趋势"]

- name: 离散趋势
  content: |
    1.分类数据的离散程度:异众比率
    2.顺序数据的离散程度:极差, 四分位差
    3.数值数据的离散程度:离差,方差,离散系数($V_s=\frac{\sigma}{\overline(X)}$)
  testPoint: ["按数据类型记忆集中离散指标"]
  url: ""
  relation:
    in: ["统计学"]
    relate: ["数据类型","集中趋势"]

- name: 偏态
  content: |
    1. 若偏态系数为正, 则为右偏分布. 反之为左偏分布.
    2. 若偏态系数的绝对值大于1, 则为高度偏态分布. 若介于0.5到1之间, 则为中等偏态分布.
    3. 右偏是均数在右侧(图像是尾巴为右侧)众数在左侧(顶峰在左侧), 左偏反之. 无论左偏还是右偏中位数使用在中间.
  testPoint: ["左右偏判断","左右偏程度判断","三数与左右偏的关系"]
  url: ""
  relation:
    in: ["统计学"]
  


- name: 峰态
  content: |
    分度小于0扁平, 峰度大于0尖峰, 峰度等于0与正态分布一致
  testPoint: ["扁平尖峰判断"]
  url: ""
  relation:
    in: ["统计学"]

- name: 描述性统计图表
  content: |
    1.线图(时间序列)
    2.散点图(变量相关关系)
    3.条形图(对比分析)
    4.饼图(结构分析)
    5.直方图(数据分布)
    6.箱线图(数据分布)
  testPoint: ["各种数据图的应用"]
  url: ""
  relation:
    in: ["统计学"]

- name: 分布
  content: |
    1.两点分布
    2.二项分布
    3.正态分布
    4.卡方分布
  testPoint: 
  url: ""
  relation:
    in: ["统计学"]

- name: 两点分布
  content: |
    若1出现的概率为p, 则0出现的概率为1-p. 将参数为p的两点分布表示为`Bern(p)`:
    期望: $E(X)=p$
    方差: $Var(X)=p(1-p)$
  testPoint: ["记忆定义"]
  url: ""
  relation:
    in: ["分布"]


- name: 二项分布
  content: |
    项分布(binomial distribution)是按照成功概率为p进行了n次伯努利试验时的成功次数的分布. 记作`Bin(n,p)`
    期望: $E(X)=np$
    方差: $Var(X)=np(1-p)$
  testPoint: ["记忆定义"]
  url: ""
  relation:
    in: ["分布"]


- name: 正态分布
  content: |
    1. 正态分布(normal distribution)高斯分布(gaussian distribution)定义:,参数有$\mu,\sigma^2$两个,表示为$N(\mu,\sigma^2)$
    2. 3sigma:$1\sigma(\mu-\sigma,\mu+\sigma)$概率为0.68, $2\sigma(\mu-2\sigma,\mu+2\sigma)$概率为0.95, $3\sigma(\mu-3\sigma,\mu+3\sigma)$为0.99
    3. 标准正态分布转换:转换为标准正态分布$Z=\frac{X-\mu}{\sigma} \sim N(0,1)$
  testPoint: ["记忆定义","3sigma对应的概率","标准正态分布转换"]
  url: ""
  relation:
    in: ["分布"]
    relate: ["卡方分布","t分布"]

- name: 卡方分布
  content: |
    N个标准正态分布的平方和服从自由度为n的卡方分布. 卡方分布(chi-square distribution)定义:$Z_1,...,Z_n$服从N(0,1), 则Y=\sum_{i=1}^nZ_i^2$服从自由度为n的卡方分布,记为$\chi^2(n)$. 
  testPoint: ["卡方分布的定义"]
  url: ""
  relation:
    in: ["分布"]
    relate: ["正态分布","t分布","F分布"]
  
- name: t分布
  content: |
    正态分布和开根号的卡方自由度分之卡方分布服从自由度为卡方自由度的t分布. $Z为标准正态分布N(0,1), Y为自由度为n的卡方分布\chi^2(n), 则\frac{Z}{\sqrt{Y/n}}服从自由度为n的t分布, 记做t(n)$. 
  testPoint: ["t分布定义"]
  url: ""
  relation:
    in: ["分布"]
    relate: ["正态分布","卡方分布"]



- name: F分布
  content: |
    两个卡方除以卡方自由度的比值服从F(分子卡方自由度, 分母卡方自由度)分布. $Y_1 \sim \chi^2(n_1), Y_2 \sim \chi^2(n_2)则F = \frac{Y_1/n_1}{Y_2/n_2}服从自由度为$n_1,n_2$的F分布, 记做F(n_1,n_2)$.
  testPoint: ["F分布定义"]
  url: ""
  relation:
    in: ["分布"]
    relate: ["卡方分布"]


- name: 分位点
  content: |
    以正态分布为例, 其分位点记作$Z_\alpha$, $Z_\alpha$表示右侧面积(概率)为$\alpha$的点, 则其左侧面积为$1-\alpha$.
    同理$Z_{1-\alpha}$表示右侧面积为$1-\alpha$的点, 则其左侧面积为$\alpha$.
    已知$Z_\alpha$右侧面积为$\alpha$, 求解$Z_\alpha$:
      1. $Z_\alpha$的右侧面积为$\alpha$, 则左侧的面积为$1-\alpha$
      2. 从分布函数表中知道面积$1-\alpha$, 则对应的列和行的值为$Z_\alpha$.
  testPoint: ["计算分为点"]
  url: ""
  relation:
    in: ["统计学"]
    relate: ["分布"]


- name: 相关性分析
  content: |
    分类数据:列联分析法, 排序数据:Spearman等级相关系数, 数值数据:Pearson相关系数
  testPoint: ["不同数据使用不同的相关性分析方法"]
  url: ""
  relation:
    in: ["统计学"]
    relate: ["数据类型"]


# 指标
- name: 通用类指标
  content: |
    1. 求和类，常规求和+累计求和
    2. 计数类，常规计数+去重计数
    3. 比较类，均比+基准比（标准比+目标比）+同环比


- name: 网站指标
  content: |
    PV(page view), UV(unique visitor), DV(PV/UV)
    Exit Rate：淘宝跳失率: 一天之内来访你的店铺浏览量为1的访客数除以店铺总访客数。
    GMV:流量*转化率*客单价
  testPoint: ["PV","UV","DV"]
  url: ""
  relation:
    in: ["指标"]


- name: 客户成本类指标
  content: |
    引流：将企业付费给其他平台打广告吸引流量的整个过程称为引流。引流支付费用主要有以下三种方式：
      1.CPM(cost per miles)千次曝光收费
      2.CPS(cost per sales)广告平台的用户点击了广告并发生了购买行为，广告平台将根据购买数量或购买金额收取费用
      3.CPC(cost per click)点击次数收费
  testPoint: ["CPM","CPS","CPC"]
  url: ""
  relation:
    in: ["指标"]

- name: 客户收入类指标
  content: |
    客单价：客户单笔消费时贡献的价值，客单价高的客户群体会拥有较高的消费实力水平。
  testPoint: ["客单价"]
  url: ""
  relation:
    in: ["指标"]

- name: 客户生命周期指标
  content: |
    1. 新增阶段: 新增注册会员数，新增访客数，新增下载用户
    2. 留存阶段
    留存定义：单位时间内用户是否发生过浏览，登录，购买，到店，咨询等行为为准判断是否为留存
      单位时间留存人数：单位时间仍处于留存状态的客户人数，如次日留存，30日留存， 年留存人数
      单位时间留存率：留存人数/客户总人数，其中留存人数与客户总人数可以根据场景不同而进行替换，比如新增用户留存率=新增客户留存人数/新增客户总人数
    活跃用户:
      DAU/MAU（Daily/Monthly Active User）日活月活用户
    3. 流失阶段
    单位时间流失客户召回人数在总客户人数中的占比。
    单位时间流失召回率：流失召回人数/流失总人数
  testPoint: ["三个阶段","留存","活跃","招回"]
  url: ""
  relation:
    in: ["指标"]


- name: 进货类指标
  content: |
    缺货量：未能按照预期采购到的产品数量的合计值
    缺货率：去货量/预期采购数量
    到货平均时长：从给供应商下订单到收到货品的平均时长
  testPoint: 
  url: ""
  relation:
    in: ["指标"]

    
- name: 销售类指标
  content: |
    售前阶段：
      产品曝光人数：单位时间内，不同产品投放渠道被用户搜索或者看到的总人数
      产品曝光次数：单位时间内，在不同产品投放渠道被用户搜索或看到的总次数
      产品搜索次数：单位时间内，产品被搜索的总次数
      产品点击次数：单位时间内，产品链接被用户点击的总次数
      其他售前阶段产品销售类指标：产品点击率，点击人数，收藏次数
    售中阶段：
      GMV:流量*转化率*客单价
      售罄率：单位时间内，销售件数/进货件数
      产品毛利率：毛利额/销售额
      产品浏览付费转化率：产品付费次数/产品浏览次数，如果较低可能说明产品价格偏高，页面不美观，介绍信息不完整，付费跳转不通畅
      产品询价购买率：产品销售次数/产品被询价次数
      其他售中指标：点击付费转化率、产品询价次数、库销比、产品支持率、交叉比率、复购率
    售后阶段：
      发货数量
      退货数量
      其他售后指标：损毁率、退货率、投诉率
  testPoint: ["GMV"] 
  url: ""
  relation:
    in: ["指标"]

- name: 库存类指标
  content: |
    期初库存：单位时间的起点处的库存量
    期末库存：单位时间的终点处的库存量
    库存周转率：一季度的销售物料成本为200万元，其季度初的库存价值为30万元，该季度底的库存价值为50万元，那么其库存周转率为200/[（30+50）/2]=5次。相当于该企业用平均40万的现金在一个季度里面周转了5次，赚了5次利润.
    从企业经营角度来看，存货周转率越高，说明存货的销售情况越好，存货的周转速度越快，流动性越强，单位时间内能够带来的收益越大
  testPoint: ["期初库存","期末库存","库存周转率"] 
  url: ""
  relation:
    in: ["指标"]






# 分析模型

- name: RFM
  content: |
    衡量客户价值和客户创利能力,
    Recency: 统计客户最近一次消费的时间与当前时间的差值
    Frequency: 指定时间区间内统计用户的购买次数
    Money: 指定时间区间内统计用户的消费总金额

    用户类别|R值|F值|M值|运营策略
    --|--|--|--|--
    重要价值用户|高|高|高|保持现状
    重要发展用户|高|低|高|提升频次
    重要保持用户|低|高|高|用户回流
    重要挽留用户|低|低|高|重点召回
    一般价值用户|高|高|低|刺激消费
    一般发展用户|高|低|低|挖掘需求
    一般保持用户|低|高|低|流失召回
    一般挽留用户|低|低|低|不再尝试挽回
  testPoint: ["RFM的含义"] 
  url: ""
  relation:
    in: ["分析模型"]


- name: 产品分类模型
  content: |
    波士顿矩阵（Boston Consulting Group，BCG）：销售增长率和市场占有率
    明星型业务（Stars，指高增长、高市场份额）：这个领域中的产品处于快速增长的市场中并且占有支配地位的市场份额，但也许会或也许不会产生正现金流量，它将成为公司未来的现金牛业务
    问题型业务（Question Marks，指高增长、低市场份额）：这些产品可能利润率很高，但占有的市场份额很小。
    现金牛业务（Cash cows，指低增长、高市场份额）：处在这个领域中的产品产生大量的现金，但未来的增长前景是有限的。
    瘦狗型业务（Dogs，指低增长、低市场份额）：这类业务常常是微利甚至是亏损的，瘦狗型业务存在的原因更多的是由于感情上的因素，虽然一直微利经营，但象人养了多年的狗一样恋恋不舍而不忍放弃。
  testPoint: ["销售增长率,市场占有率两个维度对应的业务名称"] 
  url: ""
  relation:
    in: ["分析模型"]


- name: 漏斗模型
  content: |
    将事项分为低级关系模块, 主要分析4个特征:
      1.粗细(容量): 越粗用户量越大
      2.斜率: 斜率越大, 每个阶段流失用户越多
      3.体形: 各阶段模块均匀递减
      4.流速: 加上时间维度, 每个阶段时间段, 周期就越短, 效率就高
    具体应用:
      1.CRM漏斗
      2.购物漏斗
      3.AARRR漏斗
  testPoint: ["漏斗模型的特征分析"] 
  url: ""
  relation:
    in: ["分析模型"]


- name: AARRR
  content: |
    AARRR是Acquisition、Activation、Retention、Revenue、Refer
  testPoint: ["AARRR的含义"] 
  url: ""
  relation:
    in: ["漏斗模型"]


- name: 可视化图表
  content: |
    1. 比较类视图:油量表,图环百分比进度;柱状图,条形图,雷达图,词云图,树状图;地图
    2. 构成类视图:饼图,环形图,瀑布图
    3. 序列类视图:折线图,面积图,柱形图,漏斗图
    4. 描述类视图:直方图,箱线图,散点图
  testPoint: ["可视化图表的四种分类","各个分类中的包含什么图表","每个图表的具体应用场景"]
  url: ""


- name: 箱型图
  content: |
    ```python
        Q1-1.5IQR   Q1   median  Q3   Q3+1.5IQR
                      |-----:-----|
      o      |--------|     :     |--------|    o  o
                      |-----:-----|
    异常值             <----------->            异常值
                          IQR
    ```
    下四分位数Q1：是数据集下半部分的中位数。
    中位数media：数据集中的中间值
    上四分位数Q3：数据集上半部分的中位数
    四分位距（IQR, Inter-Quartile Range） ：上下四分位数之间的距离
  testPoint: []
  url: ""
  relation:
    in: ["分析模型"]
